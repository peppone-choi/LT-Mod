initiate_display_vars = {
	#PURELY FOR DISPLAY PURPOSES
	set_variable = { GDP_trillion = 0 }
	set_variable = { GDP_million = 0 }
	set_variable = { total_budget_billion = 0 }
	set_variable = { total_budget_thousand = 0 }
	set_variable = { total_expenditures_billion = 0 }
	set_variable = { total_expenditures_thousand = 0 }
	set_variable = { civilian_expenditures_billion = 0 }
	set_variable = { civilian_expenditures_thousand = 0 }
	set_variable = { military_expenditures_billion = 0 }
	set_variable = { military_expenditures_thousand = 0 }
	set_variable = { money_reserves_billion = 0 }
	set_variable = { money_reserves_thousand = 0 }
	set_variable = { national_debt_trillion = 0 }
	set_variable = { national_debt_million = 0 }
	set_variable = { deficit_billion = 0 }
	set_variable = { deficit_thousand = 0 }
	set_variable = { manpower_costs_billion = 0 }
	set_variable = { manpower_costs_thousand = 0 }
	set_variable = { military_factory_costs_billion = 0 }
	set_variable = { military_factory_costs_thousand = 0 }
	set_variable = { misc_costs_billion = 0 }
	set_variable = { misc_costs_thousand = 0 }
	set_variable = { misc_income_billion = 0 }
	set_variable = { misc_income_thousand = 0 }
	set_variable = { annual_debt_payments_thousand = 0 }
	set_variable = { annual_debt_payments_billion = 0 }
}


## SLIDERS
TNO_sliders_initialize = {
	set_variable = { econ_deficit_monetization_minimal_pct = 0 }
	set_variable = { econ_deficit_monetization_maximal_pct = 100 }
	set_variable = { econ_deficit_monetization_slider_pct = 0 }

	set_variable = { econ_army_expenditures_slider_pct = 50 }
	set_variable = { econ_naval_expenditures_slider_pct = 50 }
	set_variable = { econ_research_expenditures_slider_pct = 50 }
	set_variable = { econ_social_expenditures_slider_pct = 50 }
	set_variable = { econ_admin_expenditures_slider_pct = 50 }
	set_variable = { econ_nuclear_expenditures_slider_pct = 50 }
	set_variable = { econ_consumer_goods_slider_pct = 50 }

	set_variable = { econ_army_expenditures_minimal_pct = 25 }
	set_variable = { econ_army_expenditures_maximal_pct = 75 }

	set_variable = { econ_naval_expenditures_minimal_pct = 25 }
	set_variable = { econ_naval_expenditures_maximal_pct = 75 }

	set_variable = { econ_nuclear_expenditures_minimal_pct = 25 }
	set_variable = { econ_nuclear_expenditures_maximal_pct = 75 }

	set_variable = { econ_research_expenditures_minimal_pct = 25 }
	set_variable = { econ_research_expenditures_maximal_pct = 75 }

	set_variable = { econ_social_expenditures_minimal_pct = 25 }
	set_variable = { econ_social_expenditures_maximal_pct = 75 }

	set_variable = { econ_admin_expenditures_minimal_pct = 25 }
	set_variable = { econ_admin_expenditures_maximal_pct = 75 }

	set_variable = { econ_consumer_goods_minimal_pct = 25 }
	set_variable = { econ_consumer_goods_maximal_pct = 75 }
	##########
	set_variable = { econ_army_maintenance_slider_pct = 50 }
	set_variable = { econ_army_R_D_slider_pct = 50 }
	set_variable = { econ_army_logistics_slider_pct = 50 }
	set_variable = { econ_army_procurement_slider_pct = 50 }

	set_variable = { econ_social_healthcare_slider_pct = 50 }
	set_variable = { econ_social_pensions_slider_pct = 50 }
	set_variable = { econ_social_education_slider_pct = 50 }
	set_variable = { econ_social_unemployment_slider_pct = 50 }

	set_variable = { econ_admin_security_slider_pct = 50 }
	set_variable = { econ_admin_regulations_slider_pct = 50 }
	set_variable = { econ_admin_bureaucracy_slider_pct = 50 }

	set_variable = { econ_research_science_slider_pct = 50 }
	set_variable = { econ_research_facilities_slider_pct = 50 }

	set_variable = { econ_army_maintenance_minimal_pct = 25 }
	set_variable = { econ_army_R_D_minimal_pct = 25 }
	set_variable = { econ_army_logistics_minimal_pct = 25 }
	set_variable = { econ_army_procurement_minimal_pct = 25 }

	set_variable = { econ_social_healthcare_minimal_pct = 25 }
	set_variable = { econ_social_pensions_minimal_pct = 25 }
	set_variable = { econ_social_education_minimal_pct = 25 }
	set_variable = { econ_social_unemployment_minimal_pct = 25 }

	set_variable = { econ_admin_security_minimal_pct = 25 }
	set_variable = { econ_admin_regulations_minimal_pct = 25 }
	set_variable = { econ_admin_pollution_minimal_pct = 25 }
	set_variable = { econ_admin_bureaucracy_minimal_pct = 25 }

	set_variable = { econ_research_science_minimal_pct = 25 }
	set_variable = { econ_research_facilities_minimal_pct = 25 }

	set_variable = { econ_army_maintenance_maximal_pct = 75 }
	set_variable = { econ_army_R_D_maximal_pct = 75 }
	set_variable = { econ_army_logistics_maximal_pct = 75 }
	set_variable = { econ_army_procurement_maximal_pct = 75 }

	set_variable = { econ_social_healthcare_maximal_pct = 75 }
	set_variable = { econ_social_pensions_maximal_pct = 75 }
	set_variable = { econ_social_education_maximal_pct = 75 }
	set_variable = { econ_social_unemployment_maximal_pct = 75 }

	set_variable = { econ_admin_security_maximal_pct = 75 }
	set_variable = { econ_admin_regulations_maximal_pct = 75 }
	set_variable = { econ_admin_pollution_maximal_pct = 75 }
	set_variable = { econ_admin_bureaucracy_maximal_pct = 75 }

	set_variable = { econ_research_science_maximal_pct = 75 }
	set_variable = { econ_research_facilities_maximal_pct = 75 }
	TNO_nation_specific_slider_values_initialize = yes
}

TNO_nation_specific_slider_values_initialize = {
	GNG = {
		set_variable = { econ_army_expenditures_minimal_pct = 0 }
		set_variable = { econ_army_expenditures_maximal_pct = 100 }

		set_variable = { econ_naval_expenditures_minimal_pct = 0 }
		set_variable = { econ_naval_expenditures_maximal_pct = 100 }

		set_variable = { econ_nuclear_expenditures_minimal_pct = 0 }
		set_variable = { econ_nuclear_expenditures_maximal_pct = 100 }

		set_variable = { econ_research_expenditures_minimal_pct = 0 }
		set_variable = { econ_research_expenditures_maximal_pct = 100 }

		set_variable = { econ_social_expenditures_minimal_pct = 0 }
		set_variable = { econ_social_expenditures_maximal_pct = 100 }

		set_variable = { econ_admin_expenditures_minimal_pct = 0 }
		set_variable = { econ_admin_expenditures_maximal_pct = 100 }

		set_variable = { econ_consumer_goods_minimal_pct = 0 }
		set_variable = { econ_consumer_goods_maximal_pct = 100 }
	}

	MGN = {
		set_variable = { econ_research_expenditures_minimal_pct = 60 }
		set_variable = { econ_research_expenditures_maximal_pct = 100 }
	}

	IRE = {
		set_variable = { econ_army_expenditures_minimal_pct = 20 }
		set_variable = { econ_army_expenditures_maximal_pct = 40 }
		set_variable = { econ_army_expenditures_slider_pct = 30 }
	}

	CHL = {
		set_variable = { econ_army_expenditures_minimal_pct = 0 }
		set_variable = { econ_army_expenditures_maximal_pct = 50 }

		set_variable = { econ_admin_expenditures_minimal_pct = 15 }
		set_variable = { econ_admin_expenditures_maximal_pct = 55 }
	}
	
	MEX = {
		set_variable = { econ_army_expenditures_minimal_pct = 15 }
		set_variable = { econ_army_expenditures_maximal_pct = 40 }
		set_variable = { econ_army_expenditures_slider_pct = 20 }
		
		set_variable = { econ_naval_expenditures_minimal_pct = 15 }
		set_variable = { econ_naval_expenditures_maximal_pct = 35 }
		set_variable = { econ_naval_expenditures_slider_pct = 20 }

		set_variable = { econ_research_expenditures_minimal_pct = 0 }
		set_variable = { econ_research_expenditures_maximal_pct = 50 }
		set_variable = { econ_research_expenditures_slider_pct = 20 }
	}
}

## PRODUCTION UNITS


# Toggles the econ tab PU menu, used for some shortcuts
toggle_production_unit_menu = {
	if = {
		limit = { NOT = { has_country_flag = econ_view_visible } }
		set_country_flag = econ_view_visible
		set_country_flag = economy_production_units_open
	}
	else = {
		clr_country_flag = econ_view_visible
	}
	update_economy_tab = yes
	update_all_econ_pie_charts = yes
	update_production_unit_allocation = yes
	set_country_flag = has_opened_pu_menu
	add_to_variable = { TNO_pu_menu_dirty = 1 }
}


# Update the production units menu display
update_prod_units_display = {
	clear_array = prod_units_display_amounts_frame
	clear_array = prod_units_displaying_5
	clear_array = prod_units_displaying_10

	for_loop_effect = {
		start = 0
		end = 4
		value = i

		if = {
			limit = { check_variable = { prod_units_display_amounts^i = 10 } }
			add_to_array = { prod_units_display_amounts_frame = 3 }
			add_to_array = { prod_units_displaying_5 = 1 }
			add_to_array = { prod_units_displaying_10 = 2 }
		}
		else_if = {
			limit = { check_variable = { prod_units_display_amounts^i = 5 } }
			add_to_array = { prod_units_display_amounts_frame = 2 }
			add_to_array = { prod_units_displaying_5 = 2 }
			add_to_array = { prod_units_displaying_10 = 1 }
		}
		else = {
			add_to_array = { prod_units_display_amounts_frame = 1 }
			add_to_array = { prod_units_displaying_5 = 1 }
			add_to_array = { prod_units_displaying_10 = 1 }
		}
	}

	clamp_variable = { var = econ_consumer_goods_minimal_pct min = 0 max = 100 }
	clamp_variable = { var = econ_consumer_goods_maximal_pct min = 0 max = 100 }
	# Consumer goods (Only multiples of 10 allowed)
	clamp_variable = { var = econ_consumer_goods_slider_pct min = econ_consumer_goods_minimal_pct max = econ_consumer_goods_maximal_pct }
	divide_variable = { econ_consumer_goods_slider_pct = 5 }
	round_variable = econ_consumer_goods_slider_pct
	multiply_variable = { econ_consumer_goods_slider_pct = 5 }

	set_variable = { econ_consumer_goods_slider_dot_x = econ_consumer_goods_slider_pct }
	multiply_variable = { econ_consumer_goods_slider_dot_x = 1.88 }
	add_to_variable = { econ_consumer_goods_slider_dot_x = 45 }
	set_variable = { econ_consumer_goods_minimal_x = econ_consumer_goods_minimal_pct }
	multiply_variable = { econ_consumer_goods_minimal_x = 1.88 }
	add_to_variable = { econ_consumer_goods_minimal_x = 45 }
	set_variable = { econ_consumer_goods_maximal_x = econ_consumer_goods_maximal_pct }
	multiply_variable = { econ_consumer_goods_maximal_x = 1.88 }
	add_to_variable = { econ_consumer_goods_maximal_x = 42 }

	add_to_variable = { TNO_economy_GUI_dirty = 1 }
	add_to_variable = { TNO_production_gui_dirty = 1 }
	#force_update_dynamic_modifier = yes
}


# Game-start setup for production units
setup_production_units = {
	clear_array = prod_units_allocation_types
	add_to_array = { prod_units_allocation_types = 0 }
	add_to_array = { prod_units_allocation_types = 1 }
	add_to_array = { prod_units_allocation_types = 2 }

	clear_array = prod_units_production_display
	resize_array = { array = prod_units_production_display value = 0 size = 15 }

	clear_array = prod_units_display_amounts
	resize_array = { array = prod_units_display_amounts value = 1 size = 3 }

	set_variable = { PU_consumer_goods_production = 0 }
	add_dynamic_modifier = { modifier = TNO_consumer_goods_production_dynamic_modifier }
	set_variable = { PU_consumer_goods_stability_impact = 0 }
	set_variable = { PU_consumer_goods_gdp_impact = 0 }
	set_variable = { consumer_goods_desired_ratio = 0 }

	set_variable = { PU_consumer_goods = 0 }
	set_variable = { PU_military_factories = 0 }
	set_variable = { PU_civilian_factories = 0 }
	set_variable = { mils_mult = 1 }
	set_variable = { mils_mult_old = 1 }

	set_variable = { PU_imports = 0 }
	set_variable = { PU_exports = 0 }
	set_variable = { PU_imports_m = 0 }
	set_variable = { PU_exports_m = 0 }
	clear_array = pending_trade_deals

	set_variable = { PU_consumer_goods_desired = 0 }
	set_variable = { PU_military_factories_desired = 0 }
	set_variable = { PU_civilian_factories_desired = 0 }

	update_prod_units_amnt = yes
	update_prod_units_display = yes

	auto_set_ai_pus = yes
}


# Sets up AI production unit allocation
# AI currently is dumb as hell and will split 50/50 mils civs
auto_set_ai_pus = {
	calculate_consumer_goods_need = yes
	set_variable = { PU_consumer_goods_desired = consumer_goods_monthly_use } #Amount needed per month

	add_to_variable = { PU_consumer_goods_desired = TNO_market_consumer_goods } #Market imports/exports
	divide_variable = { PU_consumer_goods_desired = 10 }

	set_temp_variable = { consumer_goods_production_modifier = 1 }
	add_to_temp_variable = { consumer_goods_production_modifier = modifier@consumer_goods_production_factor }
	clamp_temp_variable = { var = consumer_goods_production_modifier min = 0.1 }

	divide_variable = { PU_consumer_goods_desired = consumer_goods_production_modifier }
	round_variable = PU_consumer_goods_desired

	set_temp_variable = { production_units_temp = production_units }
	if = {
		limit = { check_variable = { resource@power < production_units } }
		set_temp_variable = { production_units_temp = resource@power }
	}
	subtract_from_temp_variable = { production_units_temp = PU_consumer_goods_desired }

	if = {
		limit = {
			has_war = no
			check_variable = { production_units_temp > 9 } #Because otherwise you will never actually finish it
			OR = {
				check_variable = { resource@power < production_units_temp }
				check_variable = { resource@power = production_units_temp }
			}
		}
		set_variable = { PU_civilian_factories_desired = production_units_temp }
		random_owned_controlled_state = {
			add_building_construction = {
				type = thermoelectric_plant
				level = 1
				instant_build = no
			}
		}
	}
	else_if = {
		limit = {
			check_variable = { production_units_temp < 30 }
			#AND = { #Use this to disable it for some tags
			#}
		}
		set_variable = { PU_military_factories_desired = production_units_temp }
	}
	else = {
		set_variable = { PU_military_factories_desired = production_units_temp }
		divide_variable = { PU_military_factories_desired = 2 }
		add_to_variable = { PU_military_factories_desired = 0.5 }
		round_variable = PU_military_factories_desired

		set_variable = { PU_civilian_factories_desired = production_units_temp }
		divide_variable = { PU_civilian_factories_desired = 2 }
		subtract_from_variable = { PU_civilian_factories_desired = 0.49 }
		round_variable = PU_civilian_factories_desired
	}
}


# Refreshes the GDP-based production unit base
update_prod_units_amnt = {
	set_variable = { production_units = totalstateGDP }
	# set_temp_variable = { temp_tsGDP = totalstateGDP }
	# clamp_temp_variable = { var = temp_tsGDP max = 5 }
	# add_to_variable = { production_units = temp_tsGDP }

	#log ="[?modifier@production_units_to_GDP_ratio_modifier] is production unit value for [THIS.GetTag]"

	set_variable = { production_units_multiplier = modifier@production_units_to_GDP_ratio_modifier }

	multiply_variable = { production_units = production_units_multiplier } # magic number
	add_to_variable = { production_units = 0.499 }
	round_variable = production_units
	set_variable = { production_units_gdp_raw = production_units }
	set_variable = { production_units_modifier = 0 }
	add_to_variable = { production_units_modifier = modifier@free_production_units_modifier }
	add_to_variable = { production_units_modifier = free_production_units }
	round_variable = production_units_modifier
	add_to_variable = { production_units = production_units_modifier }
	round_variable = production_units
	if = {
		# fix for antarctica sometimes showing ghost pus
		limit = { is_Antarctic_nation = yes }
		set_variable = { production_units = 0 }
	}
	set_variable = { production_units_raw = production_units }

	if = {
		limit = { is_ai = yes }
		else = {
			if = {
				limit = { check_variable = { last_months_production_units > production_units } }
				set_temp_variable = { alert_id = token:Alert_LostPU }
				add_TNO_alert_unless_exists = yes
			}
			else = {
				set_temp_variable = { alert_id = token:Alert_LostPU }
				remove_TNO_alert = yes
			}
		}
	}

	set_variable = { pu_to_gdp_ratio = production_units }
	divide_variable = { pu_to_gdp_ratio = totalstateGDP }

	update_prod_units_trade = yes
	set_variable = { last_months_production_units = production_units }
}


# Updates production units available
# Called when a bulk trade is performed or a monthly trade triggers at the start of each month
update_prod_units_trade = {
	set_variable = { production_units = production_units_raw }

	add_to_variable = { production_units = PU_exports }
	subtract_from_variable = { production_units = PU_imports }
	add_to_variable = { production_units = PU_exports_m }
	subtract_from_variable = { production_units = PU_imports_m }
	clamp_variable = { var = production_units min = 0 }

	set_variable = { PU_trade_balance = PU_exports }
	subtract_from_variable = { PU_trade_balance = PU_imports }
	add_to_variable = { PU_trade_balance = PU_exports_m }
	subtract_from_variable = { PU_trade_balance = PU_imports_m }

	update_market_recurring_trade = yes

	update_production_unit_allocation = yes

	calculate_navy_size_effect = yes

	calculate_fuel_consumption = yes
}


# Reallocates production units, taking away factories or granting new factories if need be
update_production_unit_allocation = {

	set_temp_variable = { consumer_goods_min = 0 }

	set_temp_variable = { civs_temp = PU_civilian_factories }
	set_temp_variable = { mils_temp = PU_military_factories }
	multiply_temp_variable = { civs_temp = -1 }
	multiply_temp_variable = { mils_temp = -1 }
	multiply_temp_variable = { mils_temp = mils_mult_old }

	add_offsite_building = { type = industrial_complex level = civs_temp }
	add_offsite_building = { type = arms_factory level = mils_temp }
	set_variable = { mils_mult_old = mils_mult }

	if = {
		limit = { is_ai = yes }
		auto_set_ai_pus = yes
	}

	set_temp_variable = { consumer_goods_min = consumer_goods_monthly_use } #Amount needed per month
	add_to_temp_variable = { consumer_goods_min = TNO_market_consumer_goods } #Market imports/exports
	divide_temp_variable = { consumer_goods_min = 10 }

	set_temp_variable = { consumer_goods_production_modifier = 1 }
	add_to_temp_variable = { consumer_goods_production_modifier = modifier@consumer_goods_production_factor }
	clamp_temp_variable = { var = consumer_goods_production_modifier min = 0.1 }

	divide_temp_variable = { consumer_goods_min = consumer_goods_production_modifier }
	round_temp_variable = consumer_goods_min

	clamp_variable = { var = PU_civilian_factories_desired min = 0 }
	clamp_variable = { var = PU_military_factories_desired min = 0 }
	set_variable = { PU_consumer_goods_desired = consumer_goods_min }

	clamp_variable = { var = PU_civilian_factories max = PU_civilian_factories_desired }
	clamp_variable = { var = PU_military_factories max = PU_military_factories_desired }
	clamp_variable = { var = PU_consumer_goods max = PU_consumer_goods_desired }

	set_temp_variable = { units_left = production_units }

	clamp_temp_variable = { var = units_left max = resource@power }
	subtract_from_temp_variable = { units_left = PU_civilian_factories }
	subtract_from_temp_variable = { units_left = PU_military_factories }
	subtract_from_temp_variable = { units_left = PU_consumer_goods }

	set_temp_variable = { civilian_factories_needed = PU_civilian_factories_desired }
	subtract_from_temp_variable = { civilian_factories_needed = PU_civilian_factories }

	set_temp_variable = { military_factories_needed = PU_military_factories_desired }
	subtract_from_temp_variable = { military_factories_needed = PU_military_factories }

	set_temp_variable = { consumer_goods_needed = PU_consumer_goods_desired }
	subtract_from_temp_variable = { consumer_goods_needed = PU_consumer_goods } #Consumer goods needed to meet the players goal
	subtract_from_temp_variable = { consumer_goods_min = PU_consumer_goods } #Amount needed to cover our minimum needs

	clamp_variable = { var = PU_civilian_factories min = 0 }
	clamp_variable = { var = PU_military_factories min = 0 }
	#log = "[GetDateText]: [Root.GetName]: PU_civilian_factories: [?PU_civilian_factories] PU_military_factories: [?PU_military_factories]"
	while_loop_effect = { #Ensure consumer goods are covered
		limit = { check_variable = { consumer_goods_min > 0 } }
		if = { #Allocate unused PUs
			limit = { check_variable = { units_left > 0 } }
			subtract_from_temp_variable = { units_left = 1 }
		}
		else_if = { #Something is broken somewhere, just add the var w/o taking any thing
			limit = {
				check_variable = { PU_civilian_factories = 0 }
				check_variable = { PU_military_factories = 0 }
			}
		}
		else = { #Steal from others
			random_list = {
				50 = {
					modifier = {
						factor = 0
						check_variable = { PU_civilian_factories = 0 }
					}
					subtract_from_variable = { PU_civilian_factories = 1 }
					add_to_temp_variable = { civilian_factories_needed = 1 }
				}
				50 = {
					modifier = {
						factor = 0
						check_variable = { PU_military_factories = 0 }
					}
					subtract_from_variable = { PU_military_factories = 1 }
					add_to_temp_variable = { military_factories_needed = 1 }
				}
			}
		}

		add_to_variable = { PU_consumer_goods = 1 }

		subtract_from_temp_variable = { consumer_goods_min = 1 } #Minimum obligation to cover our needs
		subtract_from_temp_variable = { consumer_goods_needed = 1 } #Excess desired
	}

	# Allocate unused factories
	while_loop_effect = {
		limit = {
			check_variable = { units_left > 0 }
			OR = {
				check_variable = { civilian_factories_needed > 0 }
				check_variable = { military_factories_needed > 0 }
				check_variable = { consumer_goods_needed > 0 }
			}
		}
		random_list = { # Prioritize categories with lowest % fulfillment
			var:civilian_factories_needed = {
				subtract_from_temp_variable = { civilian_factories_needed = 1 }
				add_to_variable = { PU_civilian_factories = 1 }
			}
			var:military_factories_needed = {
				subtract_from_temp_variable = { military_factories_needed = 1 }
				add_to_variable = { PU_military_factories = 1 }
			}
			var:consumer_goods_needed = {
				subtract_from_temp_variable = { consumer_goods_needed = 1 }
				add_to_variable = { PU_consumer_goods = 1 }
			}
		}
		subtract_from_temp_variable = { units_left = 1 }
	}

	# Remove unspent PU alert
	if = {
		limit = { is_ai = yes }
		else = {
			if = {
				limit = {
					OR = {
						check_variable = { units_left < 1 }
						is_Antarctic_nation = yes
					}
				}
				set_temp_variable = { alert_id = token:Alert_UnallocatedPU }
				remove_TNO_alert = yes
			}
			else = {
				set_temp_variable = { alert_id = token:Alert_UnallocatedPU }
				add_TNO_alert_unless_exists = yes
			}
		}
	}

	set_temp_variable = { to_remove = units_left }
	multiply_temp_variable = { to_remove = -1 }

	# Remove excess factories if overallocated
	while_loop_effect = {
		limit = {
			check_variable = { to_remove > 0 }
		}

		#set_temp_variable = { civ_ratio = PU_civilian_factories }
		#divide_temp_variable = { civ_ratio = PU_civilian_factories_desired }
		#set_temp_variable = { mil_ratio = PU_military_factories }
		#divide_temp_variable = { mil_ratio = PU_military_factories_desired }
		#set_temp_variable = { cg_ratio = PU_consumer_goods }
		#divide_temp_variable = { cg_ratio = PU_consumer_goods_desired }
		#
		#clamp_temp_variable = { var = civ_ratio min = 0 }
		#clamp_temp_variable = { var = mil_ratio min = 0 }
		#clamp_temp_variable = { var = cg_ratio min = 0 }
		#
		#if = { # This is so I don't get bombarded with 200 errors on startup
		#	limit = {
		#		check_variable = { civ_ratio = 0 }
		#		check_variable = { mil_ratio = 0 }
		#		check_variable = { cg_ratio = 0 }
		#	}
		#	set_temp_variable = { civ_ratio = 1 }
		#	set_temp_variable = { mil_ratio = 1 }
		#	set_temp_variable = { cg_ratio = 1 }
		#}
		#log = "[GetDateText]: [Root.GetName]: civ_ratio: [?civ_ratio] mil_ratio: [?mil_ratio] cg_ratio: [?cg_ratio]"

		# Tried to keep % fulfillment of desired factories the same (weight higher % fulfilled)
		# Breaks a lot after AAT (or was it breaking before and just not throwing errors?)
		# Now just uses flat 33% across the board, and stops removing after it hits 0
		# Marethyu here - made a small revision so that the code doesn't throw errors out while still achieving the same purpose
		# Rune here again - another revision, Mare's version left chance where it could try to remove all PUs w/o removing all PUs due to randomness
		if = {
			limit = {
				NOT = {
					AND = {
						check_variable = { PU_civilian_factories = 0 }
						check_variable = { PU_military_factories = 0 }
						check_variable = { PU_consumer_goods = 0 }
					}
				}
			}
			random_list = {
				33 = {
					modifier = {
						factor = 0
						check_variable = { PU_civilian_factories = 0 }
					}
					subtract_from_variable = { PU_civilian_factories = 1 }
				}
				33 = {
					modifier = {
						factor = 0
						check_variable = { PU_military_factories = 0 }
					}
					subtract_from_variable = { PU_military_factories = 1 }
				}
				33 = {
					modifier = {
						factor = 0
						check_variable = { PU_consumer_goods = 0 }
					}
					subtract_from_variable = { PU_consumer_goods = 1 }
				}
			}
		}
		subtract_from_temp_variable = { to_remove = 1 }
	}

	set_variable = { production_units_used = PU_civilian_factories }
	add_to_variable = { production_units_used = PU_military_factories }
	add_to_variable = { production_units_used = PU_consumer_goods }
	set_variable = { production_units_free = production_units }
	subtract_from_variable = { production_units_free = production_units_used }

	set_temp_variable = { mils_temp = PU_military_factories }
	multiply_temp_variable = { mils_temp = mils_mult }

	add_offsite_building = { type = industrial_complex level = PU_civilian_factories }
	add_offsite_building = { type = arms_factory level = mils_temp }

	set_temp_variable = { temp_fo = modifier@industrial_capacity_factory }
	subtract_from_temp_variable = { temp_fo = TNO_econ_mult_factory_output_penalty }
	add_to_temp_variable = { temp_fo = 1 }
	set_variable = { TNO_econ_mult_factory_output_penalty = temp_fo }
	divide_temp_variable = { temp_fo = mils_mult }
	subtract_from_variable = { TNO_econ_mult_factory_output_penalty = temp_fo }
	multiply_variable = { TNO_econ_mult_factory_output_penalty = -1 }

	set_variable = { PU_civ_steel_consumption = PU_civilian_factories }
	multiply_variable = { PU_civ_steel_consumption = modifier@steel_cost_civilian_factories }
	add_to_variable = { PU_civ_steel_consumption = PU_civilian_factories }

	set_temp_variable = { consumer_goods_production_modifier = 1 }
	add_to_temp_variable = { consumer_goods_production_modifier = modifier@consumer_goods_production_factor }

	clamp_variable = {
		var = consumer_goods_production_modifier
		min = 0
	}

	set_variable = { PU_base_consumer_goods_produced = PU_consumer_goods } #Just for tooltip's sake
	multiply_variable = { PU_base_consumer_goods_produced = 10 }

	set_variable = { PU_consumer_goods_production = PU_consumer_goods }
	multiply_variable = { PU_consumer_goods_production = consumer_goods_production_modifier }
	multiply_variable = { PU_consumer_goods_production = -10 }

	set_variable = { TNO_consumer_goods_resource_demand = PU_consumer_goods_production }
	set_variable = { TNO_consumer_goods_chromium_demand = TNO_consumer_goods_resource_demand }
	set_variable = { TNO_consumer_goods_tungsten_demand = TNO_consumer_goods_resource_demand }
	set_variable = { TNO_consumer_goods_steel_demand = TNO_consumer_goods_resource_demand }
	set_variable = { TNO_consumer_goods_rubber_demand = TNO_consumer_goods_resource_demand }
	set_variable = { TNO_consumer_goods_aluminium_demand = TNO_consumer_goods_resource_demand }

	divide_variable = { TNO_consumer_goods_chromium_demand = -10 }

	divide_variable = { TNO_consumer_goods_tungsten_demand = -10 }

	divide_variable = { TNO_consumer_goods_steel_demand = -10 }

	divide_variable = { TNO_consumer_goods_rubber_demand = -10 }

	divide_variable = { TNO_consumer_goods_aluminium_demand = -10 }

	if = {
		limit = { is_ai = no }
		update_economy_tab = yes
		add_to_variable = { TNO_production_gui_dirty = 1 }
	}
}

calculate_fuel_consumption = {
	set_variable = {
		economy_fuel_cost = gdp
	}
	set_temp_variable = {
		poverty_rate_decimal = poverty_rate
	}
	divide_temp_variable = {
		poverty_rate_decimal = 100
	}
	set_temp_variable = {
		fuel_cost_poverty_rate_factor = 1.5
	}
	subtract_from_temp_variable = {
		fuel_cost_poverty_rate_factor = poverty_rate_decimal
	}
	multiply_variable = {
		economy_fuel_cost = fuel_cost_poverty_rate_factor
	}
	calculate_industrial_equipment_fuel_cost_factor = yes
	calculate_agricultural_methods_fuel_cost_factor = yes

	multiply_variable = {
		economy_fuel_cost = industrial_equipment_fuel_cost_factor
	}
	multiply_variable = {
		economy_fuel_cost = agricultural_methods_fuel_cost_factor
	}
	### fuel consumption is calculated hourly, 24 hours in a day
	round_variable = economy_fuel_cost
}

calculate_industrial_equipment_fuel_cost_factor = {
	if = {
		limit = {
			has_idea = tno_industrial_equipment_hand_tools
		}
		set_variable = { industrial_equipment_fuel_cost_factor = 0 }
	}
	else_if = {
		limit = {
			has_idea = tno_industrial_equipment_power_tools
		}
		set_variable = { industrial_equipment_fuel_cost_factor = 0.25 }
	}
	else_if = {
		limit = {
			has_idea = tno_industrial_equipment_manufacturing_lines
		}
		set_variable = { industrial_equipment_fuel_cost_factor = 0.75 }
	}
	else_if = {
		limit = {
			has_idea = tno_industrial_equipment_factory_complexes
		}
		set_variable = { industrial_equipment_fuel_cost_factor = 1.0 }
	}
	else_if = {
		limit = {
			has_idea = tno_industrial_equipment_modern
		}
		set_variable = { industrial_equipment_fuel_cost_factor = 1.25 }
	}
	else_if = {
		limit = {
			has_idea = tno_industrial_equipment_cutting_edge
		}
		set_variable = { industrial_equipment_fuel_cost_factor = 1.5 }
	}
}

calculate_agricultural_methods_fuel_cost_factor = {
	if = {
		limit = {
			has_idea = tno_agriculture_subsistence
		}
		set_variable = { agricultural_methods_fuel_cost_factor = 0 }
	}
	else_if = {
		limit = {
			has_idea = tno_agriculture_centralized
		}
		set_variable = { agricultural_methods_fuel_cost_factor = 0.25 }
	}
	else_if = {
		limit = {
			has_idea = tno_agriculture_basic_mechanized
		}
		set_variable = { agricultural_methods_fuel_cost_factor = 0.75 }
	}
	else_if = {
		limit = {
			has_idea = tno_agriculture_mass_mechanized
		}
		set_variable = { agricultural_methods_fuel_cost_factor = 1 }
	}
	else_if = {
		limit = {
			has_idea = tno_agriculture_modern
		}
		set_variable = { agricultural_methods_fuel_cost_factor = 1.25 }
	}
}


###################################################################
###################################################################
## BUDGET - Trade Code, I use this to traverse VSC ################
###################################################################
###################################################################


calculate_total_income = {
	set_variable = { total_pop_m = 0 }
	set_variable = { total_core_pop_m = 0 }
	every_owned_state = {
		set_temp_variable = { spm = state_population_k }
		divide_temp_variable = { spm = 1000 }
		add_to_variable = { PREV.total_pop_m = spm }
		if = {
			limit = { is_core_of = OWNER }
			add_to_variable = { PREV.total_core_pop_m = spm }
		}
	}
	set_variable = { total_ncore_pop_m = total_pop_m }
	subtract_from_variable = { total_ncore_pop_m = total_core_pop_m }

	### Income Taxes
	calculate_taxable_population = yes
	set_variable = { non_poor_income_tax_revenue = non_poor_taxable_population }
	set_variable = { poor_income_tax_revenue = poverty_rate_taxable_population }

	set_variable = { income_tax_factor = income_tax_rate }
	add_to_variable = { income_tax_factor = modifier@income_tax_rate_modifier_factor }
	clamp_variable = { var = income_tax_factor min = 0 max = 1 }

	set_variable = { poverty_income_tax_factor = income_tax_factor }
	multiply_variable = { poverty_income_tax_factor = 0.5 }
	multiply_variable = { poverty_income_tax_factor = modifier@poverty_taxation_rate_modifier }

	multiply_variable = { non_poor_income_tax_revenue = income_tax_factor }
	multiply_variable = { non_poor_income_tax_revenue = gdp }
	multiply_variable = { poor_income_tax_revenue = poverty_income_tax_factor }
	multiply_variable = { poor_income_tax_revenue = gdp }

	set_variable = { income_tax_revenue = non_poor_income_tax_revenue }
	add_to_variable = { income_tax_revenue = poor_income_tax_revenue }

	### Business Taxes
	calculate_industrial_contribution = yes
	set_variable = { business_tax_display = business_tax_rate_total }
	multiply_variable = { business_tax_display = 100 }

	### Misc Income
	set_variable = { misc_income_true = modifier@misc_income_modifier }

	set_variable = { misc_income_percent_of_GDP = modifier@misc_income_percent_of_GDP_modifier }
	multiply_variable = { misc_income_percent_of_GDP = GDP }
	add_to_variable = { misc_income_true = misc_income_percent_of_GDP }

	### Excise Tax calculation

	set_temp_variable = { sales_tax = modifier@sales_tax_rate_modifier }
	add_to_temp_variable = { sales_tax = sales_tax_rate }
	clamp_temp_variable = { var = sales_tax min = 0 max = 1 }
	set_variable = { sales_tax_display = sales_tax }
	multiply_temp_variable = { sales_tax = GDP }
	set_variable = { sales_tax_total_income = sales_tax }

	set_temp_variable = { tariff_tax = modifier@tariff_tax_rate_modifier }
	set_variable = { tariff_tax_display = tariff_tax }
	multiply_temp_variable = { tariff_tax = imports_value }
	set_variable = { tariff_tax_total_income = tariff_tax }

	# War taxes, which are implemented as excise taxes
	set_temp_variable = { budget_calc = income_tax_revenue }
	add_to_temp_variable = { budget_calc = industrial_contribution }
	add_to_temp_variable = { budget_calc = sales_tax }
	add_to_temp_variable = { budget_calc = tariff_tax }
	add_to_temp_variable = { budget_calc = misc_income_true }
	divide_temp_variable = { budget_calc = gdp }

	set_temp_variable = { war_tax = 0.4 }
	add_to_temp_variable = { war_tax = budget_calc }
	divide_temp_variable = { war_tax = 2 }
	subtract_from_temp_variable = { war_tax = budget_calc }
	multiply_temp_variable = { war_tax = GDP }
	multiply_temp_variable = { war_tax = war_tax_enabled }
	clamp_temp_variable = { var = war_tax min = 0 }
	set_variable = { war_tax_total_income = war_tax }

	set_variable = { excise_income_true = sales_tax }
	add_to_variable = { excise_income_true = tariff_tax }
	add_to_variable = { excise_income_true = war_tax }

	### Total income calc
	set_temp_variable = { budget_calc = income_tax_revenue }
	add_to_temp_variable = { budget_calc = industrial_contribution }
	add_to_temp_variable = { budget_calc = excise_income_true }
	add_to_temp_variable = { budget_calc = misc_income_true }

	set_variable = { income_revenue_percent = income_tax_revenue }
	set_variable = { business_revenue_percent = industrial_contribution }
	set_variable = { excise_revenue_percent = excise_income_true }
	set_variable = { other_revenue_percent = misc_income_true }

	divide_variable = { income_revenue_percent = budget_calc }
	divide_variable = { business_revenue_percent = budget_calc }
	divide_variable = { excise_revenue_percent = budget_calc }
	divide_variable = { other_revenue_percent = budget_calc }

	multiply_variable = { income_revenue_percent = 100 }
	multiply_variable = { business_revenue_percent = 100 }
	multiply_variable = { excise_revenue_percent = 100 }
	multiply_variable = { other_revenue_percent = 100 }

	round_variable = income_revenue_percent
	round_variable = business_revenue_percent
	round_variable = excise_revenue_percent
	round_variable = other_revenue_percent

	set_temp_variable = { income_validator = income_revenue_percent }
	add_to_temp_variable = { income_validator = business_revenue_percent }
	add_to_temp_variable = { income_validator = excise_revenue_percent }
	add_to_temp_variable = { income_validator = other_revenue_percent }

	if = {
		limit = {
			NOT = {
				check_variable = { income_validator = 100 }
			}
		}
		subtract_from_temp_variable = { income_validator = 100 }
		subtract_from_variable = { income_revenue_percent = income_validator }
	}

	# subtract_from_temp_variable = { budget_calc = debt_calc }

	set_variable = { total_income = budget_calc }
	#log ="[THIS.GetTag] total income is [?total_income]"
}

calculate_debt_to_GDP_ratio = {
	# simple function to calculate debt to GDP ratio
	set_temp_variable = { temp_debt_to_GDP_ratio = national_debt }
	if = {
		limit = {
			NOT = {
				check_variable = { national_debt = 0 }
			}
		}
		divide_temp_variable = { temp_debt_to_GDP_ratio = GDP }
		set_variable = { debt_to_GDP_ratio = temp_debt_to_GDP_ratio }
	}
	else = {
		set_variable = { debt_to_GDP_ratio = 0 }
	}
	#For Guangdong
	if = {
		limit = {
			tag = GNG
		}
		GNG_calculate_fiscal_health = yes
	}
	# this returns debt as a % of GDP if debt exists. If debt does not exist, returns 0.
}

calculate_debt_effect_on_GDP_growth = {

	#uses \frac{\left(x-80\right)^{2}}{180}


	set_temp_variable = { temp_debt_effect = debt_to_GDP_ratio }
	multiply_temp_variable = { temp_debt_effect = 100 }

	subtract_from_temp_variable = { temp_debt_effect = 80 }

	set_temp_variable = { temp_debt_effect_squarer = temp_debt_effect }

	multiply_temp_variable = { temp_debt_effect = temp_debt_effect_squarer }
	divide_temp_variable = { temp_debt_effect = 180 }

	multiply_temp_variable = { temp_debt_effect = -1 } #convert to negative!
	if = {
		limit = {
			check_variable = { debt_to_GDP_ratio < 0.8 }
		}
		set_temp_variable = { temp_debt_effect = 0 }
	}
	clamp_temp_variable = { var = temp_debt_effect min = -800 max = 0 } # -8x modifier on GDP growth at worst
	divide_temp_variable = { temp_debt_effect = 100 }
	set_variable = { debt_effect_base_display = temp_debt_effect }

	set_variable = { debt_GDP_effect_multiplier = credit_rating_effect_on_debt_GDP_effect }
	add_to_variable = { debt_GDP_effect_multiplier = modifier@debt_effect_on_GDP_growth_modifier }
	add_to_variable = { debt_GDP_effect_multiplier = 1 }
	multiply_temp_variable = { temp_debt_effect = debt_GDP_effect_multiplier }

	set_variable = { debt_effect_on_nominal_growth = temp_debt_effect }
}

calculate_deficit_to_GDP_ratio = {
	# simple function to calculate deficit to GDP ratio
	set_temp_variable = { temp_deficit_to_GDP_ratio = deficit }
	multiply_temp_variable = { temp_deficit_to_GDP_ratio = 100 }
	if = {
		limit = {
			NOT = {
				check_variable = { deficit = 0 }
			}
		}

		divide_temp_variable = { temp_deficit_to_GDP_ratio = GDP }
	}
	multiply_temp_variable = { temp_deficit_to_GDP_ratio = -1 }

	set_variable = { deficit_to_GDP_ratio = temp_deficit_to_GDP_ratio }

	set_temp_variable = { temp_GDP_growth_inverted = GDP_growth_real }
	multiply_temp_variable = { temp_GDP_growth_inverted = -1 }
	set_variable = { GDP_growth_inverted = temp_GDP_growth_inverted }
}

calculate_deficit_effects_display = {

	#do the sqrt shit
	set_variable = { sr_arg_number = deficit_to_GDP_ratio }
	if = {
		limit = {
			check_variable = { sr_arg_number < 0 }
		}
		multiply_variable = { sr_arg_number = -1 }
	}
	square_root_babylonian = yes
	set_variable = { deficit_GDP_growth_effect = sr_ret_number }
	if = {
		limit = {
			check_variable = { deficit_to_GDP_ratio > 0 }
		}
		multiply_variable = { deficit_GDP_growth_effect = -1 }
	}

	multiply_variable = { deficit_GDP_growth_effect = 0.667 }

	set_temp_variable = { deficit_GDP_growth_multiplier = modifier@deficit_GDP_growth_modifier }
	add_to_temp_variable = { deficit_GDP_growth_multiplier = 1 }

	multiply_variable = { deficit_GDP_growth_effect = deficit_GDP_growth_multiplier }
	clamp_variable = { var = deficit_GDP_growth_effect min = 0 }


	set_variable = { deficit_PP_cost_display = deficit_to_GDP_ratio }

	set_temp_variable = { deficit_PP_cost_multiplier = modifier@deficit_pp_cost_modifier }
	add_to_temp_variable = { deficit_PP_cost_multiplier = 1 }

	multiply_variable = { deficit_PP_cost_display = deficit_PP_cost_multiplier }

	add_to_variable = { deficit_PP_cost_display = -1.5 }

	set_temp_variable = { deficit_PP_cost_display_cuber = deficit_PP_cost_display }
	multiply_variable = { deficit_PP_cost_display = deficit_PP_cost_display_cuber } #square it
	multiply_variable = { deficit_PP_cost_display = deficit_PP_cost_display_cuber } #cube it


	if = {
		limit = {
			check_variable = { deficit_pp_cost_display < 0 }
		}
		multiply_variable = { deficit_pp_cost_display = -1 }
	}

	set_temp_variable = { deficit_pp_cost_display_denominator = deficit_PP_cost_display }
	add_to_temp_variable = { deficit_pp_cost_display_denominator = 3000 }

	multiply_temp_variable = { deficit_pp_cost_display_denominator = deficit_pp_cost_multiplier }

	divide_variable = { deficit_PP_cost_display = deficit_PP_cost_display_denominator }

	multiply_variable = { deficit_PP_cost_display = 0.65 }

	if = {
		limit = {
			check_variable = { deficit_to_GDP_ratio > 0 }
		}
		multiply_variable = { deficit_PP_cost_display = -2 }
	}

	set_temp_variable = { deficit_cost_multiplicative_effect = 1 }
	add_to_temp_variable = { deficit_cost_multiplicative_effect = modifier@deficit_political_power_cost_modifier }
	clamp_temp_variable = { var = deficit_cost_multiplicative_effect min = 0 }
	multiply_variable = { deficit_PP_cost_display = deficit_cost_multiplicative_effect }
	clamp_variable = { var = deficit_PP_cost_display min = -0.1 }
}

apply_deficit_effects_monthly = {
	set_variable = { TNO_deficit_PP_cost = deficit_PP_cost_display }
}

calculate_deficit_to_debt_ratio = {
	set_temp_variable = { temp_deficit_to_debt_ratio = deficit }
	if = {
		limit = {
			NOT = {
				check_variable = { deficit = 0 }
			}
		}

		divide_temp_variable = { temp_deficit_to_debt_ratio = national_debt }
	}
	multiply_temp_variable = { temp_deficit_to_debt_ratio = -1 }
	set_variable = { deficit_to_debt_ratio = temp_deficit_to_debt_ratio }
	set_variable = { deficit_to_debt_ratio_in_hundred = deficit_to_debt_ratio }
	multiply_variable = { deficit_to_debt_ratio_in_hundred = 100 }
}

calculate_industrial_contribution = {

	set_variable = { industrial_contribution = CG_production_value }
	multiply_variable = { industrial_contribution = 0.9 }

	set_variable = { business_tax_rate_total = business_tax_rate }
	add_to_variable = { business_tax_rate_total = modifier@business_tax_rate_modifier }

	clamp_variable = { var = business_tax_rate_total min = 0 max = 1 }

	multiply_variable = { industrial_contribution = business_tax_rate_total }
	clamp_variable = { var = industrial_contribution min = 0 }
}

war_taxes_check = {
	if = {
		limit = { has_country_flag = war_taxes_enabled }
		set_variable = { war_tax_enabled = 1 }
		add_to_variable = { tno_draft_exemptions_effectiveness = -10 }
		#add_to_variable = { GDP_growth_nominal = -1.5 }
		add_war_support = -0.075
	}
	else_if = {
		limit = { NOT = { has_country_flag = war_taxes_enabled } }
		set_variable = { war_tax_enabled = 0 }
		add_to_variable = { tno_draft_exemptions_effectiveness = 10 }
		#add_to_variable = { GDP_growth_nominal = 1.5 }
		add_war_support = 0.075
	}
	TNO_update_policy_effectiveness = yes
	update_economy_tab = yes
}

calculate_taxable_population = {

	set_temp_variable = { poverty_rate_percent = poverty_rate }
	divide_temp_variable = { poverty_rate_percent = 100 } # a useful number thank god
	set_temp_variable = { inverse_poverty_rate_percent = 1 }
	subtract_from_temp_variable = { inverse_poverty_rate_percent = poverty_rate_percent }

	set_variable = { taxable_population = 0.60 } # set taxable population to 60%
	add_to_variable = { taxable_population = modifier@taxable_population_modifier } # How much of the population we can tax (additive) from social policies
	multiply_variable = { taxable_population = modifier@taxable_population_factor } # How much of the population we can tax administratively (multiplicative)

	set_variable = { poverty_rate_taxable_population = poverty_rate_percent }
	multiply_variable = { poverty_rate_taxable_population = taxable_population } # how much of the poor are eligible to be taxed with current tax laws

	set_variable = { non_poor_taxable_population = inverse_poverty_rate_percent }
	multiply_variable = { non_poor_taxable_population = taxable_population } # how much of the rich are eligible to be taxed with current tax laws
}

#Budget and expenditures are calculated as if they were ticked annually (and for display purposes), but are recalculated monthly with temp variables for the purposes of actual calculations

calculate_civilian_expenditures = { #Note = in billions
	calculate_social_expenditures = yes
	calculate_admin_expenditures = yes
	calculate_research_expenditures = yes

	set_variable = { civilian_expenditures = admin_costs }
	add_to_variable = { civilian_expenditures = research_costs }
	add_to_variable = { civilian_expenditures = total_sp_costs }

	calculate_civilian_misc_costs = yes
	add_to_variable = { civilian_expenditures = civilian_misc_costs_total }
	# Adds any extra fixed cost, uses a variable to store expenses coming from non-modifier sources
	multiply_variable = { civilian_expenditures = modifier@civilian_expenditures_factor } # Used by Civ Boost/Austerity ideas, applied on top of total civ spending
}

calculate_civilian_misc_costs = {
	set_variable = { civilian_misc_costs_total = modifier@civilian_annual_cost } # Adds any extra fixed cost stemming from odifiers (ideas, decisions etc etc)
	clamp_variable = { var = civilian_misc_costs_total min = 0 }
}

##Social

calculate_social_expenditures = {
	set_variable = { total_sp_costs = 0 }

	calculate_health_care_expenditures = yes
	calculate_education_expenditures = yes
	calculate_pensions_expenditures = yes
	calculate_unemployment_expenditures = yes
	calculate_social_costs_misc = yes

	set_variable = { other_program_cost_modified = modifier@tno_other_program_proportional_pop_cost }
	multiply_variable = { other_program_cost_modified = modifier@social_program_cost_factor }
	multiply_variable = { other_program_cost_modified = total_pop_m }

	set_variable = { sp_cost_slider_effect = econ_social_expenditures_slider_pct }
	multiply_variable = { sp_cost_slider_effect = 0.95 }
	add_to_variable = { sp_cost_slider_effect = 5 }
	divide_variable = { sp_cost_slider_effect = 100 }

	multiply_variable = { other_program_cost_modified = sp_cost_slider_effect }
	multiply_variable = { total_sp_costs = sp_cost_slider_effect }

	add_to_variable = { total_sp_costs = social_healthcare_costs }
	add_to_variable = { total_sp_costs = social_education_costs }
	add_to_variable = { total_sp_costs = social_pensions_costs }
	add_to_variable = { total_sp_costs = social_unemployment_costs }
	add_to_variable = { total_sp_costs = social_costs_misc_total }
	add_to_variable = { total_sp_costs = other_program_cost_modified }

	set_variable = { total_sp_costs_base = total_sp_costs }

}

calculate_social_costs_misc = {
	set_variable = { social_costs_misc_total = modifier@social_costs_misc } # Adds any extra fixed cost stemming from odifiers (ideas, decisions etc etc)
	clamp_variable = { var = social_costs_misc_total min = 0 }
}

calculate_health_care_expenditures = {
	set_variable = { social_healthcare_costs = tno_health_care_proportional_pop_cost }
	multiply_variable = { social_healthcare_costs = modifier@social_program_cost_factor }
	multiply_variable = { social_healthcare_costs = total_core_pop_m }

	set_variable = { healthcare_cost_slider_effect = econ_social_healthcare_slider_pct }
	multiply_variable = { healthcare_cost_slider_effect = 0.95 }
	add_to_variable = { healthcare_cost_slider_effect = 5 }
	divide_variable = { healthcare_cost_slider_effect = 100 }

	multiply_variable = { social_healthcare_costs = healthcare_cost_slider_effect }
}

calculate_education_expenditures = {
	set_variable = { social_education_costs = tno_education_proportional_pop_cost }
	multiply_variable = { social_education_costs = modifier@social_program_cost_factor }
	multiply_variable = { social_education_costs = total_core_pop_m }

	set_variable = { education_cost_slider_effect = econ_social_education_slider_pct }
	multiply_variable = { education_cost_slider_effect = 0.95 }
	add_to_variable = { education_cost_slider_effect = 5 }
	divide_variable = { education_cost_slider_effect = 100 }

	multiply_variable = { social_education_costs = education_cost_slider_effect }
}

calculate_pensions_expenditures = {
	set_variable = { social_pensions_costs = tno_pensions_proportional_pop_cost }
	multiply_variable = { social_pensions_costs = modifier@social_program_cost_factor }
	multiply_variable = { social_pensions_costs = total_core_pop_m }

	set_variable = { pensions_cost_slider_effect = econ_social_pensions_slider_pct }
	multiply_variable = { pensions_cost_slider_effect = 0.95 }
	add_to_variable = { pensions_cost_slider_effect = 5 }
	divide_variable = { pensions_cost_slider_effect = 100 }

	multiply_variable = { social_pensions_costs = pensions_cost_slider_effect }
}

calculate_unemployment_expenditures = {
	set_variable = { social_unemployment_costs = tno_unemployment_proportional_pop_cost }
	multiply_variable = { social_unemployment_costs = modifier@social_program_cost_factor }
	multiply_variable = { social_unemployment_costs = total_core_pop_m }

	set_variable = { unemployment_cost_slider_effect = econ_social_unemployment_slider_pct }
	multiply_variable = { unemployment_cost_slider_effect = 0.95 }
	add_to_variable = { unemployment_cost_slider_effect = 5 }
	divide_variable = { unemployment_cost_slider_effect = 100 }

	multiply_variable = { social_unemployment_costs = unemployment_cost_slider_effect }
}

##Admin

calculate_admin_expenditures = {
	set_variable = { basic_admin_costs = modifier@tno_admin_proportional_pop_cost }
	multiply_variable = { basic_admin_costs = modifier@admin_program_cost_factor }

	set_variable = { total_ap_costs = 0 }

	calculate_regulations_expenditures = yes
	calculate_security_expenditures = yes
	calculate_bureaucracy_expenditures = yes
	calculate_admin_costs_misc = yes

	set_variable = { adm_cost_slider_effect = econ_admin_expenditures_slider_pct }
	multiply_variable = { adm_cost_slider_effect = 0.8 }
	add_to_variable = { adm_cost_slider_effect = 20 }
	divide_variable = { adm_cost_slider_effect = 100 }

	multiply_variable = { basic_admin_costs = adm_cost_slider_effect }

	add_to_variable = { total_ap_costs = admin_regulations_costs }
	add_to_variable = { total_ap_costs = admin_pollution_costs }
	add_to_variable = { total_ap_costs = admin_security_costs }
	add_to_variable = { total_ap_costs = admin_bureaucracy_costs }
	add_to_variable = { total_ap_costs = admin_costs_misc_total }
	add_to_variable = { total_ap_costs = basic_admin_costs }

	set_variable = { admin_bureaucracy_costs_display = admin_bureaucracy_costs }
	add_to_variable = { admin_bureaucracy_costs_display = basic_admin_costs }

	set_variable = { admin_costs = total_ap_costs }
}

calculate_admin_costs_misc = {
	set_variable = { admin_costs_misc_total = modifier@admin_costs_misc } # Adds any extra fixed cost stemming from odifiers (ideas, decisions etc etc)
	clamp_variable = { var = admin_costs_misc_total min = 0 }
}

calculate_bureaucracy_expenditures = {
	set_variable = { admin_bureaucracy_costs = GDP }
	divide_variable = { admin_bureaucracy_costs = 100000 }
	multiply_variable = { admin_bureaucracy_costs = total_pop_m }

	set_variable = { bureaucracy_cost_slider_effect = econ_admin_bureaucracy_slider_pct }
	multiply_variable = { bureaucracy_cost_slider_effect = 0.8 }
	add_to_variable = { bureaucracy_cost_slider_effect = 20 }
	divide_variable = { bureaucracy_cost_slider_effect = 100 }

	multiply_variable = { admin_bureaucracy_costs = bureaucracy_cost_slider_effect }
}

calculate_security_expenditures = {
	set_variable = { admin_security_costs = tno_security_proportional_pop_cost }
	multiply_variable = { admin_security_costs = modifier@admin_program_cost_factor }
	multiply_variable = { admin_security_costs = total_pop_m }

	set_variable = { security_cost_slider_effect = econ_admin_security_slider_pct }
	multiply_variable = { security_cost_slider_effect = 0.8 }
	add_to_variable = { security_cost_slider_effect = 20 }
	divide_variable = { security_cost_slider_effect = 100 }

	multiply_variable = { admin_security_costs = security_cost_slider_effect }
}

calculate_regulations_expenditures = {
	set_variable = { admin_regulations_costs = tno_regulations_policy_cost }
	multiply_variable = { admin_regulations_costs = GDP }
	divide_variable = { admin_regulations_costs = 100 } # So that we never go out of limits

	set_variable = { regulations_cost_slider_effect = econ_admin_regulations_slider_pct }
	multiply_variable = { regulations_cost_slider_effect = 0.8 }
	add_to_variable = { regulations_cost_slider_effect = 20 }
	divide_variable = { regulations_cost_slider_effect = 100 }

	multiply_variable = { admin_regulations_costs = regulations_cost_slider_effect }
}

##Research

calculate_research_expenditures = {
	calculate_research_science_expenditures = yes
	calculate_research_facilities_expenditures = yes

	set_variable = { research_costs = research_science_costs }
	add_to_variable = { research_costs = research_facilities_costs }
}

calculate_research_science_expenditures = {
	set_variable = { research_science_costs = GDP }
	multiply_variable = { research_science_costs = 0.005 }

	multiply_variable = { research_science_costs = econ_research_science_slider_pct }
	divide_variable = { research_science_costs = 100 }

	multiply_variable = { research_science_costs = amount_research_slots }

	set_temp_variable = { research_cost_modifier_calc = 1 }
	add_to_temp_variable = { research_cost_modifier_calc = modifier@research_cost_modifier }
	multiply_variable = { research_science_costs = research_cost_modifier_calc }
}

calculate_research_facilities_expenditures = {
	set_variable = { research_facilities_costs = GDP }
	multiply_variable = { research_facilities_costs = 0.002 }

	multiply_variable = { research_facilities_costs = amount_research_slots }

	multiply_variable = { research_facilities_costs = econ_research_facilities_slider_pct }
	divide_variable = { research_facilities_costs = 100 }
}
calculate_funding_effects = {
	calculate_army_funding_effects = yes
	calculate_naval_funding_effects = yes
	calculate_social_funding_effects = yes
	calculate_research_funding_effects = yes
	calculate_admin_funding_effects = yes
	calculate_nuclear_funding_effects = yes
}

calculate_funding_effects_display = {
	calculate_army_funding_effects_display = yes
	calculate_naval_funding_effects_display = yes
	calculate_social_funding_effects_display = yes
	calculate_research_funding_effects_display = yes
	calculate_admin_funding_effects_display = yes
}

calculate_army_funding_effects_display = {
	calculate_army_maintenance_funding_effects_display = yes
	calculate_army_training_funding_effects_display = yes
	calculate_army_r_d_funding_effects_display = yes
	calculate_army_procurement_effects_display = yes
}

calculate_army_maintenance_funding_effects_display = {
	set_variable = { TNO_army_funding_policy_effect_display = econ_army_maintenance_slider_pct }
	divide_variable = { TNO_army_funding_policy_effect_display = 100 }

	set_variable = { TNO_army_funding_army_org_factor_display = 0 }
	add_to_variable = { TNO_army_funding_army_org_factor_display = econ_army_maintenance_slider_pct }
	divide_variable = { TNO_army_funding_army_org_factor_display = 325 }

	set_variable = { TNO_army_funding_army_morale_factor_display = 0 }
	add_to_variable = { TNO_army_funding_army_morale_factor_display = econ_army_maintenance_slider_pct }
	divide_variable = { TNO_army_funding_army_morale_factor_display = 250 }

	set_variable = { TNO_army_funding_war_support_factor_display = 0 }
	add_to_variable = { TNO_army_funding_war_support_factor_display = econ_army_maintenance_slider_pct }
	divide_variable = { TNO_army_funding_war_support_factor_display = 400 }

	set_variable = { TNO_army_funding_stability_factor_display = 0 }
	add_to_variable = { TNO_army_funding_stability_factor_display = econ_army_maintenance_slider_pct }
	divide_variable = { TNO_army_funding_stability_factor_display = 400 }

	set_variable = { TNO_army_funding_army_professionalism_change_display = 0 }
	add_to_variable = { TNO_army_funding_army_professionalism_change_display = econ_army_maintenance_slider_pct }
	divide_variable = { TNO_army_funding_army_professionalism_change_display = 500 }

	set_variable = { TNO_army_training_policy_effectiveness_effect_display = tno_training_effectiveness }
	multiply_variable = { TNO_army_training_policy_effectiveness_effect_display = TNO_army_funding_policy_effect_display }
	#subtract_from_variable = { TNO_army_training_policy_effectiveness_effect_display = tno_training_effectiveness }
	divide_variable = { TNO_army_training_policy_effectiveness_effect_display = 100 } # for display purposes.
}

calculate_army_training_funding_effects_display = {
	set_variable = { TNO_army_training_funding_terrain_effect_display = econ_army_logistics_slider_pct }
	divide_variable = { TNO_army_training_funding_terrain_effect_display = 500 }

	set_variable = { TNO_army_training_funding_upkeep_effect_display = econ_army_logistics_slider_pct }
	divide_variable = { TNO_army_training_funding_upkeep_effect_display = -500 }

	set_variable = { TNO_army_training_funding_supply_grace_effect_display = econ_army_logistics_slider_pct }
	divide_variable = { TNO_army_training_funding_supply_grace_effect_display = 5 }

	set_variable = { TNO_army_training_funding_supply_use_effect_display = econ_army_logistics_slider_pct }
	divide_variable = { TNO_army_training_funding_supply_use_effect_display = -500 }

	set_variable = { TNO_army_training_funding_org_loss_effect_display = econ_army_logistics_slider_pct }
	divide_variable = { TNO_army_training_funding_org_loss_effect_display = -500 }

	set_variable = { TNO_army_training_funding_air_range_effect_display = econ_army_logistics_slider_pct }
	divide_variable = { TNO_army_training_funding_air_range_effect_display = 500 }

	set_variable = { TNO_army_training_funding_no_supply_effect_display = econ_army_logistics_slider_pct }
	divide_variable = { TNO_army_training_funding_no_supply_effect_display = 500 }
	multiply_variable = { TNO_army_training_funding_no_supply_effect_display = -1 }

	set_variable = { TNO_army_training_funding_encircled_effect_display = econ_army_logistics_slider_pct }
	divide_variable = { TNO_army_training_funding_encircled_effect_display = 500 }
	multiply_variable = { TNO_army_training_funding_encircled_effect_display = -1 }
}

calculate_army_r_d_funding_effects_display = {
	set_variable = { army_idea_number = econ_army_r_d_slider_pct }
	round_variable = army_idea_number

	set_variable = { army_research_bonus_number_display = army_idea_number }
	divide_variable = { army_research_bonus_number_display = 5 }
	divide_variable = { army_research_bonus_number_display = 100 }

	set_variable = { TNO_army_funding_army_xp_display = 0 }
	add_to_variable = { TNO_army_funding_army_xp_display = econ_army_r_d_slider_pct }
	divide_variable = { TNO_army_funding_army_xp_display = 500 }

	set_variable = { TNO_army_funding_air_xp_display = 0 }
	add_to_variable = { TNO_army_funding_air_xp_display = econ_army_r_d_slider_pct }
	divide_variable = { TNO_army_funding_air_xp_display = 500 }

}

calculate_army_procurement_effects_display = {
	set_variable = { TNO_army_procurement_funding_effect_display = econ_army_procurement_slider_pct }
	subtract_from_variable = { TNO_army_procurement_funding_effect_display = 50 }
	divide_variable = { TNO_army_procurement_funding_effect_display = 100 }
}

calculate_naval_funding_effects_display = {

	set_variable = { naval_funding_effects_display = econ_naval_expenditures_slider_pct }
	divide_variable = { naval_funding_effects_display = 100 }

	set_variable = { naval_funding_other_effects_display = 0 }
	add_to_variable = { naval_funding_other_effects_display = econ_naval_expenditures_slider_pct }
	divide_variable = { naval_funding_other_effects_display = 500 }

	set_variable = { TNO_naval_funding_navy_xp_display = 0 }
	add_to_variable = { TNO_naval_funding_navy_xp_display = econ_naval_expenditures_slider_pct }
	divide_variable = { TNO_naval_funding_navy_xp_display = 500 }

	set_variable = { TNO_naval_funding_industrial_capacity_dockyard_display = 0 }
	add_to_variable = { TNO_naval_funding_industrial_capacity_dockyard_display = econ_naval_expenditures_slider_pct }
	divide_variable = { TNO_naval_funding_industrial_capacity_dockyard_display = 650 }

	set_variable = { TNO_naval_funding_naval_coordination_display = 0 }
	add_to_variable = { TNO_naval_funding_naval_coordination_display = econ_naval_expenditures_slider_pct }
	divide_variable = { TNO_naval_funding_naval_coordination_display = 500 }

	set_variable = { TNO_naval_funding_naval_speed_factor_display = 0 }
	add_to_variable = { TNO_naval_funding_naval_speed_factor_display = econ_naval_expenditures_slider_pct }
	divide_variable = { TNO_naval_funding_naval_speed_factor_display = 650 }

	set_variable = { TNO_naval_funding_navy_max_range_factor_display = 0 }
	add_to_variable = { TNO_naval_funding_navy_max_range_factor_display = econ_naval_expenditures_slider_pct }
	divide_variable = { TNO_naval_funding_navy_max_range_factor_display = 500 }

	set_variable = { TNO_naval_funding_spotting_chance_display = 0 }
	add_to_variable = { TNO_naval_funding_spotting_chance_display = econ_naval_expenditures_slider_pct }
	divide_variable = { TNO_naval_funding_spotting_chance_display = 650 }

	set_variable = { TNO_naval_funding_war_support_factor_display = 0 }
	add_to_variable = { TNO_naval_funding_war_support_factor_display = econ_naval_expenditures_slider_pct }
	divide_variable = { TNO_naval_funding_war_support_factor_display = 800 }

	set_variable = { TNO_naval_funding_stability_factor_display = 0 }
	add_to_variable = { TNO_naval_funding_stability_factor_display = econ_naval_expenditures_slider_pct }
	divide_variable = { TNO_naval_funding_stability_factor_display = 800 }
}

calculate_social_funding_effects_display = {

	set_variable = { TNO_social_funding_policy_effect_display = econ_social_expenditures_slider_pct }
	divide_variable = { TNO_social_funding_policy_effect_display = 100 }

	calculate_social_healthcare_funding_effects_display = yes

	calculate_social_education_funding_effects_display = yes

	calculate_social_pensions_funding_effects_display = yes

	calculate_social_unemployment_funding_effects_display = yes
}

calculate_social_healthcare_funding_effects_display = {
	set_variable = { TNO_health_care_funding_effect_display = econ_social_healthcare_slider_pct }
	divide_variable = { TNO_health_care_funding_effect_display = 100 }

	set_variable = { TNO_health_care_funding_effectiveness_display = tno_health_care_effectiveness }
	multiply_variable = { TNO_health_care_funding_effectiveness_display = TNO_health_care_funding_effect_display }
	divide_variable = { TNO_health_care_funding_effectiveness_display = 100 }
}

calculate_social_education_funding_effects_display = {
	set_variable = { TNO_education_funding_effect_display = econ_social_education_slider_pct }
	divide_variable = { TNO_education_funding_effect_display = 100 }

	set_variable = { TNO_education_funding_effectiveness_display = tno_education_effectiveness }
	multiply_variable = { TNO_education_funding_effectiveness_display = TNO_education_funding_effect_display }
	divide_variable = { TNO_education_funding_effectiveness_display = 100 }
}

calculate_social_pensions_funding_effects_display = {
	set_variable = { TNO_pensions_funding_effect_display = econ_social_pensions_slider_pct }
	divide_variable = { TNO_pensions_funding_effect_display = 100 }

	set_variable = { TNO_pensions_funding_effectiveness_display = tno_pensions_effectiveness }
	multiply_variable = { TNO_pensions_funding_effectiveness_display = TNO_pensions_funding_effect_display }
	divide_variable = { TNO_pensions_funding_effectiveness_display = 100 }
}

calculate_social_unemployment_funding_effects_display = {
	set_variable = { TNO_unemployment_funding_effect_display = econ_social_unemployment_slider_pct }
	divide_variable = { TNO_unemployment_funding_effect_display = 100 }
	clamp_variable = { var = TNO_unemployment_funding_effect_display min = 0 max = 1 }

	set_variable = { TNO_unemployment_funding_effectiveness_display = tno_unemployment_effectiveness }
	multiply_variable = { TNO_unemployment_funding_effectiveness_display = TNO_unemployment_funding_effect_display }
	divide_variable = { TNO_unemployment_funding_effectiveness_display = 100 }
}

calculate_admin_funding_effects_display = {

	set_variable = { TNO_admin_funding_policy_effect_display = econ_admin_expenditures_slider_pct }
	divide_variable = { TNO_admin_funding_policy_effect_display = 100 }

	calculate_admin_bureaucracy_funding_effects_display = yes

	calculate_admin_security_funding_effects_display = yes

	calculate_admin_regulations_funding_effects_display = yes

}

calculate_admin_security_funding_effects_display = {
	set_variable = { TNO_security_funding_effect_display = econ_admin_security_slider_pct }
	divide_variable = { TNO_security_funding_effect_display = 100 }

	set_variable = { TNO_security_funding_effectiveness_display = tno_security_effectiveness }
	multiply_variable = { TNO_security_funding_effectiveness_display = TNO_security_funding_effect_display }
	divide_variable = { TNO_security_funding_effectiveness_display = 100 }
}

calculate_admin_regulations_funding_effects_display = {
	set_variable = { TNO_regulations_funding_effect_display = econ_admin_regulations_slider_pct }
	divide_variable = { TNO_regulations_funding_effect_display = 100 }

	set_variable = { TNO_regulations_funding_effectiveness_display = tno_regulations_effectiveness }
	multiply_variable = { TNO_regulations_funding_effectiveness_display = TNO_regulations_funding_effect_display }
	divide_variable = { TNO_regulations_funding_effectiveness_display = 100 }
}

calculate_admin_bureaucracy_funding_effects_display = {
	set_variable = { TNO_admin_funding_bureaucracy_effect = econ_admin_bureaucracy_slider_pct }
	divide_variable = { TNO_admin_funding_bureaucracy_effect = 100 }

	set_variable = { TNO_admin_funding_taxable_population_factor_display = 0 }
	add_to_variable = { TNO_admin_funding_taxable_population_factor_display = econ_admin_bureaucracy_slider_pct }
	divide_variable = { TNO_admin_funding_taxable_population_factor_display = 600 }

	set_variable = { TNO_admin_funding_stability_factor_display = 0 }
	add_to_variable = { TNO_admin_funding_stability_factor_display = econ_admin_bureaucracy_slider_pct }
	divide_variable = { TNO_admin_funding_stability_factor_display = 400 }

}

calculate_research_funding_effects_display = {
	calculate_research_science_funding_effects_display = yes
	calculate_research_facilities_funding_effects_display = yes
}

calculate_research_science_funding_effects_display = {
	set_variable = { TNO_research_funding_research_speed_factor_display = econ_research_science_slider_pct }
	divide_variable = { TNO_research_funding_research_speed_factor_display = 500 }
}

calculate_research_facilities_funding_effects_display = {
	set_variable = { TNO_research_funding_facilities_effect_display = econ_research_facilities_slider_pct }
	divide_variable = { TNO_research_funding_facilities_effect_display = 33.333 }
}

# Actual initialization of these is done in on_startup_actions
reset_econ_sliders = {
	set_variable = { econ_army_expenditures_slider_pct = 50 }
	set_variable = { econ_naval_expenditures_slider_pct = 50 }
	set_variable = { econ_research_expenditures_slider_pct = 50 }
	set_variable = { econ_social_expenditures_slider_pct = 50 }
	set_variable = { econ_admin_expenditures_slider_pct = 50 }
	set_variable = { econ_nuclear_expenditures_slider_pct = 50 }

	set_variable = { econ_army_expenditures_minimal_pct = 25 }
	set_variable = { econ_army_expenditures_maximal_pct = 75 }

	set_variable = { econ_naval_expenditures_minimal_pct = 25 }
	set_variable = { econ_naval_expenditures_maximal_pct = 75 }

	set_variable = { econ_nuclear_expenditures_minimal_pct = 25 }
	set_variable = { econ_nuclear_expenditures_maximal_pct = 75 }

	set_variable = { econ_research_expenditures_minimal_pct = 25 }
	set_variable = { econ_research_expenditures_maximal_pct = 75 }

	set_variable = { econ_social_expenditures_minimal_pct = 25 }
	set_variable = { econ_social_expenditures_maximal_pct = 75 }

	set_variable = { econ_admin_expenditures_minimal_pct = 25 }
	set_variable = { econ_admin_expenditures_maximal_pct = 75 }

	set_variable = { econ_deficit_monetization_minimal_pct = 0 }
	set_variable = { econ_deficit_monetization_maximal_pct = 100 }
	set_variable = { econ_deficit_monetization_slider_pct = 0 }

	update_economy_tab = yes
}

update_econ_sliders = {

	# Deficit Monetization
	clamp_variable = { var = econ_deficit_monetization_minimal_pct min = 0 max = 100 }
	clamp_variable = { var = econ_deficit_monetization_maximal_pct min = 0 max = 100 }
	clamp_variable = { var = econ_deficit_monetization_slider_pct min = econ_deficit_monetization_minimal_pct max = econ_deficit_monetization_maximal_pct }

	set_variable = { econ_deficit_monetization_slider_dot_x = econ_deficit_monetization_slider_pct }
	multiply_variable = { econ_deficit_monetization_slider_dot_x = 1.88 }
	add_to_variable = { econ_deficit_monetization_slider_dot_x = 45 }
	set_variable = { econ_deficit_monetization_minimal_x = econ_deficit_monetization_minimal_pct }
	multiply_variable = { econ_deficit_monetization_minimal_x = 1.88 }
	add_to_variable = { econ_deficit_monetization_minimal_x = 45 }
	set_variable = { econ_deficit_monetization_maximal_x = econ_deficit_monetization_maximal_pct }
	multiply_variable = { econ_deficit_monetization_maximal_x = 1.88 }
	add_to_variable = { econ_deficit_monetization_maximal_x = 42 }



	clamp_variable = { var = econ_army_expenditures_minimal_pct min = 0 max = 100 }
	clamp_variable = { var = econ_army_expenditures_maximal_pct min = 0 max = 100 }
	clamp_variable = { var = econ_naval_expenditures_minimal_pct min = 0 max = 100 }
	clamp_variable = { var = econ_naval_expenditures_maximal_pct min = 0 max = 100 }
	clamp_variable = { var = econ_nuclear_expenditures_minimal_pct min = 0 max = 100 }
	clamp_variable = { var = econ_nuclear_expenditures_maximal_pct min = 0 max = 100 }
	clamp_variable = { var = econ_social_expenditures_minimal_pct min = 0 max = 100 }
	clamp_variable = { var = econ_social_expenditures_maximal_pct min = 0 max = 100 }
	clamp_variable = { var = econ_research_expenditures_minimal_pct min = 0 max = 100 }
	clamp_variable = { var = econ_research_expenditures_maximal_pct min = 0 max = 100 }
	clamp_variable = { var = econ_admin_expenditures_minimal_pct min = 0 max = 100 }
	clamp_variable = { var = econ_admin_expenditures_maximal_pct min = 0 max = 100 }


	clamp_variable = { var = econ_army_maintenance_minimal_pct min = 0 max = 100 }
	clamp_variable = { var = econ_army_R_D_minimal_pct min = 0 max = 100 }
	clamp_variable = { var = econ_army_logistics_minimal_pct min = 0 max = 100 }
	clamp_variable = { var = econ_army_procurement_minimal_pct min = 0 max = 100 }

	clamp_variable = { var = econ_social_healthcare_minimal_pct min = 0 max = 100 }
	clamp_variable = { var = econ_social_pensions_minimal_pct min = 0 max = 100 }
	clamp_variable = { var = econ_social_education_minimal_pct min = 0 max = 100 }
	clamp_variable = { var = econ_social_unemployment_minimal_pct min = 0 max = 100 }

	clamp_variable = { var = econ_admin_security_minimal_pct min = 0 max = 100 }
	clamp_variable = { var = econ_admin_regulations_minimal_pct min = 0 max = 100 }
	clamp_variable = { var = econ_admin_pollution_minimal_pct min = 0 max = 100 }
	clamp_variable = { var = econ_admin_bureaucracy_minimal_pct min = 0 max = 100 }

	clamp_variable = { var = econ_research_science_minimal_pct min = 0 max = 100 }
	clamp_variable = { var = econ_research_facilities_minimal_pct min = 0 max = 100 }

	clamp_variable = { var = econ_army_maintenance_maximal_pct min = 0 max = 100 }
	clamp_variable = { var = econ_army_R_D_maximal_pct min = 0 max = 100 }
	clamp_variable = { var = econ_army_logistics_maximal_pct min = 0 max = 100 }
	clamp_variable = { var = econ_army_procurement_maximal_pct min = 0 max = 100 }

	clamp_variable = { var = econ_social_healthcare_maximal_pct min = 0 max = 100 }
	clamp_variable = { var = econ_social_pensions_maximal_pct min = 0 max = 100 }
	clamp_variable = { var = econ_social_education_maximal_pct min = 0 max = 100 }
	clamp_variable = { var = econ_social_unemployment_maximal_pct min = 0 max = 100 }

	clamp_variable = { var = econ_admin_security_maximal_pct min = 0 max = 100 }
	clamp_variable = { var = econ_admin_regulations_maximal_pct min = 0 max = 100 }
	clamp_variable = { var = econ_admin_pollution_maximal_pct min = 0 max = 100 }
	clamp_variable = { var = econ_admin_bureaucracy_maximal_pct min = 0 max = 100 }

	clamp_variable = { var = econ_research_science_maximal_pct min = 0 max = 100 }
	clamp_variable = { var = econ_research_facilities_maximal_pct min = 0 max = 100 }

	# Army
	clamp_variable = { var = econ_army_expenditures_slider_pct min = econ_army_expenditures_minimal_pct max = econ_army_expenditures_maximal_pct }

	set_variable = { econ_army_expenditures_slider_dot_x = econ_army_expenditures_slider_pct }
	multiply_variable = { econ_army_expenditures_slider_dot_x = 1.88 }
	add_to_variable = { econ_army_expenditures_slider_dot_x = 45 }
	set_variable = { econ_army_expenditures_minimal_x = econ_army_expenditures_minimal_pct }
	multiply_variable = { econ_army_expenditures_minimal_x = 1.88 }
	add_to_variable = { econ_army_expenditures_minimal_x = 45 }
	set_variable = { econ_army_expenditures_maximal_x = econ_army_expenditures_maximal_pct }
	multiply_variable = { econ_army_expenditures_maximal_x = 1.88 }
	add_to_variable = { econ_army_expenditures_maximal_x = 42 }

	set_variable = { econ_army_expenditures_slider_value = econ_army_expenditures_slider_pct }
	divide_variable = { econ_army_expenditures_slider_value = 5 }

	# Naval
	clamp_variable = { var = econ_naval_expenditures_slider_pct min = econ_naval_expenditures_minimal_pct max = econ_naval_expenditures_maximal_pct }

	set_variable = { econ_naval_expenditures_slider_dot_x = econ_naval_expenditures_slider_pct }
	multiply_variable = { econ_naval_expenditures_slider_dot_x = 1.88 }
	add_to_variable = { econ_naval_expenditures_slider_dot_x = 45 }
	set_variable = { econ_naval_expenditures_minimal_x = econ_naval_expenditures_minimal_pct }
	multiply_variable = { econ_naval_expenditures_minimal_x = 1.88 }
	add_to_variable = { econ_naval_expenditures_minimal_x = 45 }
	set_variable = { econ_naval_expenditures_maximal_x = econ_naval_expenditures_maximal_pct }
	multiply_variable = { econ_naval_expenditures_maximal_x = 1.88 }
	add_to_variable = { econ_naval_expenditures_maximal_x = 42 }

	set_variable = { econ_naval_expenditures_slider_value = econ_naval_expenditures_slider_pct }
	divide_variable = { econ_naval_expenditures_slider_value = 5 }

	# Nuclear (econ_nuclear_expenditures_slider_value ranges from -10 to 10 instead of 0 to 20, why I have no idea)
	clamp_variable = { var = econ_nuclear_expenditures_slider_pct min = econ_nuclear_expenditures_minimal_pct max = econ_nuclear_expenditures_maximal_pct }

	set_variable = { econ_nuclear_expenditures_slider_dot_x = econ_nuclear_expenditures_slider_pct }
	multiply_variable = { econ_nuclear_expenditures_slider_dot_x = 1.88 }
	add_to_variable = { econ_nuclear_expenditures_slider_dot_x = 45 }
	set_variable = { econ_nuclear_expenditures_minimal_x = econ_nuclear_expenditures_minimal_pct }
	multiply_variable = { econ_nuclear_expenditures_minimal_x = 1.88 }
	add_to_variable = { econ_nuclear_expenditures_minimal_x = 45 }
	set_variable = { econ_nuclear_expenditures_maximal_x = econ_nuclear_expenditures_maximal_pct }
	multiply_variable = { econ_nuclear_expenditures_maximal_x = 1.88 }
	add_to_variable = { econ_nuclear_expenditures_maximal_x = 42 }

	set_variable = { econ_nuclear_expenditures_slider_value = econ_nuclear_expenditures_slider_pct }
	divide_variable = { econ_nuclear_expenditures_slider_value = 5 }
	subtract_from_variable = { econ_nuclear_expenditures_slider_value = 10 }


	# Social
	clamp_variable = { var = econ_social_expenditures_slider_pct min = econ_social_expenditures_minimal_pct max = econ_social_expenditures_maximal_pct }

	set_variable = { econ_social_expenditures_slider_dot_x = econ_social_expenditures_slider_pct }
	multiply_variable = { econ_social_expenditures_slider_dot_x = 1.88 }
	add_to_variable = { econ_social_expenditures_slider_dot_x = 45 }
	set_variable = { econ_social_expenditures_minimal_x = econ_social_expenditures_minimal_pct }
	multiply_variable = { econ_social_expenditures_minimal_x = 1.88 }
	add_to_variable = { econ_social_expenditures_minimal_x = 45 }
	set_variable = { econ_social_expenditures_maximal_x = econ_social_expenditures_maximal_pct }
	multiply_variable = { econ_social_expenditures_maximal_x = 1.88 }
	add_to_variable = { econ_social_expenditures_maximal_x = 42 }

	set_variable = { econ_social_expenditures_slider_value = econ_social_expenditures_slider_pct }
	divide_variable = { econ_social_expenditures_slider_value = 5 }

	# Admin
	clamp_variable = { var = econ_admin_expenditures_slider_pct min = econ_admin_expenditures_minimal_pct max = econ_admin_expenditures_maximal_pct }

	set_variable = { econ_admin_expenditures_slider_dot_x = econ_admin_expenditures_slider_pct }
	multiply_variable = { econ_admin_expenditures_slider_dot_x = 1.88 }
	add_to_variable = { econ_admin_expenditures_slider_dot_x = 45 }
	set_variable = { econ_admin_expenditures_minimal_x = econ_admin_expenditures_minimal_pct }
	multiply_variable = { econ_admin_expenditures_minimal_x = 1.88 }
	add_to_variable = { econ_admin_expenditures_minimal_x = 45 }
	set_variable = { econ_admin_expenditures_maximal_x = econ_admin_expenditures_maximal_pct }
	multiply_variable = { econ_admin_expenditures_maximal_x = 1.88 }
	add_to_variable = { econ_admin_expenditures_maximal_x = 42 }

	# Research
	clamp_variable = { var = econ_research_expenditures_slider_pct min = econ_research_expenditures_minimal_pct max = econ_research_expenditures_maximal_pct }

	set_variable = { econ_research_expenditures_slider_dot_x = econ_research_expenditures_slider_pct }
	multiply_variable = { econ_research_expenditures_slider_dot_x = 1.88 }
	add_to_variable = { econ_research_expenditures_slider_dot_x = 45 }
	set_variable = { econ_research_expenditures_minimal_x = econ_research_expenditures_minimal_pct }
	multiply_variable = { econ_research_expenditures_minimal_x = 1.88 }
	add_to_variable = { econ_research_expenditures_minimal_x = 45 }
	set_variable = { econ_research_expenditures_maximal_x = econ_research_expenditures_maximal_pct }
	multiply_variable = { econ_research_expenditures_maximal_x = 1.88 }
	add_to_variable = { econ_research_expenditures_maximal_x = 42 }


	########## Army maintenance (uses base values from army funding)
	set_variable = { econ_army_maintenance_minimal_pct = econ_army_expenditures_minimal_pct }
	set_variable = { econ_army_maintenance_maximal_pct = econ_army_expenditures_maximal_pct }

	clamp_variable = { var = econ_army_maintenance_slider_pct min = econ_army_maintenance_minimal_pct max = econ_army_maintenance_maximal_pct }

	set_variable = { econ_army_maintenance_slider_dot_x = econ_army_maintenance_slider_pct }
	multiply_variable = { econ_army_maintenance_slider_dot_x = 1.88 }
	add_to_variable = { econ_army_maintenance_slider_dot_x = 45 }
	set_variable = { econ_army_maintenance_minimal_x = econ_army_maintenance_minimal_pct }
	multiply_variable = { econ_army_maintenance_minimal_x = 1.88 }
	add_to_variable = { econ_army_maintenance_minimal_x = 45 }
	set_variable = { econ_army_maintenance_maximal_x = econ_army_maintenance_maximal_pct }
	multiply_variable = { econ_army_maintenance_maximal_x = 1.88 }
	add_to_variable = { econ_army_maintenance_maximal_x = 42 }

	set_variable = { econ_army_maintenance_slider_value = econ_army_maintenance_slider_pct }
	divide_variable = { econ_army_maintenance_slider_value = 5 }


	########## Army R&D (uses base minmax from army funding)

	set_variable = { econ_army_R_D_minimal_pct = econ_army_expenditures_minimal_pct }
	set_variable = { econ_army_R_D_maximal_pct = econ_army_expenditures_maximal_pct }

	clamp_variable = { var = econ_army_R_D_slider_pct min = econ_army_R_D_minimal_pct max = econ_army_R_D_maximal_pct }

	set_variable = { econ_army_R_D_slider_dot_x = econ_army_R_D_slider_pct }
	multiply_variable = { econ_army_R_D_slider_dot_x = 1.88 }
	add_to_variable = { econ_army_R_D_slider_dot_x = 45 }
	set_variable = { econ_army_R_D_minimal_x = econ_army_R_D_minimal_pct }
	multiply_variable = { econ_army_R_D_minimal_x = 1.88 }
	add_to_variable = { econ_army_R_D_minimal_x = 45 }
	set_variable = { econ_army_R_D_maximal_x = econ_army_R_D_maximal_pct }
	multiply_variable = { econ_army_R_D_maximal_x = 1.88 }
	add_to_variable = { econ_army_R_D_maximal_x = 42 }

	set_variable = { econ_army_R_D_slider_value = econ_army_R_D_slider_pct }
	divide_variable = { econ_army_R_D_slider_value = 5 }


	########## Army training (uses base minmax from army funding

	set_variable = { econ_army_logistics_minimal_pct = econ_army_expenditures_minimal_pct }
	set_variable = { econ_army_logistics_maximal_pct = econ_army_expenditures_maximal_pct }

	clamp_variable = { var = econ_army_logistics_slider_pct min = econ_army_logistics_minimal_pct max = econ_army_logistics_maximal_pct }

	set_variable = { econ_army_logistics_slider_dot_x = econ_army_logistics_slider_pct }
	multiply_variable = { econ_army_logistics_slider_dot_x = 1.88 }
	add_to_variable = { econ_army_logistics_slider_dot_x = 45 }
	set_variable = { econ_army_logistics_minimal_x = econ_army_logistics_minimal_pct }
	multiply_variable = { econ_army_logistics_minimal_x = 1.88 }
	add_to_variable = { econ_army_logistics_minimal_x = 45 }
	set_variable = { econ_army_logistics_maximal_x = econ_army_logistics_maximal_pct }
	multiply_variable = { econ_army_logistics_maximal_x = 1.88 }
	add_to_variable = { econ_army_logistics_maximal_x = 42 }

	set_variable = { econ_army_logistics_slider_value = econ_army_logistics_slider_pct }
	divide_variable = { econ_army_logistics_slider_value = 5 }


	########## Supervision (actually Procurement)

	set_variable = { econ_army_procurement_minimal_pct = econ_army_expenditures_minimal_pct }
	set_variable = { econ_army_procurement_maximal_pct = econ_army_expenditures_maximal_pct }

	clamp_variable = { var = econ_army_procurement_slider_pct min = econ_army_procurement_minimal_pct max = econ_army_procurement_maximal_pct }

	set_variable = { econ_army_procurement_slider_dot_x = econ_army_procurement_slider_pct }
	multiply_variable = { econ_army_procurement_slider_dot_x = 1.88 }
	add_to_variable = { econ_army_procurement_slider_dot_x = 45 }
	set_variable = { econ_army_procurement_minimal_x = econ_army_procurement_minimal_pct }
	multiply_variable = { econ_army_procurement_minimal_x = 1.88 }
	add_to_variable = { econ_army_procurement_minimal_x = 45 }
	set_variable = { econ_army_procurement_maximal_x = econ_army_procurement_maximal_pct }
	multiply_variable = { econ_army_procurement_maximal_x = 1.88 }
	add_to_variable = { econ_army_procurement_maximal_x = 42 }

	set_variable = { econ_army_procurement_slider_value = econ_army_procurement_slider_pct }
	divide_variable = { econ_army_procurement_slider_value = 5 }


	########## Healthcare crap

	set_variable = { econ_social_healthcare_minimal_pct = econ_social_expenditures_minimal_pct }
	set_variable = { econ_social_healthcare_maximal_pct = econ_social_expenditures_maximal_pct }

	clamp_variable = { var = econ_social_healthcare_slider_pct min = econ_social_healthcare_minimal_pct max = econ_social_healthcare_maximal_pct }

	set_variable = { econ_social_healthcare_slider_dot_x = econ_social_healthcare_slider_pct }
	multiply_variable = { econ_social_healthcare_slider_dot_x = 1.88 }
	add_to_variable = { econ_social_healthcare_slider_dot_x = 45 }
	set_variable = { econ_social_healthcare_minimal_x = econ_social_healthcare_minimal_pct }
	multiply_variable = { econ_social_healthcare_minimal_x = 1.88 }
	add_to_variable = { econ_social_healthcare_minimal_x = 45 }
	set_variable = { econ_social_healthcare_maximal_x = econ_social_healthcare_maximal_pct }
	multiply_variable = { econ_social_healthcare_maximal_x = 1.88 }
	add_to_variable = { econ_social_healthcare_maximal_x = 42 }

	set_variable = { econ_social_healthcare_slider_value = econ_social_healthcare_slider_pct }
	divide_variable = { econ_social_healthcare_slider_value = 5 }


	########## Pensions crap
	set_variable = { econ_social_pensions_minimal_pct = econ_social_expenditures_minimal_pct }
	set_variable = { econ_social_pensions_maximal_pct = econ_social_expenditures_maximal_pct }

	clamp_variable = { var = econ_social_pensions_slider_pct min = econ_social_pensions_minimal_pct max = econ_social_pensions_maximal_pct }

	set_variable = { econ_social_pensions_slider_dot_x = econ_social_pensions_slider_pct }
	multiply_variable = { econ_social_pensions_slider_dot_x = 1.88 }
	add_to_variable = { econ_social_pensions_slider_dot_x = 45 }
	set_variable = { econ_social_pensions_minimal_x = econ_social_pensions_minimal_pct }
	multiply_variable = { econ_social_pensions_minimal_x = 1.88 }
	add_to_variable = { econ_social_pensions_minimal_x = 45 }
	set_variable = { econ_social_pensions_maximal_x = econ_social_pensions_maximal_pct }
	multiply_variable = { econ_social_pensions_maximal_x = 1.88 }
	add_to_variable = { econ_social_pensions_maximal_x = 42 }

	set_variable = { econ_social_pensions_slider_value = econ_social_pensions_slider_pct }
	divide_variable = { econ_social_pensions_slider_value = 5 }
	########## Education crap
	set_variable = { econ_social_education_minimal_pct = econ_social_expenditures_minimal_pct }
	set_variable = { econ_social_education_maximal_pct = econ_social_expenditures_maximal_pct }

	clamp_variable = { var = econ_social_education_slider_pct min = econ_social_education_minimal_pct max = econ_social_education_maximal_pct }

	set_variable = { econ_social_education_slider_dot_x = econ_social_education_slider_pct }
	multiply_variable = { econ_social_education_slider_dot_x = 1.88 }
	add_to_variable = { econ_social_education_slider_dot_x = 45 }
	set_variable = { econ_social_education_minimal_x = econ_social_education_minimal_pct }
	multiply_variable = { econ_social_education_minimal_x = 1.88 }
	add_to_variable = { econ_social_education_minimal_x = 45 }
	set_variable = { econ_social_education_maximal_x = econ_social_education_maximal_pct }
	multiply_variable = { econ_social_education_maximal_x = 1.88 }
	add_to_variable = { econ_social_education_maximal_x = 42 }

	set_variable = { econ_social_education_slider_value = econ_social_education_slider_pct }
	divide_variable = { econ_social_education_slider_value = 5 }
	########## Unemployment crap
	set_variable = { econ_social_unemployment_minimal_pct = econ_social_expenditures_minimal_pct }
	set_variable = { econ_social_unemployment_maximal_pct = econ_social_expenditures_maximal_pct }

	clamp_variable = { var = econ_social_unemployment_slider_pct min = econ_social_unemployment_minimal_pct max = econ_social_unemployment_maximal_pct }

	set_variable = { econ_social_unemployment_slider_dot_x = econ_social_unemployment_slider_pct }
	multiply_variable = { econ_social_unemployment_slider_dot_x = 1.88 }
	add_to_variable = { econ_social_unemployment_slider_dot_x = 45 }
	set_variable = { econ_social_unemployment_minimal_x = econ_social_unemployment_minimal_pct }
	multiply_variable = { econ_social_unemployment_minimal_x = 1.88 }
	add_to_variable = { econ_social_unemployment_minimal_x = 45 }
	set_variable = { econ_social_unemployment_maximal_x = econ_social_unemployment_maximal_pct }
	multiply_variable = { econ_social_unemployment_maximal_x = 1.88 }
	add_to_variable = { econ_social_unemployment_maximal_x = 42 }

	set_variable = { econ_social_unemployment_slider_value = econ_social_unemployment_slider_pct }
	divide_variable = { econ_social_unemployment_slider_value = 5 }

	########## Security crap
	set_variable = { econ_admin_security_minimal_pct = econ_admin_expenditures_minimal_pct }
	set_variable = { econ_admin_security_maximal_pct = econ_admin_expenditures_maximal_pct }
	set_temp_variable = { econ_admin_security_maximal_pct_multiplier = 1 }
	add_to_temp_variable = { econ_admin_security_maximal_pct_multiplier = modifier@econ_admin_security_maximal_pct_modifier }
	multiply_variable = { econ_admin_security_maximal_pct = econ_admin_security_maximal_pct_multiplier }
	clamp_variable = { var = econ_admin_security_maximal_pct min = econ_admin_security_minimal_pct max = 100 }

	clamp_variable = { var = econ_admin_security_slider_pct min = econ_admin_security_minimal_pct max = econ_admin_security_maximal_pct }

	set_variable = { econ_admin_security_slider_dot_x = econ_admin_security_slider_pct }
	multiply_variable = { econ_admin_security_slider_dot_x = 1.88 }
	add_to_variable = { econ_admin_security_slider_dot_x = 45 }
	set_variable = { econ_admin_security_minimal_x = econ_admin_security_minimal_pct }
	multiply_variable = { econ_admin_security_minimal_x = 1.88 }
	add_to_variable = { econ_admin_security_minimal_x = 45 }
	set_variable = { econ_admin_security_maximal_x = econ_admin_security_maximal_pct }
	multiply_variable = { econ_admin_security_maximal_x = 1.88 }
	add_to_variable = { econ_admin_security_maximal_x = 42 }

	set_variable = { econ_admin_security_slider_value = econ_admin_security_slider_pct }
	divide_variable = { econ_admin_security_slider_value = 5 }
	########## Safety crap
	set_variable = { econ_admin_regulations_minimal_pct = econ_admin_expenditures_minimal_pct }
	set_variable = { econ_admin_regulations_maximal_pct = econ_admin_expenditures_maximal_pct }
	set_temp_variable = { econ_admin_regulations_maximal_pct_multiplier = 1 }
	add_to_temp_variable = { econ_admin_regulations_maximal_pct_multiplier = modifier@econ_admin_regulations_maximal_pct_modifier }
	multiply_variable = { econ_admin_regulations_maximal_pct = econ_admin_regulations_maximal_pct_multiplier }
	clamp_variable = { var = econ_admin_regulations_maximal_pct min = econ_admin_regulations_minimal_pct max = 100 }

	clamp_variable = { var = econ_admin_regulations_slider_pct min = econ_admin_regulations_minimal_pct max = econ_admin_regulations_maximal_pct }

	set_variable = { econ_admin_regulations_slider_dot_x = econ_admin_regulations_slider_pct }
	multiply_variable = { econ_admin_regulations_slider_dot_x = 1.88 }
	add_to_variable = { econ_admin_regulations_slider_dot_x = 45 }
	set_variable = { econ_admin_regulations_minimal_x = econ_admin_regulations_minimal_pct }
	multiply_variable = { econ_admin_regulations_minimal_x = 1.88 }
	add_to_variable = { econ_admin_regulations_minimal_x = 45 }
	set_variable = { econ_admin_regulations_maximal_x = econ_admin_regulations_maximal_pct }
	multiply_variable = { econ_admin_regulations_maximal_x = 1.88 }
	add_to_variable = { econ_admin_regulations_maximal_x = 42 }

	set_variable = { econ_admin_regulations_slider_value = econ_admin_regulations_slider_pct }
	divide_variable = { econ_admin_regulations_slider_value = 5 }

	########## Bureau crap
	set_variable = { econ_admin_bureaucracy_minimal_pct = econ_admin_expenditures_minimal_pct }
	set_variable = { econ_admin_bureaucracy_maximal_pct = econ_admin_expenditures_maximal_pct }

	clamp_variable = { var = econ_admin_bureaucracy_slider_pct min = econ_admin_bureaucracy_minimal_pct max = econ_admin_bureaucracy_maximal_pct }

	set_variable = { econ_admin_bureaucracy_slider_dot_x = econ_admin_bureaucracy_slider_pct }
	multiply_variable = { econ_admin_bureaucracy_slider_dot_x = 1.88 }
	add_to_variable = { econ_admin_bureaucracy_slider_dot_x = 45 }
	set_variable = { econ_admin_bureaucracy_minimal_x = econ_admin_bureaucracy_minimal_pct }
	multiply_variable = { econ_admin_bureaucracy_minimal_x = 1.88 }
	add_to_variable = { econ_admin_bureaucracy_minimal_x = 45 }
	set_variable = { econ_admin_bureaucracy_maximal_x = econ_admin_bureaucracy_maximal_pct }
	multiply_variable = { econ_admin_bureaucracy_maximal_x = 1.88 }
	add_to_variable = { econ_admin_bureaucracy_maximal_x = 42 }

	set_variable = { econ_admin_bureaucracy_slider_value = econ_admin_bureaucracy_slider_pct }
	divide_variable = { econ_admin_bureaucracy_slider_value = 5 }

	########## Research crap
	set_variable = { econ_research_science_minimal_pct = econ_research_expenditures_minimal_pct }
	set_variable = { econ_research_science_maximal_pct = econ_research_expenditures_maximal_pct }

	clamp_variable = { var = econ_research_science_slider_pct min = econ_research_science_minimal_pct max = econ_research_science_maximal_pct }

	set_variable = { econ_research_science_slider_dot_x = econ_research_science_slider_pct }
	multiply_variable = { econ_research_science_slider_dot_x = 1.88 }
	add_to_variable = { econ_research_science_slider_dot_x = 45 }
	set_variable = { econ_research_science_minimal_x = econ_research_science_minimal_pct }
	multiply_variable = { econ_research_science_minimal_x = 1.88 }
	add_to_variable = { econ_research_science_minimal_x = 45 }
	set_variable = { econ_research_science_maximal_x = econ_research_science_maximal_pct }
	multiply_variable = { econ_research_science_maximal_x = 1.88 }
	add_to_variable = { econ_research_science_maximal_x = 42 }

	set_variable = { econ_research_science_slider_value = econ_research_science_slider_pct }
	divide_variable = { econ_research_science_slider_value = 5 }
	########## Facilities crap
	set_variable = { econ_research_facilities_minimal_pct = econ_research_expenditures_minimal_pct }
	set_variable = { econ_research_facilities_maximal_pct = econ_research_expenditures_maximal_pct }

	clamp_variable = { var = econ_research_facilities_slider_pct min = econ_research_facilities_minimal_pct max = econ_research_facilities_maximal_pct }

	set_variable = { econ_research_facilities_slider_dot_x = econ_research_facilities_slider_pct }
	multiply_variable = { econ_research_facilities_slider_dot_x = 1.88 }
	add_to_variable = { econ_research_facilities_slider_dot_x = 45 }
	set_variable = { econ_research_facilities_minimal_x = econ_research_facilities_minimal_pct }
	multiply_variable = { econ_research_facilities_minimal_x = 1.88 }
	add_to_variable = { econ_research_facilities_minimal_x = 45 }
	set_variable = { econ_research_facilities_maximal_x = econ_research_facilities_maximal_pct }
	multiply_variable = { econ_research_facilities_maximal_x = 1.88 }
	add_to_variable = { econ_research_facilities_maximal_x = 42 }

	set_variable = { econ_research_facilities_slider_value = econ_research_facilities_slider_pct }
	divide_variable = { econ_research_facilities_slider_value = 5 }

}

update_army_subsliders = {
	set_variable = { econ_army_maintenance_slider_pct = econ_army_expenditures_slider_pct }
	set_variable = { econ_army_R_D_slider_pct = econ_army_expenditures_slider_pct }
	set_variable = { econ_army_logistics_slider_pct = econ_army_expenditures_slider_pct }
	set_variable = { econ_army_procurement_slider_pct = econ_army_expenditures_slider_pct }
}

update_army_mainslider = {

	clamp_variable = { var = econ_army_maintenance_slider_pct min = econ_army_expenditures_minimal_pct max = econ_army_expenditures_maximal_pct }
	clamp_variable = { var = econ_army_R_D_slider_pct min = econ_army_expenditures_minimal_pct max = econ_army_expenditures_maximal_pct }
	clamp_variable = { var = econ_army_logistics_slider_pct min = econ_army_expenditures_minimal_pct max = econ_army_expenditures_maximal_pct }
	clamp_variable = { var = econ_army_procurement_slider_pct min = econ_army_expenditures_minimal_pct max = econ_army_expenditures_maximal_pct }

	set_temp_variable = { econ_army_average_spending = econ_army_maintenance_slider_pct }
	add_to_temp_variable = { econ_army_average_spending = econ_army_R_D_slider_pct }
	add_to_temp_variable = { econ_army_average_spending = econ_army_logistics_slider_pct }
	add_to_temp_variable = { econ_army_average_spending = econ_army_procurement_slider_pct }
	divide_temp_variable = { econ_army_average_spending = 4 }
	round_temp_variable = econ_army_average_spending

	set_variable = { econ_army_expenditures_slider_pct = econ_army_average_spending }
}

update_social_subsliders = {
	set_variable = { econ_social_healthcare_slider_pct = econ_social_expenditures_slider_pct }
	set_variable = { econ_social_pensions_slider_pct = econ_social_expenditures_slider_pct }
	set_variable = { econ_social_education_slider_pct = econ_social_expenditures_slider_pct }
	set_variable = { econ_social_unemployment_slider_pct = econ_social_expenditures_slider_pct }
}

update_social_mainslider = {

	clamp_variable = { var = econ_social_healthcare_slider_pct min = econ_social_expenditures_minimal_pct max = econ_social_expenditures_maximal_pct }
	clamp_variable = { var = econ_social_pensions_slider_pct min = econ_social_expenditures_minimal_pct max = econ_social_expenditures_maximal_pct }
	clamp_variable = { var = econ_social_education_slider_pct min = econ_social_expenditures_minimal_pct max = econ_social_expenditures_maximal_pct }
	clamp_variable = { var = econ_social_unemployment_slider_pct min = econ_social_expenditures_minimal_pct max = econ_social_expenditures_maximal_pct }


	set_temp_variable = { econ_social_average_spending = econ_social_healthcare_slider_pct }
	add_to_temp_variable = { econ_social_average_spending = econ_social_pensions_slider_pct }
	add_to_temp_variable = { econ_social_average_spending = econ_social_education_slider_pct }
	add_to_temp_variable = { econ_social_average_spending = econ_social_unemployment_slider_pct }

	divide_temp_variable = { econ_social_average_spending = 4 }
	round_temp_variable = econ_social_average_spending

	set_variable = { econ_social_expenditures_slider_pct = econ_social_average_spending }
}

update_admin_subsliders = {
	set_variable = { econ_admin_security_slider_pct = econ_admin_expenditures_slider_pct }
	set_variable = { econ_admin_regulations_slider_pct = econ_admin_expenditures_slider_pct }
	set_variable = { econ_admin_bureaucracy_slider_pct = econ_admin_expenditures_slider_pct }
}

update_admin_mainslider = {

	clamp_variable = { var = econ_admin_security_slider_pct min = econ_admin_expenditures_minimal_pct max = econ_admin_security_maximal_pct }
	clamp_variable = { var = econ_admin_regulations_slider_pct min = econ_admin_expenditures_minimal_pct max = econ_admin_regulations_maximal_pct }
	clamp_variable = { var = econ_admin_bureaucracy_slider_pct min = econ_admin_expenditures_minimal_pct max = econ_admin_expenditures_maximal_pct }


	set_temp_variable = { econ_admin_average_spending = econ_admin_security_slider_pct }
	add_to_temp_variable = { econ_admin_average_spending = econ_admin_regulations_slider_pct }
	add_to_temp_variable = { econ_admin_average_spending = econ_admin_bureaucracy_slider_pct }

	divide_temp_variable = { econ_admin_average_spending = 3 }
	round_temp_variable = econ_admin_average_spending

	clamp_variable = { var = econ_admin_average_spending min = econ_admin_expenditures_minimal_pct max = econ_admin_expenditures_maximal_pct }

	set_variable = { econ_admin_expenditures_slider_pct = econ_admin_average_spending }
}

update_research_subsliders = {
	set_variable = { econ_research_science_slider_pct = econ_research_expenditures_slider_pct }
	set_variable = { econ_research_facilities_slider_pct = econ_research_expenditures_slider_pct }
}

update_research_mainslider = {
	clamp_variable = { var = econ_research_science_slider_pct min = econ_research_expenditures_minimal_pct max = econ_research_expenditures_maximal_pct }
	clamp_variable = { var = econ_research_facilities_slider_pct min = econ_research_expenditures_minimal_pct max = econ_research_expenditures_maximal_pct }

	set_temp_variable = { econ_research_average_spending = econ_research_science_slider_pct }
	add_to_temp_variable = { econ_research_average_spending = econ_research_facilities_slider_pct }

	divide_temp_variable = { econ_research_average_spending = 2 }
	round_variable = econ_research_average_spending

	set_variable = { econ_research_expenditures_slider_pct = econ_research_average_spending }
}


calculate_army_funding_effects = {
	calculate_army_maintenance_funding_effects = yes
	calculate_army_training_funding_effects = yes
	calculate_army_r_d_funding_effects = yes
	calculate_army_procurment_funding_effects = yes
}

calculate_army_maintenance_funding_effects = {
	set_variable = { TNO_army_funding_policy_effect = TNO_army_funding_policy_effect_display }
	set_variable = { TNO_army_funding_army_org_factor = TNO_army_funding_army_org_factor_display }
	set_variable = { TNO_army_funding_army_morale_factor = TNO_army_funding_army_morale_factor_display }
	set_variable = { TNO_army_funding_war_support_factor = TNO_army_funding_war_support_factor_display }
	set_variable = { TNO_army_funding_stability_factor = TNO_army_funding_stability_factor_display }
	set_variable = { TNO_army_funding_army_professionalism_change = TNO_army_funding_army_professionalism_change_display }
}

calculate_army_training_funding_effects = {
	set_variable = { TNO_army_training_funding_terrain_effect = TNO_army_training_funding_terrain_effect_display }
	set_variable = { TNO_army_training_funding_upkeep_effect = TNO_army_training_funding_upkeep_effect_display }
	set_variable = { TNO_army_training_funding_supply_grace_effect = TNO_army_training_funding_supply_grace_effect_display }
	set_variable = { TNO_army_training_funding_supply_use_effect = TNO_army_training_funding_supply_use_effect_display }
	set_variable = { TNO_army_training_funding_org_loss_effect = TNO_army_training_funding_org_loss_effect_display }
	set_variable = { TNO_army_training_funding_air_range_effect = TNO_army_training_funding_air_range_effect_display }
	set_variable = { TNO_army_training_funding_no_supply_effect = TNO_army_training_funding_no_supply_effect_display }
	set_variable = { TNO_army_training_funding_encircled_effect = TNO_army_training_funding_encircled_effect_display }
}

calculate_army_r_d_funding_effects = {
	if = {
		limit = { NOT = { check_variable = { army_idea_number = army_idea_number_set } } }

		meta_effect = {
			text = {
				add_ideas = TNO_ECON_ARMY_IDEA_SPAM_[IDEA_NUMBER]
			}
			IDEA_NUMBER = "[?army_idea_number|.0]"
		}
		set_variable = { army_idea_number_set = army_idea_number }
	}
	set_variable = { TNO_army_funding_air_xp_effect = TNO_army_funding_air_xp_display }
	set_variable = { TNO_army_funding_army_xp_effect = TNO_army_funding_army_xp_display }

}

calculate_army_procurment_funding_effects = {
	set_variable = { TNO_army_procurement_funding_effect = TNO_army_procurement_funding_effect_display }
}

calculate_naval_funding_effects = {
	if = {
		limit = {
			num_of_naval_factories < 1
			check_variable = { num_ships = 0 }
		}
		set_variable = { econ_naval_expenditures_slider_value = 0 }
		set_variable = { econ_naval_expenditures_slider_pct = 0 }
		set_variable = { econ_naval_expenditures_minimal_pct = 0 }
		set_variable = { econ_naval_expenditures_maximal_pct = 0 }
	}
	else_if = {
		limit = {
			OR = {
				AND = {
					num_of_naval_factories > 0
					check_variable = { num_ships = 0 }
				}
				check_variable = { num_ships > 0 }
			}
			check_variable = { navy_check = 0 }
		}
		set_variable = { econ_naval_expenditures_slider_value = 10 }
		set_variable = { econ_naval_expenditures_slider_pct = 50 }
		set_variable = { econ_naval_expenditures_minimal_pct = 25 }
		set_variable = { econ_naval_expenditures_maximal_pct = 75 }
		set_variable = { navy_check = 1 }
	}
	set_variable = { TNO_naval_funding_navy_xp_effect = TNO_naval_funding_navy_xp_display }
	set_variable = { TNO_naval_funding_industrial_capacity_dockyard = TNO_naval_funding_industrial_capacity_dockyard_display }
	set_variable = { TNO_naval_funding_naval_coordination = TNO_naval_funding_naval_coordination_display }
	set_variable = { TNO_naval_funding_naval_speed_factor = TNO_naval_funding_naval_speed_factor_display }
	set_variable = { TNO_naval_funding_navy_max_range_factor = TNO_naval_funding_navy_max_range_factor_display }
	set_variable = { TNO_naval_funding_spotting_chance = TNO_naval_funding_spotting_chance_display }
	set_variable = { TNO_naval_funding_war_support_factor = TNO_naval_funding_war_support_factor_display }
	set_variable = { TNO_naval_funding_stability_factor = TNO_naval_funding_stability_factor_display }

	calculate_naval_idea_spam = yes
}

calculate_naval_idea_spam = {
	set_variable = { naval_idea_number = econ_naval_expenditures_slider_value }
	round_variable = naval_idea_number
	if = {
		limit = {
			check_variable = { naval_idea_number_set = naval_idea_number }
		}
		#log ="no need to change naval idea for [THIS.GETNAME]"
	}
	else = {
		if = {
			limit = {
				check_variable = { naval_idea_number = 0 }
			}
			add_ideas = TNO_ECON_NAVAL_IDEA_SPAM_0
			set_variable = { naval_idea_number_set = 0 }
			set_variable = { naval_bonus_number = 0.2 }
			set_variable = { naval_bonus_number_inverted = naval_bonus_number }
			multiply_variable = { naval_bonus_number_inverted = -1 }
		}
		else_if = {
			limit = {
				check_variable = { naval_idea_number = 1 }
			}
			add_ideas = TNO_ECON_NAVAL_IDEA_SPAM_1
			set_variable = { naval_idea_number_set = 1 }
			set_variable = { naval_bonus_number = 0.18 }
			set_variable = { naval_bonus_number_inverted = naval_bonus_number }
			multiply_variable = { naval_bonus_number_inverted = -1 }
		}
		else_if = {
			limit = {
				check_variable = { naval_idea_number = 2 }
			}
			add_ideas = TNO_ECON_NAVAL_IDEA_SPAM_2
			set_variable = { naval_idea_number_set = 2 }
			set_variable = { naval_bonus_number = 0.16 }
			set_variable = { naval_bonus_number_inverted = naval_bonus_number }
			multiply_variable = { naval_bonus_number_inverted = -1 }
		}
		else_if = {
			limit = {
				check_variable = { naval_idea_number = 3 }
			}
			add_ideas = TNO_ECON_NAVAL_IDEA_SPAM_3
			set_variable = { naval_idea_number_set = 3 }
			set_variable = { naval_bonus_number = 0.14 }
			set_variable = { naval_bonus_number_inverted = naval_bonus_number }
			multiply_variable = { naval_bonus_number_inverted = -1 }
		}
		else_if = {
			limit = {
				check_variable = { naval_idea_number = 4 }
			}
			add_ideas = TNO_ECON_NAVAL_IDEA_SPAM_4
			set_variable = { naval_idea_number_set = 4 }
			set_variable = { naval_bonus_number = 0.12 }
			set_variable = { naval_bonus_number_inverted = naval_bonus_number }
			multiply_variable = { naval_bonus_number_inverted = -1 }
		}
		else_if = {
			limit = {
				check_variable = { naval_idea_number = 5 }
			}
			add_ideas = TNO_ECON_NAVAL_IDEA_SPAM_5
			set_variable = { naval_idea_number_set = 5 }
			set_variable = { naval_bonus_number = 0.1 }
			set_variable = { naval_bonus_number_inverted = naval_bonus_number }
			multiply_variable = { naval_bonus_number_inverted = -1 }
		}
		else_if = {
			limit = {
				check_variable = { naval_idea_number = 6 }
			}
			add_ideas = TNO_ECON_NAVAL_IDEA_SPAM_6
			set_variable = { naval_idea_number_set = 6 }
			set_variable = { naval_bonus_number = 0.08 }
			set_variable = { naval_bonus_number_inverted = naval_bonus_number }
			multiply_variable = { naval_bonus_number_inverted = -1 }
		}
		else_if = {
			limit = {
				check_variable = { naval_idea_number = 7 }
			}
			add_ideas = TNO_ECON_NAVAL_IDEA_SPAM_7
			set_variable = { naval_idea_number_set = 7 }
			set_variable = { naval_bonus_number = 0.06 }
			set_variable = { naval_bonus_number_inverted = naval_bonus_number }
			multiply_variable = { naval_bonus_number_inverted = -1 }
		}
		else_if = {
			limit = {
				check_variable = { naval_idea_number = 8 }
			}
			add_ideas = TNO_ECON_NAVAL_IDEA_SPAM_8
			set_variable = { naval_idea_number_set = 8 }
			set_variable = { naval_bonus_number = 0.04 }
			set_variable = { naval_bonus_number_inverted = naval_bonus_number }
			multiply_variable = { naval_bonus_number_inverted = -1 }
		}
		else_if = {
			limit = {
				check_variable = { naval_idea_number = 9 }
			}
			add_ideas = TNO_ECON_NAVAL_IDEA_SPAM_9
			set_variable = { naval_idea_number_set = 9 }
			set_variable = { naval_bonus_number = 0.02 }
			set_variable = { naval_bonus_number_inverted = naval_bonus_number }
			multiply_variable = { naval_bonus_number_inverted = -1 }
		}
		else_if = {
			limit = {
				check_variable = { naval_idea_number = 10 }
			}
			add_ideas = TNO_ECON_NAVAL_IDEA_SPAM_10
			set_variable = { naval_idea_number_set = 10 }
			set_variable = { naval_bonus_number = 0 }
			set_variable = { naval_bonus_number_inverted = naval_bonus_number }
			multiply_variable = { naval_bonus_number_inverted = -1 }
		}
		else_if = {
			limit = {
				check_variable = { naval_idea_number = 11 }
			}
			add_ideas = TNO_ECON_NAVAL_IDEA_SPAM_11
			set_variable = { naval_idea_number_set = 11 }
			set_variable = { naval_bonus_number = -0.02 }
			set_variable = { naval_bonus_number_inverted = naval_bonus_number }
			multiply_variable = { naval_bonus_number_inverted = -1 }
		}
		else_if = {
			limit = {
				check_variable = { naval_idea_number = 12 }
			}
			add_ideas = TNO_ECON_NAVAL_IDEA_SPAM_12
			set_variable = { naval_idea_number_set = 12 }
			set_variable = { naval_bonus_number = -0.04 }
			set_variable = { naval_bonus_number_inverted = naval_bonus_number }
			multiply_variable = { naval_bonus_number_inverted = -1 }
		}
		else_if = {
			limit = {
				check_variable = { naval_idea_number = 13 }
			}
			add_ideas = TNO_ECON_NAVAL_IDEA_SPAM_13
			set_variable = { naval_idea_number_set = 13 }
			set_variable = { naval_bonus_number = -0.06 }
			set_variable = { naval_bonus_number_inverted = naval_bonus_number }
			multiply_variable = { naval_bonus_number_inverted = -1 }
		}
		else_if = {
			limit = {
				check_variable = { naval_idea_number = 14 }
			}
			add_ideas = TNO_ECON_NAVAL_IDEA_SPAM_14
			set_variable = { naval_idea_number_set = 14 }
			set_variable = { naval_bonus_number = -0.08 }
			set_variable = { naval_bonus_number_inverted = naval_bonus_number }
			multiply_variable = { naval_bonus_number_inverted = -1 }
		}
		else_if = {
			limit = {
				check_variable = { naval_idea_number = 15 }
			}
			add_ideas = TNO_ECON_NAVAL_IDEA_SPAM_15
			set_variable = { naval_idea_number_set = 15 }
			set_variable = { naval_bonus_number = -0.10 }
			set_variable = { naval_bonus_number_inverted = naval_bonus_number }
			multiply_variable = { naval_bonus_number_inverted = -1 }
		}
		else_if = {
			limit = {
				check_variable = { naval_idea_number = 16 }
			}
			add_ideas = TNO_ECON_NAVAL_IDEA_SPAM_16
			set_variable = { naval_idea_number_set = 16 }
			set_variable = { naval_bonus_number = -0.12 }
			set_variable = { naval_bonus_number_inverted = naval_bonus_number }
			multiply_variable = { naval_bonus_number_inverted = -1 }
		}
		else_if = {
			limit = {
				check_variable = { naval_idea_number = 17 }
			}
			add_ideas = TNO_ECON_NAVAL_IDEA_SPAM_17
			set_variable = { naval_idea_number_set = 17 }
			set_variable = { naval_bonus_number = -0.14 }
			set_variable = { naval_bonus_number_inverted = naval_bonus_number }
			multiply_variable = { naval_bonus_number_inverted = -1 }
		}
		else_if = {
			limit = {
				check_variable = { naval_idea_number = 18 }
			}
			add_ideas = TNO_ECON_NAVAL_IDEA_SPAM_18
			set_variable = { naval_idea_number_set = 18 }
			set_variable = { naval_bonus_number = -0.16 }
			set_variable = { naval_bonus_number_inverted = naval_bonus_number }
			multiply_variable = { naval_bonus_number_inverted = -1 }
		}
		else_if = {
			limit = {
				check_variable = { naval_idea_number = 19 }
			}
			add_ideas = TNO_ECON_NAVAL_IDEA_SPAM_19
			set_variable = { naval_idea_number_set = 19 }
			set_variable = { naval_bonus_number = -0.18 }
			set_variable = { naval_bonus_number_inverted = naval_bonus_number }
			multiply_variable = { naval_bonus_number_inverted = -1 }
		}
		else_if = {
			limit = {
				check_variable = { naval_idea_number = 20 }
			}
			add_ideas = TNO_ECON_NAVAL_IDEA_SPAM_20
			set_variable = { naval_idea_number_set = 20 }
			set_variable = { naval_bonus_number = -0.2 }
			set_variable = { naval_bonus_number_inverted = naval_bonus_number }
			multiply_variable = { naval_bonus_number_inverted = -1 }
		}
	}
}
calculate_research_funding_effects = {
	set_variable = { TNO_research_funding_research_speed_factor = TNO_research_funding_research_speed_factor_display }
	set_variable = { TNO_research_funding_facilities_effect = TNO_research_funding_facilities_effect_display }
}

calculate_social_funding_effects = { #It's just that simple! damn I wish it was tho
	set_variable = { TNO_social_funding_policy_effect = TNO_social_funding_policy_effect_display }

	set_variable = { TNO_social_funding_healthcare_effect = TNO_health_care_funding_effect_display }
	set_variable = { TNO_social_funding_education_effect = TNO_education_funding_effect_display }
	set_variable = { TNO_social_funding_pensions_effect = TNO_pensions_funding_effect_display }
	set_variable = { TNO_social_funding_unemployment_effect = TNO_unemployment_funding_effect_display }

}
calculate_admin_funding_effects = {
	set_variable = { TNO_admin_funding_taxable_population_factor = TNO_admin_funding_taxable_population_factor_display }

	set_variable = { TNO_admin_funding_stability_factor = TNO_admin_funding_stability_factor_display }

	set_variable = { TNO_admin_funding_security_effect = TNO_security_funding_effect_display }

	set_variable = { TNO_admin_funding_regulations_effect = TNO_regulations_funding_effect_display }

	set_variable = { TNO_admin_funding_pollution_effect = TNO_pollution_funding_effect_display }

}

calculate_nuclear_funding_effects = {
	if = {
		limit = { has_nuclear_arsenal = no }
		set_variable = { econ_nuclear_expenditures_slider_value = -10 }
		set_variable = { econ_nuclear_expenditures_slider_pct = 0 }
		set_variable = { econ_nuclear_expenditures_minimal_pct = 0 }
		set_variable = { econ_nuclear_expenditures_maximal_pct = 0 }
	}
	else_if = {
		limit = {
			has_nuclear_arsenal = yes
			check_variable = { nuke_check = 0 }
		}
		set_variable = { econ_nuclear_expenditures_slider_value = 0 }
		set_variable = { econ_nuclear_expenditures_slider_pct = 50 }
		set_variable = { econ_nuclear_expenditures_minimal_pct = 25 }
		set_variable = { econ_nuclear_expenditures_maximal_pct = 75 }
		set_variable = { nuke_check = 1 }
	}
}

calculate_military_expenditures = {
	calculate_fielded_manpower = yes # calculates fielded manpower AND costs for army, airforce, and navy
	calculate_army_expenditures = yes # calculates army expenses including tonk and helicopter as well as army aviation
	calculate_naval_expenditures = yes
	calculate_misc_expenditures = yes
	if = {
		limit = { has_nuclear_arsenal = yes }
		calculate_nuclear_expenditures = yes
	}

	set_variable = { military_expenditures = army_costs }
	add_to_variable = { military_expenditures = naval_costs }
	add_to_variable = { military_expenditures = nuclear_costs }
	add_to_variable = { military_expenditures = military_costs_misc }
	add_to_variable = { military_expenditures = Antarctica_Agency_Budget_Spending } # ODF adds this one line

	if = {
		limit = {
			has_country_flag = TNO_eliminate_military_spending
		}
		set_variable = { military_expenditures = 0 }
	}
}



calculate_misc_expenditures = {
	set_variable = { military_costs_misc = modifier@military_costs_misc }
	clamp_variable = {
		var = military_costs_misc
		min = 0
	}
	if = {
		limit = {
			has_country_flag = TNO_eliminate_military_spending
		}
		set_variable = { military_costs_misc = 0 }
	}
}

calculate_army_expenditures = {

	calculate_army_maintenance_expenditures = yes
	calculate_army_R_D_expenditures = yes
	calculate_army_logistics_expenditures = yes #used for logistics. lol.
	calculate_army_procurement_expenditures = yes #actually used for procurement. lol

	set_variable = { army_costs = army_maintenance_costs }
	add_to_variable = { army_costs = army_logistics_costs }
	add_to_variable = { army_costs = army_industry_costs }
	add_to_variable = { army_costs = army_r_d_costs }
	set_variable = { army_costs_base = army_costs }
	if = {
		limit = {
			has_country_flag = TNO_eliminate_military_spending
		}
		set_variable = { army_costs = 0 }
	}
}

calculate_army_maintenance_expenditures = {

	set_variable = { army_maintenance_costs = 0 }

	set_variable = { MBT_costs = num_equipment_in_armies@MBT_chassis } #Both NSB + non-NSB MBTs count as chassis
	set_variable = { IFV_costs = num_equipment_in_armies@IFV_chassis } #Same goes for all armor types
	set_variable = { APC_costs = num_equipment_in_armies@APC_chassis }
	set_variable = { anti_air_costs = num_equipment_in_armies@anti_air_equipment }
	set_variable = { laser_anti_air_costs = num_equipment_in_armies@laser_aa_equipment }
	set_variable = { IFV_artillery_equipment_costs = num_equipment_in_armies@IFV_artillery_equipment }
	set_variable = { IFV_aa_equipment_costs = num_equipment_in_armies@IFV_aa_equipment }
	set_variable = { artillery_equipment_costs = num_equipment_in_armies@artillery_equipment }
	set_variable = { attack_helicopter_equipment_costs = num_equipment_in_armies@attack_helicopter_equipment }
	set_variable = { kugelpanzer_equipment_costs = num_equipment_in_armies@kugelpanzer_equipment }
	set_variable = { MBT_artillery_equipment_costs = num_equipment_in_armies@MBT_artillery_equipment }
	set_variable = { MBT_aa_equipment_costs = num_equipment_in_armies@MBT_aa_equipment }
	set_variable = { MBT_Maus_equipment_costs = num_equipment_in_armies@MBT_Maus_equipment }
	set_variable = { MBT_Maus_aa_equipment_costs = num_equipment_in_armies@MBT_Maus_aa_equipment }
	set_variable = { motorized_equipment_costs = num_equipment_in_armies@motorized_equipment }
	set_variable = { scout_helicopter_equipment_costs = num_equipment_in_armies@scout_helicopter_equipment }
	set_variable = { transport_helicopter_equipment_costs = num_equipment_in_armies@transport_helicopter_equipment }


	divide_variable = { MBT_costs = 1000 }
	divide_variable = { IFV_costs = 1000 }
	divide_variable = { APC_costs = 1000 }
	divide_variable = { anti_air_costs = 1000 }
	divide_variable = { laser_anti_air_costs = 1000 }
	divide_variable = { IFV_artillery_equipment_costs = 1000 }
	divide_variable = { IFV_aa_equipment_costs = 1000 }
	divide_variable = { artillery_equipment_costs = 1000 }
	divide_variable = { attack_helicopter_equipment_costs = 1000 }
	divide_variable = { kugelpanzer_equipment_costs = 1000 }
	divide_variable = { MBT_artillery_equipment_costs = 1000 }
	divide_variable = { MBT_aa_equipment_costs = 1000 }
	divide_variable = { MBT_Maus_equipment_costs = 1000 }
	divide_variable = { MBT_Maus_aa_equipment_costs = 1000 }
	divide_variable = { motorized_equipment_costs = 1000 }
	divide_variable = { scout_helicopter_equipment_costs = 1000 }
	divide_variable = { transport_helicopter_equipment_costs = 1000 }

	#balancing numbers go here.

	multiply_variable = { MBT_costs = 0.030 } # cost of 1 MBT is approximately 83,000 in 1960 dollars
	multiply_variable = { IFV_costs = 0.018 } # cost of 1 IFV is approximately 52,000 in 1960 dollars
	multiply_variable = { APC_costs = 0.015 } # cost of 1 APC is approximately 43,000 in 1960 dollars
	multiply_variable = { anti_air_costs = 0.008 } # cost of anti-air system is approximately 120,000 in 1960 dollars I guess
	multiply_variable = { laser_anti_air_costs = 0.100 } # way more expensive, probably
	multiply_variable = { IFV_artillery_equipment_costs = 0.022 } # I am literally making up these numbers
	multiply_variable = { IFV_aa_equipment_costs = 0.025 } # balans
	multiply_variable = { artillery_equipment_costs = 0.006 } # artillery do be cheap
	multiply_variable = { attack_helicopter_costs = 0.100 } # attack heli do be fucking expensive
	multiply_variable = { kugelpanzer_equipment_costs = 0.020 } # i dont remember what kugelpanzer is supposed to be but this is probably it
	multiply_variable = { MBT_artillery_equipment_costs = 0.035 } # a bit more expensive than a simple tank for reasons
	multiply_variable = { MBT_aa_equipment_costs = 0.045 } # radar ain't cheap
	multiply_variable = { MBT_Maus_equipment_costs = 0.210 } #Maus was a useless boondoggle cmv
	multiply_variable = { MBT_Maus_aa_equipment_costs = 0.340 } #the funni big tank but with radar
	multiply_variable = { motorized_equipment_costs = 0.004 } #mmm yess cheap
	multiply_variable = { scout_helicopter_equipment_costs = 0.085 } #Scout helicopters do be an oof
	multiply_variable = { transport_helicopter_equipment_costs = 0.250 } #helis ooof ouch owie

	set_variable = { army_equipment_costs = MBT_costs }
	add_to_variable = { army_equipment_costs = IFV_costs }
	add_to_variable = { army_equipment_costs = APC_costs }
	add_to_variable = { army_equipment_costs = anti_air_costs }
	add_to_variable = { army_equipment_costs = laser_anti_air_costs }
	add_to_variable = { army_equipment_costs = IFV_artillery_equipment_costs }
	add_to_variable = { army_equipment_costs = IFV_aa_equipment_costs }
	add_to_variable = { army_equipment_costs = artillery_equipment_costs }
	add_to_variable = { army_equipment_costs = attack_helicopter_equipment_costs }
	add_to_variable = { army_equipment_costs = kugelpanzer_equipment_costs }
	add_to_variable = { army_equipment_costs = MBT_artillery_equipment_costs }
	add_to_variable = { army_equipment_costs = MBT_aa_equipment_costs }
	add_to_variable = { army_equipment_costs = MBT_Maus_equipment_costs }
	add_to_variable = { army_equipment_costs = MBT_Maus_aa_equipment_costs }
	add_to_variable = { army_equipment_costs = motorized_equipment_costs }
	add_to_variable = { army_equipment_costs = scout_helicopter_equipment_costs }
	add_to_variable = { army_equipment_costs = transport_helicopter_equipment_costs }


	# a little airforce trolling

	### LAM NOTE: the num_deployed_planes_with_type vars here seem to be CTDing the game on 1.15. very weird

	# set_variable = { num_gunships = num_deployed_planes_with_type@gunship_equipment }
	# set_variable = { num_strat_bombers = num_deployed_planes_with_type@strat_bomber_equipment }
	# set_variable = { num_tac_bombers = num_deployed_planes_with_type@tac_bomber_equipment }
	# set_variable = { num_CASs = num_deployed_planes_with_type@CAS_equipment }
	# set_variable = { num_cv_CASs = num_deployed_planes_with_type@cv_CAS_equipment }
	# set_variable = { num_interceptors = num_deployed_planes_with_type@interceptor_equipment }
	# set_variable = { num_fighters = num_deployed_planes_with_type@fighter_equipment }
	# set_variable = { num_cv_fighters = num_deployed_planes_with_type@cv_fighter_equipment }
	# set_variable = { num_light_stealth_aircraft = num_deployed_planes_with_type@light_stealth_equipment }
	# set_variable = { num_mca = num_deployed_planes_with_type@mca_equipment }
	# set_variable = { num_cv_mca = num_deployed_planes_with_type@cv_mca_equipment }
	# set_variable = { num_asw_helicopters = num_deployed_planes_with_type@asw_helicopter_equipment }
	# set_variable = { num_nav_bombers = num_deployed_planes_with_type@nav_bomber_equipment }
	# set_variable = { num_cv_nav_bombers = num_deployed_planes_with_type@cv_nav_bomber_equipment }
	# set_variable = { num_scout_planes = num_deployed_planes_with_type@scout_plane_equipment }
	# set_variable = { num_tac_stealth_aircraft = num_deployed_planes_with_type@tac_stealth_equipment }
	# set_variable = { num_strat_stealth_aircraft = num_deployed_planes_with_type@strat_stealth_equipment }
	# set_variable = { num_transport_planes = num_deployed_planes_with_type@transport_plane_equipment }

	set_variable = { gunship_costs = num_gunships } # we could fix this but I'm too lazy to do it tbh
	set_variable = { strat_bomber_costs = num_strat_bombers }
	set_variable = { tac_bomber_costs = num_tac_bombers }
	set_variable = { CAS_costs = num_CASs }
	set_variable = { interceptor_costs = num_interceptors }
	set_variable = { fighter_costs = num_fighters }
	set_variable = { cv_CAS_costs = num_cv_CASs }
	set_variable = { cv_fighter_costs = num_cv_fighters }
	set_variable = { light_stealth_aircraft_costs = num_light_stealth_aircraft }
	set_variable = { mca_costs = num_mca }
	set_variable = { cv_mca_costs = num_cv_mca }
	set_variable = { asw_helicopter_costs = num_asw_helicopters }
	set_variable = { nav_bomber_costs = num_nav_bombers }
	set_variable = { cv_nav_bomber_costs = num_cv_nav_bombers }
	set_variable = { scout_plane_costs = num_scout_planes }
	set_variable = { tac_stealth_aircraft_costs = num_tac_stealth_aircraft }
	set_variable = { strat_stealth_aircraft_costs = num_cv_fighters }
	set_variable = { transport_plane_costs = num_transport_planes }

	divide_variable = { gunship_costs = 1000 } # we could fix this but I'm too lazy to do it tbh
	divide_variable = { strat_bomber_costs = 1000 }
	divide_variable = { tac_bomber_costs = 1000 }
	divide_variable = { CAS_costs = 1000 }
	divide_variable = { interceptor_costs = 1000 }
	divide_variable = { fighter_costs = 1000 }
	divide_variable = { cv_CAS_costs = 1000 }
	divide_variable = { cv_fighter_costs = 100 }
	divide_variable = { light_stealth_aircraft_costs = 1000 }
	divide_variable = { mca_costs = 1000 }
	divide_variable = { cv_mca_costs = 1000 }
	divide_variable = { asw_helicopter_costs = 1000 }
	divide_variable = { nav_bomber_costs = 1000 }
	divide_variable = { cv_nav_bomber_costs = 1000 }
	divide_variable = { scout_plane_costs = 1000 }
	divide_variable = { tac_stealth_aircraft_costs = 1000 }
	divide_variable = { strat_stealth_aircraft_costs = 1000 }
	divide_variable = { transport_plane_costs = 1000 } # we could do a little balancing here idk


	multiply_variable = { gunship_costs = 0.090 }
	multiply_variable = { strat_bomber_costs = 0.100 }
	multiply_variable = { tac_bomber_costs = 0.085 }
	multiply_variable = { CAS_costs = 0.045 }
	multiply_variable = { interceptor_costs = 0.050 }
	multiply_variable = { fighter_costs = 0.045 }

	set_variable = { army_air_costs = gunship_costs }
	add_to_variable = { army_air_costs = strat_bomber_costs }
	add_to_variable = { army_air_costs = tac_bomber_costs }
	add_to_variable = { army_air_costs = CAS_costs }
	add_to_variable = { army_air_costs = interceptor_costs }
	add_to_variable = { army_air_costs = fighter_costs }
	add_to_variable = { army_air_costs = light_stealth_aircraft_costs }
	add_to_variable = { army_air_costs = mca_costs }
	#add_to_variable = { army_air_costs = cv_mca_costs }
	#add_to_variable = { army_air_costs = asw_helicopter_costs }
	#add_to_variable = { army_air_costs = nav_bomber_costs }
	#add_to_variable = { army_air_costs = cv_nav_bomber_costs }
	add_to_variable = { army_air_costs = scout_plane_costs }
	add_to_variable = { army_air_costs = tac_stealth_aircraft_costs }
	add_to_variable = { army_air_costs = strat_stealth_aircraft_costs }
	add_to_variable = { army_air_costs = transport_plane_costs }

	set_variable = { naval_aviation_costs = cv_CAS_costs }
	add_to_variable = { naval_aviation_costs = cv_fighter_costs }
	add_to_variable = { naval_aviation_costs = cv_mca_costs }
	add_to_variable = { naval_aviation_costs = asw_helicopter_costs }
	add_to_variable = { naval_aviation_costs = nav_bomber_costs }
	add_to_variable = { naval_aviation_costs = cv_nav_bomber_costs }


	if = {
		limit = {
			check_variable = { num_ships_with_type@carrier > 0 }
		}
		add_to_variable = { army_air_costs = naval_aviation_costs }
	}

	add_to_variable = { army_air_costs = airforce_manpower_costs }
	multiply_variable = { army_air_costs = modifier@airforce_cost_modifier }

	add_to_variable = { army_maintenance_costs = manpower_costs }
	add_to_variable = { army_maintenance_costs = army_equipment_costs }
	multiply_variable = { army_maintenance_costs = modifier@army_cost_modifier }

	add_to_variable = { army_maintenance_costs = army_air_costs }

	set_variable = { army_maintenance_costs_base = army_maintenance_costs }

	set_variable = { army_maintenance_slider_effect = econ_army_maintenance_slider_pct }

	multiply_variable = { army_maintenance_slider_effect = 0.8 }
	add_to_variable = { army_maintenance_slider_effect = 20 }
	divide_variable = { army_maintenance_slider_effect = 100 }

	## All of this exists to boost the cost to match the display
	#Boosts/Austerity
	multiply_variable = { army_costs = modifier@military_expenditures_factor }
	multiply_variable = { manpower_costs = modifier@military_expenditures_factor }
	multiply_variable = { military_factory_costs = modifier@military_expenditures_factor }
	multiply_variable = { army_air_costs = modifier@military_expenditures_factor }
	multiply_variable = { army_equipment_costs = modifier@military_expenditures_factor }
	multiply_variable = { army_industry_costs = modifier@military_expenditures_factor }
	multiply_variable = { army_logistics_costs = modifier@military_expenditures_factor }
	multiply_variable = { army_R_D_costs = modifier@military_expenditures_factor }

	multiply_variable = { manpower_costs = modifier@army_cost_modifier }
	multiply_variable = { army_equipment_costs = modifier@army_cost_modifier }
	multiply_variable = { army_industry_costs = modifier@army_cost_modifier }
	multiply_variable = { army_logistics_costs = modifier@army_cost_modifier }
	multiply_variable = { army_R_D_costs = modifier@army_cost_modifier }

	multiply_variable = { army_maintenance_costs = army_maintenance_slider_effect }
	multiply_variable = { manpower_costs = army_maintenance_slider_effect }
	multiply_variable = { military_factory_costs = army_maintenance_slider_effect }
	multiply_variable = { army_air_costs = army_maintenance_slider_effect }
	multiply_variable = { army_equipment_costs = army_maintenance_slider_effect }
	if = {
		limit = {
			has_country_flag = TNO_eliminate_military_spending
		}
		set_variable = { army_maintenance_costs = 0 }
	}
}

calculate_army_R_D_expenditures = {

	set_variable = { army_R_D_costs = gdpc }

	divide_variable = { army_R_D_costs = 4 } #max is $2500 for every soldier in the field (maybe IDK). seems to be good tho
	multiply_variable = { army_R_D_costs = amount_research_slots } #tie it to num slots

	multiply_variable = { army_R_D_costs = modifier@military_R_D_expenditures_factor }
	set_variable = { army_R_D_slider_effect = econ_army_R_D_slider_pct }
	divide_variable = { army_R_D_slider_effect = 100 }
	multiply_variable = { army_R_D_costs = army_R_D_slider_effect }


	if = {
		limit = {
			has_country_flag = TNO_eliminate_military_spending
		}
		set_variable = { army_R_D_costs = 0 }
	}
}

calculate_army_logistics_expenditures = { #actually done for logistics hehehehehe!!
	set_variable = { army_logistics_costs = army_maintenance_costs_base }
	multiply_variable = { army_logistics_costs = 0.90 }

	set_variable = { army_training_slider_effect = econ_army_logistics_slider_pct }
	multiply_variable = { army_training_slider_effect = 0.01 }
	multiply_variable = { army_logistics_costs = army_training_slider_effect }
	if = {
		limit = {
			has_country_flag = TNO_eliminate_military_spending
		}
		set_variable = { army_logistics_costs = 0 }
	}
}

calculate_army_procurement_expenditures = {
	set_temp_variable = { num_mil_facs = num_of_military_factories }
	set_temp_variable = { num_available_mil_facs = num_of_available_military_factories }

	set_variable = { used_mil_facs = num_mil_facs }
	subtract_from_variable = { used_mil_facs = num_available_mil_facs }
	divide_variable = { used_mil_facs = mils_mult }

	set_variable = { army_industry_costs = used_mil_facs }
	multiply_variable = { army_industry_costs = econ_army_procurement_slider_pct }
	divide_variable = { army_industry_costs = 400 }

	divide_variable = { army_industry_costs = pu_to_gdp_ratio }
	multiply_variable = { army_industry_costs = modifier@military_industry_cost_expertise_modifier }
	multiply_variable = { army_industry_costs = modifier@military_industry_cost_equipment_modifier }
	multiply_variable = { army_industry_costs = modifier@military_industry_cost_modifier }
	if = {
		limit = {
			has_country_flag = TNO_eliminate_military_spending
		}
		set_variable = { army_industry_costs = 0 }
	}
}

calculate_naval_expenditures = {

	set_temp_variable = { num_naval_facs = num_of_naval_factories }
	set_temp_variable = { num_available_naval_facs = num_of_available_naval_factories }

	set_variable = { used_naval_facs = num_naval_facs }
	subtract_from_variable = { used_naval_facs = num_available_naval_facs }

	set_variable = { naval_industry_costs = used_naval_facs }
	multiply_variable = { naval_industry_costs = 0.10 }
	multiply_variable = { naval_industry_costs = modifier@naval_industry_cost_modifier }

	set_temp_variable = { temp_clamped_num_ships = num_ships }
	clamp_temp_variable = {
		var = temp_clamped_num_ships
		max = 1
	}

	multiply_variable = { naval_industry_costs = temp_clamped_num_ships }

	set_variable = { naval_costs = 0 }

	set_variable = { num_carriers = num_ships_with_type@carrier }
	set_variable = { num_battleships = num_ships_with_type@battleship }
	set_variable = { num_cruisers = num_ships_with_type@cruiser }
	add_to_variable = { num_cruisers = num_ships_with_type@light_cruiser }
	add_to_variable = { num_cruisers = num_ships_with_type@heavy_cruiser }
	set_variable = { num_destroyers = num_ships_with_type@destroyer }
	set_variable = { num_frigate = num_ships_with_type@frigate }
	set_variable = { num_corvette = num_ships_with_type@corvette }
	set_variable = { num_submarine = num_ships_with_type@submarine }

	set_variable = { carrier_costs = num_carriers }
	set_variable = { battleship_costs = num_battleships }
	set_variable = { cruiser_costs = num_cruisers }
	set_variable = { destroyer_costs = num_destroyers }
	set_variable = { frigate_costs = num_frigate }
	set_variable = { corvette_costs = num_corvette }
	set_variable = { submarine_costs = num_submarine }

	multiply_variable = { carrier_costs = 0.041 }
	multiply_variable = { battleship_costs = 0.030 }
	multiply_variable = { cruiser_costs = 0.010 }
	multiply_variable = { destroyer_costs = 0.007 }
	multiply_variable = { frigate_costs = 0.005 }
	multiply_variable = { corvette_costs = 0.004 }
	multiply_variable = { submarine_costs = 0.002 }

	set_variable = { fleet_costs = carrier_costs }
	add_to_variable = { fleet_costs = battleship_costs }
	add_to_variable = { fleet_costs = cruiser_costs }
	add_to_variable = { fleet_costs = destroyer_costs }
	add_to_variable = { fleet_costs = frigate_costs }
	add_to_variable = { fleet_costs = corvette_costs }
	add_to_variable = { fleet_costs = submarine_costs }

	add_to_variable = { fleet_costs = naval_manpower_costs }

	add_to_variable = { naval_costs = fleet_costs }
	add_to_variable = { naval_costs = naval_industry_costs }
	multiply_variable = { naval_costs = modifier@naval_cost_modifier }

	#Boosts/Austerity
	set_variable = { naval_cost_slider_effect = econ_naval_expenditures_slider_pct }
	divide_variable = { naval_cost_slider_effect = 100 } # convert to 100%

	multiply_variable = { naval_cost_slider_effect = 0.8 }
	add_to_variable = { naval_cost_slider_effect = 0.2 }

	set_variable = { naval_costs_base = naval_costs }
	multiply_variable = { naval_industry_costs = naval_cost_slider_effect }
	multiply_variable = { naval_costs = naval_cost_slider_effect }
	multiply_variable = { naval_manpower_costs = naval_cost_slider_effect }
	multiply_variable = { naval_factory_costs = naval_cost_slider_effect }
	multiply_variable = { fleet_costs = naval_cost_slider_effect }

	multiply_variable = { naval_industry_costs = modifier@military_expenditures_factor }
	multiply_variable = { naval_costs = modifier@military_expenditures_factor }
	multiply_variable = { naval_manpower_costs = modifier@military_expenditures_factor }
	multiply_variable = { naval_factory_costs = modifier@military_expenditures_factor }
	multiply_variable = { fleet_costs = modifier@military_expenditures_factor }
	if = {
		limit = {
			has_country_flag = TNO_eliminate_military_spending
		}
		set_variable = { naval_costs = 0 }
	}
}

calculate_nuclear_expenditures = {
	# Costs per stockpiled warhead
	set_variable = { stockpile_costs = nuclear_stockpile }
	divide_variable = { stockpile_costs = 2500 }

	# Costs per active enrichment plant
	get_number_of_enrichment_plants = yes
	set_variable = { enrichment_plant_costs = num_of_enrichment_plants }
	multiply_variable = { enrichment_plant_costs = 0.05 }

	# Costs per active silo
	get_number_of_silos = yes
	set_variable = { silo_costs = num_of_silos }
	multiply_variable = { silo_costs = 0.025 }

	# Sliver value modifier
	set_variable = { nuclear_costs_slider_effect = econ_nuclear_expenditures_slider_value }
	divide_variable = { nuclear_costs_slider_effect = 40 }
	add_to_variable = { nuclear_costs_slider_effect = 0.75 }
	set_variable = { nuclear_costs_base = nuclear_costs }

	# Calculating new monthly warhead production based on the slider value
	if = {
		limit = { NOT = { has_country_flag = nuclear_decommissioning_active } }
		if = {
			limit = { check_variable = { TNO_stockpile^7 > 0 } } # Uranium stockpile
			set_variable = { nuclear_stockpile_change = num_of_enrichment_plants }
			multiply_variable = { nuclear_stockpile_change = 20 }
			multiply_variable = { nuclear_stockpile_change = nuclear_costs_slider_effect }
			set_temp_variable = { nuclear_prod_modifier = 1 }
			add_to_temp_variable = { nuclear_prod_modifier = modifier@nuclear_production_factor }
			multiply_variable = { nuclear_stockpile_change = nuclear_prod_modifier }
		}
		else = { set_variable = { nuclear_stockpile_change = 0 } } # No uranium, no production
	}

	multiply_variable = { stockpile_costs = nuclear_costs_slider_effect }
	multiply_variable = { enrichment_plant_costs = nuclear_costs_slider_effect }
	multiply_variable = { silo_costs = nuclear_costs_slider_effect }

	multiply_variable = { stockpile_costs = modifier@military_expenditures_factor }
	multiply_variable = { enrichment_plant_costs = modifier@military_expenditures_factor }
	multiply_variable = { silo_costs = modifier@military_expenditures_factor }

	# Adding it all up
	set_variable = { nuclear_costs = stockpile_costs }
	add_to_variable = { nuclear_costs = enrichment_plant_costs }
	add_to_variable = { nuclear_costs = silo_costs }
}

calculate_debt_expenditures = { # calculate how much we need to spend to service our debt this month
	set_variable = { interest_rates = base_interest_rates }
	add_to_variable = { interest_rates = interest_rate_from_credit_rating }
	add_to_variable = { interest_rates = modifier@interest_rate_modifier }
	set_temp_variable = { interest_rates_multiplier = 1 }
	add_to_temp_variable = { interest_rates_multiplier = modifier@interest_rate_factor_modifier }
	multiply_variable = { interest_rates = interest_rates_multiplier }


	#update some display variables
	set_variable = { interest_rate_display = interest_rates }
	set_variable = { monthly_interest_rate_display = interest_rate_display }
	divide_variable = { monthly_interest_rate_display = 12 }

	set_variable = { interest_rates_from_debt = national_debt } # a little math for debt levels to affect interest rates
	# log = "[?interest_rates_from_debt] interest rates from debt"
	divide_variable = { interest_rates_from_debt = GDP }
	divide_variable = { interest_rates_from_debt = 10 }
	set_temp_variable = { temp_credit_rating_interest_rate_effect = 1 }
	add_to_temp_variable = { temp_credit_rating_interest_rate_effect = credit_rating_interest_rates_from_debt }
	multiply_variable = { interest_rates_from_debt = temp_credit_rating_interest_rate_effect }

	add_to_variable = { interest_rates = interest_rates_from_debt }

	set_variable = { debt_servicing_expenditures = national_debt }
	multiply_variable = { debt_servicing_expenditures = interest_rates }
	divide_variable = { debt_servicing_expenditures = 100 }
	#log ="interest due this year is [?debt_servicing_expenditures]"
}

calculate_total_expenditures = {
	#add_country_specific_idea_costs = yes
	set_variable = { total_expenditures = civilian_expenditures }
	add_to_variable = { total_expenditures = military_expenditures }
	add_to_variable = { total_expenditures = debt_servicing_expenditures }
	#add_to_variable = { total_expenditures = misc_costs }
	#add_to_variable = { total_expenditures = modifier@misc_costs_modifier }

	set_variable = { misc_costs_flat = modifier@misc_costs_modifier }


	# do a little trolling with misc costs as a percent of GDP
	#set_variable = { misc_costs_relative = misc_costs_percent_of_GDP }
	set_variable = { misc_costs_relative = modifier@misc_costs_percent_of_GDP_modifier }
	multiply_variable = { misc_costs_relative = GDP }

	set_variable = { misc_costs_true = misc_costs_flat }
	add_to_variable = { misc_costs_true = misc_costs_relative }

	add_to_variable = { total_expenditures = misc_costs_true }


	set_variable = { military_expenditures_percent = military_expenditures }
	set_variable = { civilian_expenditures_percent = civilian_expenditures }
	set_variable = { debt_servicing_expenditures_percent = debt_servicing_expenditures }
	set_variable = { misc_expenditures_percent = misc_costs_true }

	divide_variable = { military_expenditures_percent = total_expenditures }
	divide_variable = { civilian_expenditures_percent = total_expenditures }
	divide_variable = { debt_servicing_expenditures_percent = total_expenditures }
	divide_variable = { misc_expenditures_percent = total_expenditures }

	multiply_variable = { military_expenditures_percent = 100 }
	multiply_variable = { civilian_expenditures_percent = 100 }
	multiply_variable = { debt_servicing_expenditures_percent = 100 }
	multiply_variable = { misc_expenditures_percent = 100 }

	round_variable = military_expenditures_percent
	round_variable = civilian_expenditures_percent
	round_variable = debt_servicing_expenditures_percent
	round_variable = misc_expenditures_percent

	set_temp_variable = { expenditures_validator = military_expenditures_percent }
	add_to_temp_variable = { expenditures_validator = civilian_expenditures_percent }
	add_to_temp_variable = { expenditures_validator = misc_expenditures_percent }
	add_to_temp_variable = { expenditures_validator = debt_servicing_expenditures_percent }
	#log ="[?expenditures_validator] expenditures validator"

	if = {
		limit = {
			NOT = {
				check_variable = { expenditures_validator = 100 }
			}
		}
		subtract_from_temp_variable = { expenditures_validator = 100 }
		subtract_from_variable = { civilian_expenditures_percent = expenditures_validator }
	}
	if = {
		limit = {
			has_country_flag = TNO_eliminate_military_spending
		}
		set_variable = { total_expenditures = 0 }
	}
}

calculate_total_expenditures_factor = {
	set_variable = { total_expenditures_factor = total_expenditures }
	divide_variable = { total_expenditures_factor = total_budget }
}

calculate_total_budget = {
	set_variable = { total_budget = total_expenditures }
	subtract_from_variable = { total_budget = total_income }
	# add_country_specific_idea_costs = yes
	#log ="Total spending for [THIS.GetTag] is [?total_expenditures]"
	#log ="Balance for [THIS.GetTag] is -[?total_budget]"

	#determine if there is a deficit or not lmao
	set_variable = { deficit = total_budget }
	#log ="[THIS.GetTag] has deficit of [?deficit]"
	# resolve_negative_cases = yes

	# apply effects of deficit monetization
	if = {
		limit = {
			check_variable = { deficit > -0.001 }
		}
		set_temp_variable = { deficit_monetization_inverse = 1 }
		set_variable = { deficit_monetization_pct = econ_deficit_monetization_slider_pct }
		divide_variable = { deficit_monetization_pct = 100 }
		subtract_from_temp_variable = { deficit_monetization_inverse = deficit_monetization_pct } # gets % of deficit that's actually being monetized

		set_variable = { deficit_monetization_as_percent_of_GDP = deficit }
		multiply_variable = { deficit = deficit_monetization_inverse } # multiplies total expenditures by % of deficit being monetized

		subtract_from_variable = { deficit_monetization_as_percent_of_GDP = deficit } # get amount of deficit that is being monetized
		multiply_variable = { deficit_monetization_as_percent_of_GDP = 100 }

		divide_variable = { deficit_monetization_as_percent_of_GDP = GDP } # get % of GDP that is being monetized as 100

		set_variable = { deficit_monetization_inflation_effect = deficit_monetization_as_percent_of_GDP }
		# we need some math here to make monetization suck oof ouch owie
	}
	else = { # monetizing more than the deficit is not allowed
		set_variable = { econ_deficit_monetization_slider_pct = 0 }
		set_variable = { econ_deficit_monetization_slider_dot_x = econ_deficit_monetization_minimal_pct } # Saves having to call update_econ_sliders again
		multiply_variable = { econ_deficit_monetization_slider_dot_x = 1.88 }
		add_to_variable = { econ_deficit_monetization_slider_dot_x = 45 }
		set_variable = { deficit_monetization_inflation_effect = 0 }
	}
}

calculate_nominal_GDP_growth = {
	#calculate nominal GDP growth (annual)
	set_variable = { GDP_growth_nominal_precursor = GDP_growth }
	add_to_variable = { GDP_growth_nominal_precursor = modifier@gdp_growth_modifier }
	add_to_variable = { GDP_growth_nominal_precursor = deficit_GDP_growth_effect }
	calculate_reserves_effect_on_GDP_growth = yes
	add_to_variable = { GDP_growth_nominal_precursor = reserves_effect_on_GDP_growth }
	#Guangdong Exclusive
	add_to_variable = { GDP_growth_nominal_precursor = GNG_rGDP_debuff }

	set_variable = { GDP_growth_multiplier = modifier@annual_gdp_growth_factor }

	calculate_infrastructure_nominal_gdp_effect = yes
	calculate_power_plant_nominal_gdp_effect = yes
	add_to_variable = { GDP_growth_multiplier = total_state_infrastructure_effect }
	add_to_variable = { GDP_growth_multiplier = total_state_power_plant_effect }
	add_to_variable = { GDP_growth_multiplier = total_state_damaged_infrastructure_effect }
	add_to_variable = { GDP_growth_multiplier = debt_effect_on_nominal_growth }
	calculate_population_growth_effect = yes
	add_to_variable = { GDP_growth_multiplier = population_growth_effect }
	calculate_tax_effect_on_nominal_growth = yes
	add_to_variable = { GDP_growth_multiplier = total_taxes_effect }
	calculate_trade_effect = yes
	add_to_variable = { GDP_growth_multiplier = trade_effect }

	if = {
		limit = {
			check_variable = { GDP_growth_nominal_precursor < 0 }
		}
		multiply_variable = { GDP_growth_multiplier = -1 }
	}
	add_to_variable = { GDP_growth_multiplier = 1 }
	set_variable = { GDP_growth_nominal_display_tt = GDP_growth_nominal_precursor }
	multiply_variable = { GDP_growth_nominal_precursor = GDP_growth_multiplier }
	set_variable = { GDP_growth_nominal = GDP_growth_nominal_precursor }
}

calculate_reserves_effect_on_GDP_growth = {
	set_temp_variable = { temp_reserves_effect = money_reserves }
	divide_temp_variable = { temp_reserves_effect = GDP }
	multiply_variable = { temp_reserves_effect = 100 }


	set_variable = { reserves_as_GDP_percent = temp_reserves_effect }

	set_temp_variable = { temp_reserves_effect_squarer = temp_reserves_effect }

	multiply_temp_variable = { temp_reserves_effect = temp_reserves_effect_squarer }
	multiply_temp_variable = { temp_reserves_effect = -25 }
	clamp_temp_variable = { var = temp_reserves_effect min = -15 }

	set_variable = { reserves_effect_on_GDP_growth = temp_reserves_effect }
}

calculate_trade_effect = {
	set_variable = { trade_effect_precursor = total_trade_value }
	if = {
		limit = {
			check_variable = { total_trade_value < 0 }
		}
		multiply_variable = { trade_effect_precursor = -1 }
	}
	divide_variable = { trade_effect_precursor = GDP }
	add_to_variable = { trade_effect_precursor = 2 }

	set_variable = { trade_effect = -1.5 }

	divide_variable = { trade_effect = trade_effect_precursor }
	add_to_variable = { trade_effect = 0.75 }
	if = {
		limit = {
			check_variable = { total_trade_value < 0 }
		}
		multiply_variable = { trade_effect = -1 }
	}
}

calculate_tax_effect_on_nominal_growth = {

	set_variable = { business_taxes_effect = business_tax_rate_total }
	multiply_variable = { business_taxes_effect = -0.4 } #balancing value!

	set_variable = { income_taxes_effect = income_tax_factor }
	multiply_variable = { income_taxes_effect = -0.35 } #balancing value!

	set_variable = { sales_taxes_effect = sales_tax_display }
	multiply_variable = { sales_taxes_effect = -0.25 } #balancing value!

	set_variable = { total_taxes_effect = business_taxes_effect }
	add_to_variable = { total_taxes_effect = income_taxes_effect }
	add_to_variable = { total_taxes_effect = sales_taxes_effect }
}

calculate_population_growth_effect = {
	set_variable = { population_growth_effect = modifier@monthly_population }
	add_to_variable = { population_growth_effect = 1 }
	multiply_variable = { population_growth_effect = 100 } # represent as 100 lel
	multiply_variable = { population_growth_effect = 1.5 } # this is how much the population will increase this year in percent
	clamp_variable = { var = population_growth_effect max = 0 }

	multiply_variable = { population_growth_effect = 0.005 }
}

calculate_infrastructure_nominal_gdp_effect = {
	set_variable = { total_state_infrastructure_effect = 0 }
	set_variable = { total_state_damaged_infrastructure_effect = 0 }
	set_temp_variable = { total_possible_infrastructure = 0 }
	set_temp_variable = { total_built_infrastructure = 0 }
	every_owned_state = {
		limit = {
			is_core_of = PREV
		}
		set_variable = { single_state_infrastructure_effect = non_damaged_building_level@infrastructure }
		multiply_variable = { single_state_infrastructure_effect = state_population_k }
		divide_variable = { single_state_infrastructure_effect = 10000 }
		add_to_variable = { PREV.total_state_infrastructure_effect = single_state_infrastructure_effect }

		add_to_temp_variable = { total_built_infrastructure = non_damaged_building_level@infrastructure }

		add_to_temp_variable = { total_possible_infrastructure = 10 }

		set_variable = { single_state_damaged_infrastructure_effect = damaged_building_level@infrastructure }
		multiply_variable = { single_state_damaged_infrastructure_effect = state_population_k }
		divide_variable = { single_state_damaged_infrastructure_effect = 10000 }
		add_to_variable = { PREV.total_state_damaged_infrastructure_effect = single_state_damaged_infrastructure_effect }

	}
	divide_variable = { total_state_infrastructure_effect = total_core_pop_m }

	divide_variable = { total_state_damaged_infrastructure_effect = total_core_pop_m }

	multiply_variable = { total_state_damaged_infrastructure_effect = -0.25 }

	set_variable = { total_infrastructure_built_in_core_state = total_built_infrastructure }

	set_variable = { total_possible_infrastructure_display_tt = total_possible_infrastructure }


	multiply_variable = { total_state_infrastructure_effect = 0.2 }
}

calculate_power_plant_nominal_gdp_effect = {
	set_variable = { total_state_power_plant_effect = 0 }
	set_variable = { total_powered_states = 0 }
	every_owned_state = {
		if = {
			limit = {
					check_variable = { non_damaged_building_level@thermoelectric_plant > 0 }
			}
			add_to_variable = { PREV.total_state_power_plant_effect = 1 }
			add_to_variable = { PREV.total_powered_states = 1 }
		}
		else_if = {
			limit = {
					check_variable = { non_damaged_building_level@nuclear_reactor > 0 }
			}
			add_to_variable = { PREV.total_state_power_plant_effect = 1 }
			add_to_variable = { PREV.total_powered_states = 1 }
		}
	}
	divide_variable = { total_state_power_plant_effect = num_owned_states }
	multiply_variable = { total_state_power_plant_effect = 0.025 }
}

calculate_total_inflation = {
	#calculate clamped inflation rate
	set_variable = { clamped_inflation_rate = 0 }
	add_to_variable = { clamped_inflation_rate = modifier@inflation_rate_modifier }
	add_to_variable = { clamped_inflation_rate = base_inflation_rate }
	add_to_variable = { clamped_inflation_rate = rubberband_inflation_rate }
	add_to_variable = { clamped_inflation_rate = deficit_monetization_inflation_effect }

	set_variable = { inflation_cycling_effect_adjusted = inflation_cycling_effect }

	add_to_variable = { clamped_inflation_rate = inflation_cycling_effect_adjusted }
	clamp_variable = {
		var = clamped_inflation_rate
		min = 0
	}
}

calculate_inflation_effect = {

	# \left(\frac{\left(x+10\right)^{3}}{1000+0.02\left(x+10\right)^{3}}\right)-1 <- inflation calc, roughly.

	set_temp_variable = { inflation_effect_calculation_cube_denominator = clamped_inflation_rate }

	add_to_temp_variable = { inflation_effect_calculation_cube_denominator = 10 }
	set_temp_variable = { inflation_effect_calculation_cube_denominator_cuber = inflation_effect_calculation_cube_denominator }

	multiply_temp_variable = { inflation_effect_calculation_cube_denominator = inflation_effect_calculation_cube_denominator_cuber }
	clamp_temp_variable = { var = inflation_effect_calculation_cube_denominator max = 1460 } # needed to avoid overflows
	multiply_temp_variable = { inflation_effect_calculation_cube_denominator = inflation_effect_calculation_cube_denominator_cuber }

	set_temp_variable = { inflation_effect_calculation_cube_numerator = inflation_effect_calculation_cube_denominator }


	multiply_temp_variable = { inflation_effect_calculation_cube_denominator = 0.02 }
	add_to_temp_variable = { inflation_effect_calculation_cube_denominator = 1000 }

	divide_temp_variable = { inflation_effect_calculation_cube_numerator = inflation_effect_calculation_cube_denominator }
	subtract_from_temp_variable = { inflation_effect_calculation_cube_numerator = 1 }

	divide_temp_variable = { inflation_effect_calculation_cube_numerator = -100 } #convert to % format

	set_variable = { TNO_econ_inflation_factory_output_penalty_display = inflation_effect_calculation_cube_numerator }
	set_variable = { TNO_econ_inflation_construction_speed_penalty_display = inflation_effect_calculation_cube_numerator }
	set_variable = { TNO_econ_inflation_consumer_goods_production_penalty_display = inflation_effect_calculation_cube_numerator }
}

GDP_rubberbanding_check = { #Reduce the effects of bonker growth by adding inflation and reducing growth
	if = {
		limit = {
			check_variable = { GDP_growth_real > 15 }
		}
		add_to_variable = { gdp_growth = -0.1 }
		if = {
			limit = { check_variable = { GDP > 50 } }
			add_to_variable = { gdp_growth = -0.2 }
		}
		if = {
			limit = { check_variable = { GDP > 150 } }
			add_to_variable = { gdp_growth = -0.3 }
		}
		if = {
			limit = { check_variable = { GDP > 250 } }
			add_to_variable = { gdp_growth = -0.5 }
		}
	}
	if = {
		limit = {
			check_variable = { GDP_growth_real > 12 }
		}
		set_temp_variable = { rand_growth_capper = random }
		multiply_temp_variable = { rand_growth_capper = 0.2 }
		add_to_variable = { rubberband_inflation_rate = rand_growth_capper }
		if = {
			limit = { check_variable = { GDP > 50 } }
			set_temp_variable = { rand_growth_capper = random }
			multiply_temp_variable = { rand_growth_capper = 0.3 }
			add_to_variable = { rubberband_inflation_rate = rand_growth_capper }
		}
		if = {
			limit = { check_variable = { GDP > 150 } }
			set_temp_variable = { rand_growth_capper = random }
			multiply_temp_variable = { rand_growth_capper = -0.15 }
			add_to_variable = { gdp_growth = rand_growth_capper }
		}
		if = {
			limit = { check_variable = { GDP > 250 } }
			set_temp_variable = { rand_growth_capper = random }
			multiply_temp_variable = { rand_growth_capper = -0.3 }
			add_to_variable = { gdp_growth = rand_growth_capper }
		}
	}

	set_temp_variable = { rand_growth_capper = random }
	multiply_temp_variable = { rand_growth_capper = 0.05 }
	add_to_variable = { rubberband_inflation_rate = rand_growth_capper }
	if = {
		limit = { check_variable = { GDP > 50 } }
		set_temp_variable = { rand_growth_capper = random }
		multiply_temp_variable = { rand_growth_capper = 0.08 }
		add_to_variable = { rubberband_inflation_rate = rand_growth_capper }
	}
	if = {
		limit = { check_variable = { GDP > 150 } }
		set_temp_variable = { rand_growth_capper = random }
		multiply_temp_variable = { rand_growth_capper = -0.05 }
		add_to_variable = { gdp_growth = rand_growth_capper }
	}
	if = {
		limit = { check_variable = { GDP > 250 } }
		set_temp_variable = { rand_growth_capper = random }
		multiply_temp_variable = { rand_growth_capper = -0.05 }
		add_to_variable = { gdp_growth = rand_growth_capper }
	}
}

apply_inflation_effect_month = {
	if = {
		limit = {
			has_variable = TNO_econ_inflation_effects_multiplier #Defaults to 1 if no value is set
		}
		multiply_variable = {
			TNO_econ_inflation_factory_output_penalty_display = ROOT.TNO_econ_inflation_effects_multiplier?1
		}
		multiply_variable = {
			TNO_econ_inflation_construction_speed_penalty_display = ROOT.TNO_econ_inflation_effects_multiplier?1
		}
		multiply_variable = {
			TNO_econ_inflation_consumer_goods_production_penalty_display = ROOT.TNO_econ_inflation_effects_multiplier?1
		}
	}
	set_variable = { TNO_econ_inflation_factory_output_penalty = TNO_econ_inflation_factory_output_penalty_display }
	set_variable = { TNO_econ_inflation_construction_speed_penalty = TNO_econ_inflation_construction_speed_penalty_display }
	set_variable = { TNO_econ_inflation_consumer_goods_production_penalty = TNO_econ_inflation_consumer_goods_production_penalty_display }
}

calculate_real_GDP_growth = {
	set_variable = { GDP_growth_real = GDP_growth_nominal }

	subtract_from_variable = { GDP_growth_real = clamped_inflation_rate }

	#calculate real GDP growth effect on poverty https://www.desmos.com/calculator/jkmbvkdtdh

	set_variable = { gdp_effect_on_poverty_precursor = GDP_growth_real }

	multiply_variable = { gdp_effect_on_poverty_precursor = 0.08 }
	subtract_from_variable = { gdp_effect_on_poverty_precursor = 2 }
	multiply_variable = { gdp_effect_on_poverty_precursor = 0.2 }

	set_variable = { gdp_effect_on_poverty = 1 }
	divide_variable = { gdp_effect_on_poverty = gdp_effect_on_poverty_precursor }
	add_to_variable = { gdp_effect_on_poverty = 2.55 }
	multiply_variable = { gdp_effect_on_poverty = -1 }

	set_temp_variable = { modifier_effect_on_gdp_effect_on_poverty = 1 }
	add_to_temp_variable = { modifier_effect_on_gdp_effect_on_poverty = modifier@GDP_effect_on_poverty_modifier }

	multiply_variable = { gdp_effect_on_poverty = modifier_effect_on_gdp_effect_on_poverty }

	if = {
		limit = {
			check_variable = { gdp_growth_real > 0 }
		}

		set_variable = { gdp_effect_on_poverty = 0 }
	}
}

resolve_spending = {
	# we already calculated deficit in effect calculate_total_budget - remember it is calculated as a positive value -> running a deficit for some reason

	#deficit is calculated for annual cycles, while monthly deficit is what is actually used for calculations (and is recalculated every month)

	set_temp_variable = { temp_monthly_deficit = deficit }
	divide_temp_variable = { temp_monthly_deficit = 12 }
	#log ="[?temp_monthly_deficit] is monthly deficit"
	if = { #if we're running a deficit, add the monthly deficit to the national debt

		limit = {
			has_country_flag = econ_debt_auto_payment
		}

		multiply_temp_variable = { temp_monthly_deficit = -1 } #make our surplus positive for sanity reasons
		if = {
			limit = {
				check_variable = { temp_monthly_deficit < national_debt } # if debt is larger than monthly surplus
			}
			#log ="subtracted [?temp_monthly_deficit] from national debt of [?national_debt] due to autopayment"
			subtract_from_variable = { national_debt = temp_monthly_deficit }
			#log ="subtracted [?temp_monthly_deficit] from national debt resulting in [?national_debt] due to autopayment"

		}
		else_if = {
			limit = {
				check_variable = { temp_monthly_deficit > national_debt }
			}

			subtract_from_temp_variable = { temp_monthly_deficit = national_debt }
			set_variable = { national_debt = 0 }
			add_to_variable = { money_reserves = temp_monthly_deficit }
		}
		else = {
			set_variable = { national_debt = 0 }
		}
	}

	else_if = {
		limit = {
			check_variable = { temp_monthly_deficit > 0 }
		}
		#log ="adding [?temp_monthly_deficit] deficit to national debt of [?national_debt]"
		add_to_variable = { national_debt = temp_monthly_deficit }
		#log ="added [?temp_monthly_deficit] deficit to national debt resulting in [?national_debt]
	}

	else = { # not running a deficit and not auto-paying off debt
		multiply_temp_variable = { temp_monthly_deficit = -1 }
		add_to_variable = { money_reserves = temp_monthly_deficit }
		#log ="added [?temp_monthly_deficit] to reserves due to no debt to pay off"
	}
}

resolve_negative_cases = {
	if = {
		limit = {
			check_variable = { ROOT.money_reserves < -1000.0 } #already converted to billion
		}
		set_variable = { money_reserves = 0.1 } #already converted to billion
		#log ="[GetDateText]: [THIS.GetName]: a pretty obvious overflow bug occured - money reserves reset to 100."
	}
	if = {
		limit = {
			check_variable = { ROOT.money_reserves < 0.0 } #already converted to billion
		}
		set_variable = { liquidinverter = 0 }
		subtract_from_variable = { liquidinverter = ROOT.money_reserves }
		add_to_variable = { national_debt = liquidinverter }
		set_variable = { ROOT.money_reserves = 0.0 } #already converted to billion
	}
	if = {
		limit = {
			check_variable = { ROOT.national_debt < -1000.0 } #already converted to billion
		}
		set_variable = { national_debt = 0.1 } #already converted to billion
		#log ="[GetDateText]: [THIS.GetName]: a pretty obvious overflow bug occured - national debt reset to 100."
	}
	if = {
		limit = {
			check_variable = { ROOT.national_debt < 0.0 } #already converted to billion
		}
		set_variable = { debtinverter = 0 }
		subtract_from_variable = { debtinverter = ROOT.national_debt }
		add_to_variable = { money_reserves = debtinverter }
		set_variable = { ROOT.national_debt = 0.0 } #already converted to billion
	}
	#if = {
	#	limit = {
	#		check_variable = { ROOT.GDP < 0.0 } #already converted to billion
	#	}
	#	set_variable = { GDP = 0.1 } #already converted to billion
	#}

	### Debt Ratio ### (done elsewhere)
	# set_variable = { debt_ratio = national_debt }
	# divide_variable = { debt_ratio = GDP }
}

autopay_reserves = {
	if = {

		limit = {
			has_country_flag = econ_debt_auto_payment
		}

		if = {
			limit = {
				check_variable = {
					var = money_reserves
					value = national_debt
					compare = less_than_or_equals
				}
			}
			subtract_from_variable = { national_debt = money_reserves }
			set_variable = { money_reserves = 0 }
			set_variable = { reserves_management_amount = 0 }
			else = {
				subtract_from_variable = { money_reserves = national_debt }
				set_variable = { national_debt = 0 }
				set_variable = { reserves_management_amount = 0 }
			}
		}
	}
}

calculate_minimum_army_size = {
	set_temp_variable = { twenty_percent_GDP = gdp }
	multiply_temp_variable = { twenty_percent_GDP = 0.20 }

	calculate_army_power = yes

	if = {
		limit = {
			check_variable = {
				var = army_power
				value = twenty_percent_GDP
				compare = less_than_or_equals
			}
		}
		set_variable = { army_size_percent_of_minimum = THIS.army_power }
		divide_variable = { army_size_percent_of_minimum = twenty_percent_GDP }

		set_temp_variable = { a = 20 }
		set_variable = { army_size_construction_speed_penalty = -20 }
		multiply_temp_variable = { a = army_size_percent_of_minimum }
		add_to_variable = { army_size_construction_speed_penalty = a }
		divide_variable = { army_size_construction_speed_penalty = 100 }

		set_temp_variable = { a = 0.5 }
		set_variable = { army_size_professionalism_penalty = -0.5 }
		multiply_temp_variable = { a = army_size_percent_of_minimum }
		add_to_variable = { army_size_professionalism_penalty = a }
		divide_variable = { army_size_professionalism_penalty = 100 }

		set_temp_variable = { a = 20 }
		set_variable = { army_size_fac_output_penalty = -20 }
		multiply_temp_variable = { a = army_size_percent_of_minimum }
		add_to_variable = { army_size_fac_output_penalty = a }
		divide_variable = { army_size_fac_output_penalty = 100 }
		add_dynamic_modifier = { modifier = below_minimum_army_size_dynmod }
	} else_if = {
		limit = { has_dynamic_modifier = { modifier = below_minimum_army_size_dynmod } }
		remove_dynamic_modifier = { modifier = below_minimum_army_size_dynmod }
	}
}

calculate_navy_size_effect = {
	if = {
		limit = {
			has_country_flag = HAS_ECON_SPHERE
		}

		calculate_total_sphere_trade_value = yes
		calculate_naval_power = yes

		set_temp_variable = { CorvetteRatio = 1 }
		divide_temp_variable = { CorvetteRatio = 7 }
		set_variable = { CorvetteScoreNeeded = total_trade_gross_value }
		multiply_variable = { CorvetteScoreNeeded = CorvetteRatio }

		set_variable = { CorvetteScoreFulfilledPercent = CorvetteScore }
		divide_variable = { CorvetteScoreFulfilledPercent = CorvetteScoreNeeded }
		clamp_variable = { var = CorvetteScoreFulfilledPercent min = 0 max = 1 }

		set_temp_variable = { FrigateRatio = 1 }
		divide_temp_variable = { FrigateRatio = 5 }
		set_variable = { FrigateScoreNeeded = total_trade_gross_value }
		multiply_variable = { FrigateScoreNeeded = FrigateRatio }

		set_variable = { FrigateScoreFulfilledPercent = FrigateScore }
		divide_variable = { FrigateScoreFulfilledPercent = FrigateScoreNeeded }
		clamp_variable = { var = FrigateScoreFulfilledPercent min = 0 max = 1 }

		set_temp_variable = { DestroyerRatio = 1 }
		divide_temp_variable = { DestroyerRatio = 6 }
		set_variable = { DestroyerScoreNeeded = total_trade_gross_value }
		multiply_variable = { DestroyerScoreNeeded = DestroyerRatio }

		set_variable = { DestroyerScoreFulfilledPercent = DestroyerScore }
		divide_variable = { DestroyerScoreFulfilledPercent = DestroyerScoreNeeded }
		clamp_variable = { var = DestroyerScoreFulfilledPercent min = 0 max = 1 }

		set_temp_variable = { CruiserRatio = 1 }
		divide_temp_variable = { CruiserRatio = 5 }
		set_variable = { CruiserScoreNeeded = total_trade_gross_value }
		multiply_variable = { CruiserScoreNeeded = CruiserRatio }

		set_variable = { CruiserScoreFulfilledPercent = CruiserScore }
		divide_variable = { CruiserScoreFulfilledPercent = CruiserScoreNeeded }
		clamp_variable = { var = CruiserScoreFulfilledPercent min = 0 max = 1 }

		set_temp_variable = { CarrierRatio = 1 }
		divide_temp_variable = { CarrierRatio = 8 }
		set_variable = { CarrierScoreNeeded = total_trade_gross_value }
		multiply_variable = { CarrierScoreNeeded = CarrierRatio }

		set_variable = { CarrierScoreFulfilledPercent = CarrierScore }
		divide_variable = { CarrierScoreFulfilledPercent = CarrierScoreNeeded }
		clamp_variable = { var = CarrierScoreFulfilledPercent min = 0 max = 1 }

		set_temp_variable = { BattleshipRatio = 1 }
		divide_temp_variable = { BattleshipRatio = 10 }
		set_variable = { BattleshipScoreNeeded = total_trade_gross_value }
		multiply_variable = { BattleshipScoreNeeded = BattleshipRatio }

		set_variable = { BattleshipScoreFulfilledPercent = BattleshipScore }
		divide_variable = { BattleshipScoreFulfilledPercent = BattleshipScoreNeeded }
		clamp_variable = { var = BattleshipScoreFulfilledPercent min = 0 max = 1 }

		# Effects from satisfaction of navy size
		if = {
			limit = { has_dlc = "Man the Guns" }
			set_temp_variable = { a = 0.30 }
			set_variable = { navy_size_trade_laws_effectiveness_effect = -0.15 }
			multiply_temp_variable = { a = CorvetteScoreFulfilledPercent }

			add_to_variable = { navy_size_trade_laws_effectiveness_effect = a }
			add_to_variable = { navy_size_trade_laws_effectiveness_effect = 1 }

			set_temp_variable = { a = 0.30 }
			set_variable = { navy_size_immigration_effectiveness_effect = -0.15 }
			multiply_temp_variable = { a = CorvetteScoreFulfilledPercent }
			add_to_variable = { navy_size_immigration_effectiveness_effect = a }
			add_to_variable = { navy_size_immigration_effectiveness_effect = 1 }
		}
		if = {
			limit = { NOT = { has_dlc = "Man the Guns" } }
			set_temp_variable = { a = 0.30 }
			set_variable = { navy_size_trade_laws_effectiveness_effect = -0.15 }
			multiply_temp_variable = { a = DestroyerScoreFulfilledPercent }

			add_to_variable = { navy_size_trade_laws_effectiveness_effect = a }
			add_to_variable = { navy_size_trade_laws_effectiveness_effect = 1 }

			set_temp_variable = { a = 0.30 }
			set_variable = { navy_size_immigration_effectiveness_effect = -0.15 }
			multiply_temp_variable = { a = FrigateScoreFulfilledPercent }
			add_to_variable = { navy_size_immigration_effectiveness_effect = a }
			add_to_variable = { navy_size_immigration_effectiveness_effect = 1 }
		}

		set_temp_variable = { a = 0.30 }
		set_variable = { navy_size_resources_gain = -0.1 }
		multiply_temp_variable = { a = FrigateScoreFulfilledPercent }
		add_to_variable = { navy_size_resources_gain = a }

		set_temp_variable = { a = 0.20 }
		set_variable = { navy_size_trade_opinion_factor_gain = -0.1 }
		multiply_temp_variable = { a = DestroyerScoreFulfilledPercent }
		add_to_variable = { navy_size_trade_opinion_factor_gain = a }

		set_temp_variable = { a = 0.20 }
		set_variable = { navy_size_pp_gain = -0.1 }
		multiply_temp_variable = { a = CruiserScoreFulfilledPercent }
		add_to_variable = { navy_size_pp_gain = a }

		set_temp_variable = { a = 0.15 }
		set_variable = { navy_size_air_mission_efficiency_gain = -0.05 }
		multiply_temp_variable = { a = CarrierScoreFulfilledPercent }
		add_to_variable = { navy_size_air_mission_efficiency_gain = a }

		set_temp_variable = { a = 0.10 }
		set_variable = { navy_size_party_popularity_stability_factor_gain = 0 }
		set_variable = { navy_size_war_support_factor_gain = 0 }
		multiply_temp_variable = { a = BattleshipScoreFulfilledPercent }
		add_to_variable = { navy_size_party_popularity_stability_factor_gain = a }
		add_to_variable = { navy_size_war_support_factor_gain = a }

		add_dynamic_modifier = { modifier = navy_size_dynmod }
	}
	else_if = {
		limit = { has_dynamic_modifier = { modifier = navy_size_dynmod } }
		clear_variable = navy_size_trade_laws_effectiveness_effect
		clear_variable = navy_size_immigration_effectiveness_effect
		remove_dynamic_modifier = { modifier = navy_size_dynmod }
	}
}

calculate_fielded_manpower = {
	#why can't we just have an army_manpower variable?
	#this gives you a rough estimate of how much manpower is in the field
	# this is gonna get replaced soon so be advised

	# ^ that spits out total fielded manpower including army, air, and navy!

	### LAM NOTE: the num_deployed_planes_with_type vars here seem to be CTDing the game on 1.15. very weird

	set_variable = { fighter_manpower_k = 0.02 }
	# multiply_variable = { fighter_manpower_k = num_deployed_planes_with_type@fighter_equipment }

	set_variable = { cv_fighter_manpower_k = 0.02 }
	# multiply_variable = { cv_fighter_manpower_k = num_deployed_planes_with_type@cv_fighter_equipment }

	set_variable = { light_stealth_manpower_k = 0.04 }
	# multiply_variable = { light_stealth_manpower_k = num_deployed_planes_with_type@light_stealth_equipment }

	set_variable = { cas_manpower_k = 0.02 }
	# multiply_variable = { cas_manpower_k = num_deployed_planes_with_type@CAS_equipment }

	set_variable = { cv_cas_manpower_k = 0.02 }
	# multiply_variable = { cv_cas_manpower_k = num_deployed_planes_with_type@cv_CAS_equipment }

	set_variable = { mca_manpower_k = 0.02 }
	# multiply_variable = { mca_manpower_k = num_deployed_planes_with_type@mca_equipment }

	set_variable = { cv_mca_manpower_k = 0.04 }
	# multiply_variable = { cv_mca_manpower_k = num_deployed_planes_with_type@cv_mca_equipment }

	set_variable = { interceptor_manpower_k = 0.02 }
	# multiply_variable = { interceptor_manpower_k = num_deployed_planes_with_type@interceptor_equipment }

	set_variable = { asw_helicopter_manpower_k = 0.01 }
	# multiply_variable = { asw_helicopter_manpower_k = num_deployed_planes_with_type@asw_helicopter_equipment }

	# set_variable = { nav_bomber_manpower_k = 0.02 }
	# multiply_variable = { nav_bomber_manpower_k = num_deployed_planes_with_type@nav_bomber_equipment }

	# set_variable = { cv_nav_bomber_manpower_k = 0.02 }
	# multiply_variable = { cv_nav_bomber_manpower_k = num_deployed_planes_with_type@cv_nav_bomber_equipment }

	set_variable = { scout_plane_manpower_k = 0.04 }
	# multiply_variable = { scout_plane_manpower_k = num_deployed_planes_with_type@scout_plane_equipment }

	set_variable = { tac_bomber_manpower_k = 0.04 }
	# multiply_variable = { tac_bomber_manpower_k = num_deployed_planes_with_type@tac_bomber_equipment }

	set_variable = { tac_stealth_manpower_k = 0.06 }
	# multiply_variable = { tac_stealth_manpower_k = num_deployed_planes_with_type@tac_stealth_equipment }

	set_variable = { strat_bomber_manpower_k = 0.08 }
	# multiply_variable = { strat_bomber_manpower_k = num_deployed_planes_with_type@strat_bomber_equipment }

	set_variable = { strat_stealth_manpower_k = 0.1 }
	# multiply_variable = { strat_stealth_manpower_k = num_deployed_planes_with_type@strat_stealth_equipment }

	set_variable = { transport_plane_manpower_k = 0.08 }
	# multiply_variable = { transport_plane_manpower_k = num_deployed_planes_with_type@transport_plane_equipment }

	set_variable = { gunship_manpower_k = 0.04 }
	# multiply_variable = { gunship_manpower_k = num_deployed_planes_with_type@gunship_equipment }

	set_variable = { airforce_fielded_manpower_k = 0 }

	add_to_variable = { airforce_fielded_manpower_k = fighter_manpower_k }
	#do not do cv fighters as this is navy stuff
	add_to_variable = { airforce_fielded_manpower_k = light_stealth_manpower_k }
	add_to_variable = { airforce_fielded_manpower_k = cas_manpower_k }
	# do not do CV cas as this is naval stuff
	add_to_variable = { airforce_fielded_manpower_k = mca_manpower_k }
	# do not do cv MCA as this is naval stuff
	add_to_variable = { airforce_fielded_manpower_k = interceptor_manpower_k }
	# do not do ASW helicopters, naval stuff
	# DON'T do naval bombers, navy
	# ditto ^ for CV
	add_to_variable = { airforce_fielded_manpower_k = scout_plane_manpower_k }
	add_to_variable = { airforce_fielded_manpower_k = tac_bomber_manpower_k }
	add_to_variable = { airforce_fielded_manpower_k = tac_stealth_manpower_k }
	add_to_variable = { airforce_fielded_manpower_k = strat_bomber_manpower_k }
	add_to_variable = { airforce_fielded_manpower_k = strat_stealth_manpower_k }
	add_to_variable = { airforce_fielded_manpower_k = transport_plane_manpower_k }
	add_to_variable = { airforce_fielded_manpower_k = gunship_manpower_k }

	set_variable = { naval_aviation_fielded_manpower_k = cv_fighter_manpower_k }
	add_to_variable = { naval_aviation_fielded_manpower_k = cv_cas_manpower_k }
	add_to_variable = { naval_aviation_fielded_manpower_k = cv_MCA_manpower_k }
	add_to_variable = { naval_aviation_fielded_manpower_k = asw_helicopter_manpower_k }
	add_to_variable = { naval_aviation_fielded_manpower_k = nav_bomber_manpower_k }
	add_to_variable = { naval_aviation_fielded_manpower_k = cv_nav_bomber_manpower_k }

	set_variable = { total_airforce_fielded_manpower_k = airforce_fielded_manpower_k }

	if = {
		limit = {
			check_variable = { num_ships_with_type@carrier > 0 }
		}
		add_to_variable = { total_airforce_fielded_manpower_k = naval_aviation_fielded_manpower_k }
		set_variable = { total_naval_manpower_fielded_k = 0 }
	}
	else = {
		set_variable = { total_naval_manpower_fielded_k = naval_aviation_fielded_manpower_k }
	}


	# now it's time to do the navy crap

	set_variable = { corvette_manpower_k = 0.010 }
	multiply_variable = { corvette_manpower_k = num_ships_with_type@corvette }

	set_variable = { frigate_manpower_k = 0.020 }
	multiply_variable = { frigate_manpower_k = num_ships_with_type@frigate }

	set_variable = { destroyer_manpower_k = 0.035 }
	multiply_variable = { destroyer_manpower_k = num_ships_with_type@destroyer }

	set_variable = { cruiser_manpower_k = 0.125 }
	multiply_variable = { cruiser_manpower_k = num_ships_with_type@cruiser }

	set_variable = { battleship_manpower_k = 0.800 }
	multiply_variable = { battleship_manpower_k = num_ships_with_type@battleship }

	set_variable = { carrier_manpower_k = 1.2 }
	multiply_variable = { carrier_manpower_k = num_ships_with_type@carrier }

	set_variable = { submarine_manpower_k = 0.010 }
	multiply_variable = { submarine_manpower_k = num_ships_with_type@submarine }

	add_to_variable = { total_naval_manpower_fielded_k = corvette_manpower_k }
	add_to_variable = { total_naval_manpower_fielded_k = frigate_manpower_k }
	add_to_variable = { total_naval_manpower_fielded_k = destroyer_manpower_k }
	add_to_variable = { total_naval_manpower_fielded_k = cruiser_manpower_k }
	add_to_variable = { total_naval_manpower_fielded_k = battleship_manpower_k }
	add_to_variable = { total_naval_manpower_fielded_k = carrier_manpower_k }
	add_to_variable = { total_naval_manpower_fielded_k = submarine_manpower_k }

	set_variable = { army_fielded_manpower_k = 0 }

	set_variable = { anti_tank_manpower_k = 0.4 }
	multiply_variable = { anti_tank_manpower_k = num_battalions_with_type@anti_tank }
	add_to_variable = { army_fielded_manpower_k = anti_tank_manpower_k }

	set_variable = { anti_tank_brigade_manpower_k = 1 }
	multiply_variable = { anti_tank_brigade_manpower_k = num_battalions_with_type@anti_tank_brigade }
	add_to_variable = { army_fielded_manpower_k = anti_tank_brigade_manpower_k }

	set_variable = { mot_anti_tank_brigade_manpower_k = 0.5 }
	multiply_variable = { mot_anti_tank_brigade_manpower_k = num_battalions_with_type@mot_anti_tank_brigade }
	add_to_variable = { army_fielded_manpower_k = mot_anti_tank_brigade_manpower_k }

	set_variable = { anti_air_manpower_k = 0.3 }
	multiply_variable = { anti_air_manpower_k = num_battalions_with_type@anti_air }
	add_to_variable = { army_fielded_manpower_k = anti_air_manpower_k }

	set_variable = { laser_anti_air_manpower_k = 0.25 }
	multiply_variable = { laser_anti_air_manpower_k = num_battalions_with_type@laser_anti_air }
	add_to_variable = { army_fielded_manpower_k = laser_anti_air_manpower_k }

	set_variable = { APC_manpower_k = 1.2 }
	multiply_variable = { APC_manpower_k = num_battalions_with_type@APC }
	add_to_variable = { army_fielded_manpower_k = APC_manpower_k }

	set_variable = { artillery_brigade_manpower_k = 0.5 }
	multiply_variable = { artillery_brigade_manpower_k = num_battalions_with_type@artillery_brigade }
	add_to_variable = { army_fielded_manpower_k = artillery_brigade_manpower_k }

	set_variable = { mot_artillery_brigade_manpower_k = 0.5 }
	multiply_variable = { mot_artillery_brigade_manpower_k = num_battalions_with_type@mot_artillery_brigade }
	add_to_variable = { army_fielded_manpower_k = mot_artillery_brigade_manpower_k }

	set_variable = { artillery_manpower_k = 0.3 }
	multiply_variable = { artillery_manpower_k = num_battalions_with_type@artillery }
	add_to_variable = { army_fielded_manpower_k = artillery_manpower_k }

	set_variable = { cavalry_manpower_k = 0.3 }
	multiply_variable = { cavalry_manpower_k = num_battalions_with_type@cavalry }
	add_to_variable = { army_fielded_manpower_k = cavalry_manpower_k }

	set_variable = { field_hospital_manpower_k = 0.3 }
	multiply_variable = { field_hospital_manpower_k = num_battalions_with_type@field_hospital }
	add_to_variable = { army_fielded_manpower_k = field_hospital_manpower_k }


	set_variable = { garrison_manpower_k = 1 }
	multiply_variable = { garrison_manpower_k = num_battalions_with_type@garrison }
	add_to_variable = { army_fielded_manpower_k = garrison_manpower_k }

	# set_variable = { heavy_armor_manpower_k = 0.5 }
	# multiply_variable = { heavy_armor_manpower_k = num_battalions_with_type@heavy_armor }
	# add_to_variable = { army_fielded_manpower_k = heavy_armor_manpower_k }

	set_variable = { scout_helicopter_company_manpower_k = 0.3 }
	multiply_variable = { scout_helicopter_company_manpower_k = num_battalions_with_type@scout_helicopter_company }
	add_to_variable = { army_fielded_manpower_k = scout_helicopter_company_manpower_k }

	set_variable = { transport_helicopter_company_manpower_k = 0.3 }
	multiply_variable = { transport_helicopter_company_manpower_k = num_battalions_with_type@transport_helicopter_company }
	add_to_variable = { army_fielded_manpower_k = transport_helicopter_company_manpower_k }

	set_variable = { attack_helicopter_company_manpower_k = 0.6 }
	multiply_variable = { attack_helicopter_company_manpower_k = num_battalions_with_type@attack_helicopter_company }
	add_to_variable = { army_fielded_manpower_k = attack_helicopter_company_manpower_k }

	set_variable = { IFV_manpower_k = 0.5 }
	multiply_variable = { IFV_manpower_k = num_battalions_with_type@IFV }
	add_to_variable = { army_fielded_manpower_k = IFV_manpower_k }

	set_variable = { infantry_manpower_k = 1 }
	multiply_variable = { infantry_manpower_k = num_battalions_with_type@infantry }
	add_to_variable = { army_fielded_manpower_k = infantry_manpower_k }

	set_variable = { light_infantry_manpower_k = 0.8 }
	multiply_variable = { light_infantry_manpower_k = num_battalions_with_type@light_infantry }
	add_to_variable = { army_fielded_manpower_k = light_infantry_manpower_k }

	set_variable = { elite_infantry_manpower_k = 1 }
	multiply_variable = { elite_infantry_manpower_k = num_battalions_with_type@elite_infantry }
	add_to_variable = { army_fielded_manpower_k = elite_infantry_manpower_k }

	set_variable = { marine_manpower_k = 1 }
	multiply_variable = { marine_manpower_k = num_battalions_with_type@marine }
	add_to_variable = { army_fielded_manpower_k = marine_manpower_k }

	set_variable = { mountaineers_manpower_k = 1 }
	multiply_variable = { mountaineers_manpower_k = num_battalions_with_type@mountaineers }
	add_to_variable = { army_fielded_manpower_k = mountaineers_manpower_k }

	set_variable = { motorized_manpower_k = 1.2 }
	multiply_variable = { motorized_manpower_k = num_battalions_with_type@motorized }
	add_to_variable = { army_fielded_manpower_k = motorized_manpower_k }

	set_variable = { kugelpanzer_manpower_k = 0.5 }
	multiply_variable = { kugelpanzer_manpower_k = num_battalions_with_type@kugelpanzer }
	add_to_variable = { army_fielded_manpower_k = kugelpanzer_manpower_k }

	# set_variable = { light_armor_manpower_k = 0.5 }
	# multiply_variable = { light_armor_manpower_k = num_battalions_with_type@light_armor }
	# add_to_variable = { army_fielded_manpower_k = light_armor_manpower_k }

	set_variable = { logistics_company_manpower_k = 0.5 }
	multiply_variable = { logistics_company_manpower_k = num_battalions_with_type@logistics_company }
	add_to_variable = { army_fielded_manpower_k = logistics_company_manpower_k }

	set_variable = { transport_helicopter_supply_company_manpower_k = 0.5 }
	multiply_variable = { transport_helicopter_supply_company_manpower_k = num_battalions_with_type@transport_helicopter_supply_company }
	add_to_variable = { army_fielded_manpower_k = transport_helicopter_supply_company_manpower_k }

	set_variable = { maintenance_company_manpower_k = 0.5 }
	multiply_variable = { maintenance_company_manpower_k = num_battalions_with_type@maintenance_company }
	add_to_variable = { army_fielded_manpower_k = maintenance_company_manpower_k }

	set_variable = { maus_manpower_k = 0.6 }
	multiply_variable = { maus_manpower_k = num_battalions_with_type@maus }
	add_to_variable = { army_fielded_manpower_k = maus_manpower_k }

	set_variable = { flakmaus_manpower_k = 0.6 }
	multiply_variable = { flakmaus_manpower_k = num_battalions_with_type@flakmaus }
	add_to_variable = { army_fielded_manpower_k = flakmaus_manpower_k }

	set_variable = { MBT_manpower_k = 0.5 }
	multiply_variable = { MBT_manpower_k = num_battalions_with_type@MBT }
	add_to_variable = { army_fielded_manpower_k = MBT_manpower_k }

	# set_variable = { medium_armor_manpower_k = 0.5 }
	# multiply_variable = { medium_armor_manpower_k = num_battalions_with_type@medium_armor }
	# add_to_variable = { army_fielded_manpower_k = medium_armor_manpower_k }

	set_variable = { military_police_manpower_k = 0.5 }
	multiply_variable = { military_police_manpower_k = num_battalions_with_type@military_police }
	add_to_variable = { army_fielded_manpower_k = military_police_manpower_k }

	# set_variable = { modern_armor_manpower_k = 0.5 }
	# multiply_variable = { modern_armor_manpower_k = num_battalions_with_type@modern_armor }
	# add_to_variable = { army_fielded_manpower_k = modern_armor_manpower_k }

	set_variable = { engineer_manpower_k = 0.3 }
	multiply_variable = { engineer_manpower_k = num_battalions_with_type@engineer }
	add_to_variable = { army_fielded_manpower_k = engineer_manpower_k }

	set_variable = { mbt_engineer_manpower_k = 0.3 }
	multiply_variable = { mbt_engineer_manpower_k = num_battalions_with_type@mbt_engineer }
	add_to_variable = { army_fielded_manpower_k = mbt_engineer_manpower_k }

	set_variable = { air_assault_manpower_k = 0.8 }
	multiply_variable = { air_assault_manpower_k = num_battalions_with_type@air_assault }
	add_to_variable = { army_fielded_manpower_k = air_assault_manpower_k }

	set_variable = { recon_manpower_k = 0.5 }
	multiply_variable = { recon_manpower_k = num_battalions_with_type@recon }
	add_to_variable = { army_fielded_manpower_k = recon_manpower_k }

	set_variable = { mot_recon_manpower_k = 0.5 }
	multiply_variable = { mot_recon_manpower_k = num_battalions_with_type@mot_recon }
	add_to_variable = { army_fielded_manpower_k = mot_recon_manpower_k }

	set_variable = { AC_recon_manpower_k = 0.5 }
	multiply_variable = { AC_recon_manpower_k = num_battalions_with_type@AC_recon }
	add_to_variable = { army_fielded_manpower_k = AC_recon_manpower_k }

	set_variable = { IFV_recon_manpower_k = 0.5 }
	multiply_variable = { IFV_recon_manpower_k = num_battalions_with_type@IFV_recon }
	add_to_variable = { army_fielded_manpower_k = IFV_recon_manpower_k }

	set_variable = { MBT_recon_manpower_k = 0.5 }
	multiply_variable = { MBT_recon_manpower_k = num_battalions_with_type@MBT_recon }
	add_to_variable = { army_fielded_manpower_k = MBT_recon_manpower_k }

	set_variable = { signal_company_recon_manpower_k = 0.5 }
	multiply_variable = { signal_company_recon_manpower_k = num_battalions_with_type@signal_company }
	add_to_variable = { army_fielded_manpower_k = signal_company_recon_manpower_k }

	set_variable = { light_sp_anti_air_brigade_manpower_k = 0.5 }
	multiply_variable = { light_sp_anti_air_brigade_manpower_k = num_battalions_with_type@light_sp_anti_air_brigade }
	add_to_variable = { army_fielded_manpower_k = light_sp_anti_air_brigade_manpower_k }

	set_variable = { sp_anti_air_brigade_manpower_k = 0.5 }
	multiply_variable = { sp_anti_air_brigade_manpower_k = num_battalions_with_type@sp_anti_air_brigade }
	add_to_variable = { army_fielded_manpower_k = sp_anti_air_brigade_manpower_k }

	set_variable = { light_sp_artillery_brigade_manpower_k = 0.5 }
	multiply_variable = { light_sp_artillery_brigade_manpower_k = num_battalions_with_type@light_sp_artillery_brigade }
	add_to_variable = { army_fielded_manpower_k = light_sp_artillery_brigade_manpower_k }

	set_variable = { sp_artillery_brigade_manpower_k = 0.5 }
	multiply_variable = { sp_artillery_brigade_manpower_k = num_battalions_with_type@sp_artillery_brigade }
	add_to_variable = { army_fielded_manpower_k = sp_anti_air_brigade_manpower_k }

	# set_variable = { super_heavy_armor_manpower_k = 0.5 }
	# multiply_variable = { super_heavy_armor_manpower_k = num_battalions_with_type@super_heavy_armor }
	# add_to_variable = { army_fielded_manpower_k = super_heavy_armor_manpower_k }

	set_variable = { manpower_costs = army_fielded_manpower_k }
	multiply_variable = { manpower_costs = gdpc }
	multiply_variable = { manpower_costs = 0.003 }
	multiply_variable = { manpower_costs = modifier@personnel_cost_modifier }
	multiply_variable = { manpower_costs = modifier@personnel_cost_factor_modifier }

	set_variable = { airforce_manpower_costs = total_airforce_fielded_manpower_k }
	multiply_variable = { airforce_manpower_costs = gdpc }
	multiply_variable = { airforce_manpower_costs = 0.010 }
	multiply_variable = { airforce_manpower_costs = modifier@personnel_cost_modifier }
	multiply_variable = { airforce_manpower_costs = modifier@personnel_cost_factor_modifier }

	set_variable = { naval_manpower_costs = total_naval_manpower_fielded_k }
	multiply_variable = { naval_manpower_costs = gdpc }
	multiply_variable = { naval_manpower_costs = 0.008 } # a little trolling
	multiply_variable = { naval_manpower_costs = modifier@personnel_cost_modifier }
	multiply_variable = { naval_manpower_costs = modifier@personnel_cost_factor_modifier }

}


#These variables are just here to look pretty, and not have a billion places after numbers
#i.e. they're purely for display so if they overflow sometimes that's ok it's just life
calculate_display_variables = {
	set_variable = { GDP_trillion = GDP }
	set_variable = { GDP_million = GDP }
	set_variable = { total_budget_trillion = total_budget }
	set_variable = { total_budget_million = total_budget }
	set_variable = { total_expenditures_trillion = total_expenditures }
	set_variable = { total_expenditures_million = total_expenditures }
	set_variable = { civilian_expenditures_trillion = civilian_expenditures }
	set_variable = { civilian_expenditures_million = civilian_expenditures }
	set_variable = { military_expenditures_trillion = military_expenditures }
	set_variable = { military_expenditures_million = military_expenditures }
	set_variable = { money_reserves_trillion = money_reserves }
	set_variable = { money_reserves_million = money_reserves }
	set_variable = { national_debt_trillion = national_debt }
	set_variable = { national_debt_million = national_debt }
	set_variable = { deficit_trillion = deficit }
	set_variable = { deficit_million = deficit }
	set_variable = { manpower_costs_trillion = manpower_costs }
	set_variable = { manpower_costs_million = manpower_costs }
	set_variable = { military_factory_costs_trillion = military_factory_costs }
	set_variable = { military_factory_costs_million = military_factory_costs }
	set_variable = { misc_costs_trillion = misc_costs }
	add_to_variable = { misc_costs_trillion = modifier@misc_costs_modifier }
	set_variable = { misc_costs_million = misc_costs }
	add_to_variable = { misc_costs_million = modifier@misc_costs_modifier }
	set_variable = { misc_income_trillion = misc_income }
	add_to_variable = { misc_income_trillion = modifier@misc_income_modifier }
	set_variable = { misc_income_million = misc_income }
	add_to_variable = { misc_income_million = modifier@misc_income_modifier }
	set_variable = { annual_debt_payments_million = annual_debt_payments }
	set_variable = { annual_debt_payments_trillion = annual_debt_payments }

	set_variable = { COMECON_collective_defense_value_trillion = misc_costs }
	add_to_variable = { COMECON_collective_defense_value_trillion = modifier@misc_costs_modifier }
	set_variable = { COMECON_collective_defense_value_million = misc_costs }
	add_to_variable = { COMECON_collective_defense_value_million = modifier@misc_costs_modifier }
	set_variable = { COMECON_monetary_fund_value_trillion = misc_costs }
	add_to_variable = { COMECON_monetary_fund_value_trillion = modifier@misc_costs_modifier }
	set_variable = { COMECON_monetary_fund_value_million = misc_costs }
	add_to_variable = { COMECON_monetary_fund_value_million = modifier@misc_costs_modifier }

	multiply_variable = { GDP_trillion = 0.001 }
	multiply_variable = { GDP_million = 1000 }
	multiply_variable = { total_budget_trillion = 0.001 }
	multiply_variable = { total_budget_million = 1000 }
	multiply_variable = { total_expenditures_trillion = 0.001 }
	multiply_variable = { total_expenditures_million = 1000 }
	multiply_variable = { civilian_expenditures_trillion = 0.001 }
	multiply_variable = { civilian_expenditures_million = 1000 }
	multiply_variable = { military_expenditures_trillion = 0.001 }
	multiply_variable = { military_expenditures_million = 1000 }
	multiply_variable = { money_reserves_trillion = 0.001 }
	multiply_variable = { money_reserves_million = 1000 }
	multiply_variable = { national_debt_trillion = 0.001 }
	multiply_variable = { national_debt_million = 1000 }
	multiply_variable = { deficit_trillion = 0.001 }
	multiply_variable = { deficit_million = 1000 }
	multiply_variable = { manpower_costs_trillion = 0.001 }
	multiply_variable = { manpower_costs_million = 1000 }
	multiply_variable = { military_factory_costs_trillion = 0.001 }
	multiply_variable = { military_factory_costs_million = 1000 }
	multiply_variable = { misc_costs_trillion = 0.001 }
	multiply_variable = { misc_costs_million = 1000 }
	multiply_variable = { misc_income_trillion = 0.001 }
	multiply_variable = { misc_income_million = 1000 }
	multiply_variable = { annual_debt_payments_trillion = 0.001 }
	multiply_variable = { annual_debt_payments_million = 1000 }

	multiply_variable = { COMECON_collective_defense_value_trillion = 0.001 }
	multiply_variable = { COMECON_collective_defense_value_million = 1000 }
	multiply_variable = { COMECON_monetary_fund_value_trillion = 0.001 }
	multiply_variable = { COMECON_monetary_fund_value_million = 1000 }


	#calculate monthly real GDP growth for display purposes

	set_variable = { GDP_growth_real_monthly = GDP_growth_real }
	divide_variable = { GDP_growth_real_monthly = 12 }

	set_variable = { GDP_growth_real_monthly_number = GDP_growth_real_monthly }
	multiply_variable = { GDP_growth_real_monthly_number = GDP }
	divide_variable = { GDP_growth_real_monthly_number = 100 }

	#central bank policies
	if = {
		limit = { check_variable = { selected_central_bank_id = 0 } }
		set_variable = { central_bank_effectiveness_display = central_bank_effectiveness_0 }
	}
	else_if = {
		limit = { check_variable = { selected_central_bank_id = 1 } }
		set_variable = { central_bank_effectiveness_display = central_bank_effectiveness_1 }
	}
	else_if = {
		limit = { check_variable = { selected_central_bank_id = 2 } }
		set_variable = { central_bank_effectiveness_display = central_bank_effectiveness_2 }
	}
	else_if = {
		limit = { check_variable = { selected_central_bank_id = 3 } }
		set_variable = { central_bank_effectiveness_display = central_bank_effectiveness_3 }
	}

	multiply_variable = { central_bank_effectiveness_display = 100 }
	round_variable = central_bank_effectiveness_display
}

#Covert money reserves to GDP at a 1:2 ratio
invest_money_reserves = {
	set_temp_variable = { temp_money_reserves = money_reserves }
	multiply_temp_variable = { temp_money_reserves = 0.001 } #already converted to billion
	add_to_variable = { GDP = temp_money_reserves }
	set_variable = { money_reserves = 0.0 } #already converted to billion
}

#using your money reserves to pay off any debt you have
money_reserves_to_debt = {
	subtract_from_variable = { national_debt = money_reserves }
	if = {
		limit = { check_variable = { national_debt < 0.0 } } #more reserves than national debt #already converted to billion
		set_variable = { money_reserves = national_debt }
		multiply_variable = { money_reserves = -0.001 } #already converted to billion
		set_variable = { national_debt = 0.0 } #already converted to billion
	}
	else = {
		set_variable = { money_reserves = 0.0 } #already converted to billion
	}
}

# Startup econ system
TNO_startup_econ_type = {

	#economic type setting default
	if = {
		limit = { check_variable = { TNO_economy_type = 0 } }

		if = {
			limit = {
				OR = {
					has_government = socialist
					has_government = communist
					has_government = despotism
					has_government = ultranationalism
				}
			}
			set_variable = { TNO_economy_type = token:Econ_Type_Planned }
		}
		else_if = {
			limit = {
				OR = {
					has_government = fascism
					has_government = national_socialism
				}
			}
			set_variable = { TNO_economy_type = token:Econ_Type_Corporatism }
		}
		else = {
			set_variable = { TNO_economy_type = token:Econ_Type_Capitalism }
		}
	}
	if = {
		limit = {
			check_variable = { economic_centralization = 0 } #if you have an exception, put the change after
		}
		set_variable = { economic_centralization = 50 }
	}
	#dynmods
	if = {
		limit = { check_variable = { TNO_economy_type = token:Econ_Type_Planned } }
		add_dynamic_modifier = { modifier = TNO_economy_type_planned_dynamic_modifier } #Planned (nerds)
	}
	else_if = {
		limit = { check_variable = { TNO_economy_type = token:Econ_Type_Corporatism } }
		add_dynamic_modifier = { modifier = TNO_economy_type_corporatism_dynamic_modifier } #Corpos (mean)
	}
	else = {
		add_dynamic_modifier = { modifier = TNO_economy_type_capitalism_dynamic_modifier } #Crapitalists
	}
}

#determines the economy ideology bar progress (note: not actually a progressbartype)
update_econ_centralization_pos = {
	round_variable = economic_centralization
	clamp_variable = { var = economic_centralization min = 0 max = 100 }
}

#A purely visual update, for whenever you change things/open the econ tab
update_economy_tab = {
	hidden_effect = {
		update_econ_sliders = yes
		economic_centralization_calculation = yes
		calculate_funding_effects_display = yes
		calculate_total_income = yes
		calculate_civilian_expenditures = yes
		calculate_military_expenditures = yes
		calculate_debt_expenditures = yes
		calculate_total_expenditures = yes
		validate_maximal_minimal_positions = yes
		calculate_total_budget = yes #includes deficit calculation

		update_all_econ_pie_charts = yes

		econ_rerender_gdp_graph = yes
		econ_rerender_debt_graph = yes

		TNO_update_policy_effectiveness = yes #I don't think this is actually needed any more. Maybe it is. Hopefully it isn't.... # Spoilers, it's necessary because funding effects are done at the end of the month by laws and we need to update that
		calculate_deficit_to_GDP_ratio = yes
		calculate_debt_to_GDP_ratio = yes
		calculate_deficit_to_debt_ratio = yes
		calculate_deficit_effects_display = yes
		calculate_debt_ceiling = yes
		calculate_debt_effect_on_GDP_growth = yes

		calculate_nominal_GDP_growth = yes

		#calculate_central_bank_effect = yes
		calculate_total_inflation = yes
		calculate_real_gdp_growth = yes

		calculate_inflation_effect = yes
		calculate_display_variables = yes

		reload_gdpc = yes

		update_credit_rating_calculation = yes

		force_update_dynamic_modifier = yes

		update_econ_centralization_pos = yes
		calculate_poverty_dampener_effect = yes
	}
}

validate_maximal_minimal_positions = {
	if = {
		limit = {
			check_variable = { econ_army_expenditures_minimal_x < 34 }
		}
		set_variable = { econ_army_expenditures_minimal_x = 34 }
	}
	if = {
		limit = {
			check_variable = { econ_army_expenditures_maximal_x > 228 }
		}
		set_variable = { econ_army_expenditures_maximal_x = 228 }
	}
	if = {
		limit = {
			check_variable = { econ_naval_expenditures_minimal_x < 34 }
		}
		set_variable = { econ_naval_expenditures_minimal_x = 34 }
	}
	if = {
		limit = {
			check_variable = { econ_naval_expenditures_maximal_x > 228 }
		}
		set_variable = { econ_naval_expenditures_maximal_x = 228 }
	}
	if = {
		limit = {
			check_variable = { econ_nuclear_expenditures_minimal_x < 34 }
		}
		set_variable = { econ_nuclear_expenditures_minimal_x = 34 }
	}
	if = {
		limit = {
			check_variable = { econ_nuclear_expenditures_maximal_x > 228 }
		}
		set_variable = { econ_nuclear_expenditures_maximal_x = 228 }
	}
	if = {
		limit = {
			check_variable = { econ_research_expenditures_minimal_x < 34 }
		}
		set_variable = { econ_research_expenditures_minimal_x = 34 }
	}
	if = {
		limit = {
			check_variable = { econ_research_expenditures_maximal_x > 228 }
		}
		set_variable = { econ_research_expenditures_maximal_x = 228 }
	}
	if = {
		limit = {
			check_variable = { econ_social_expenditures_minimal_x < 34 }
		}
		set_variable = { econ_social_expenditures_minimal_x = 34 }
	}
	if = {
		limit = {
			check_variable = { econ_social_expenditures_maximal_x > 228 }
		}
		set_variable = { econ_social_expenditures_maximal_x = 228 }
	}
	if = {
		limit = {
			check_variable = { econ_admin_expenditures_minimal_x < 34 }
		}
		set_variable = { econ_admin_expenditures_minimal_x = 34 }
	}
	if = {
		limit = {
			check_variable = { econ_admin_expenditures_maximal_x > 228 }
		}
		set_variable = { econ_admin_expenditures_maximal_x = 228 }
	}
	if = {
		limit = {
			check_variable = { econ_army_maintenance_minimal_x < 34 }
		}
		set_variable = { econ_army_maintenance_minimal_x = 34 }
	}
	if = {
		limit = {
			check_variable = { econ_army_R_D_minimal_x < 34 }
		}
		set_variable = { econ_army_R_D_minimal_x = 34 }
	}
	if = {
		limit = {
			check_variable = { econ_army_logistics_minimal_x < 34 }
		}
		set_variable = { econ_army_logistics_minimal_x = 34 }
	}
	if = {
		limit = {
			check_variable = { econ_army_procurement_minimal_x < 34 }
		}
		set_variable = { econ_army_procurement_minimal_x = 34 }
	}

	if = {
		limit = {
			check_variable = { econ_social_healthcare_minimal_x < 34 }
		}
		set_variable = { econ_social_healthcare_minimal_x = 34 }
	}
	if = {
		limit = {
			check_variable = { econ_social_pensions_minimal_x < 34 }
		}
		set_variable = { econ_social_pensions_minimal_x = 34 }
	}
	if = {
		limit = {
			check_variable = { econ_social_education_minimal_x < 34 }
		}
		set_variable = { econ_social_education_minimal_x = 34 }
	}
	if = {
		limit = {
			check_variable = { econ_social_unemployment_minimal_x < 34 }
		}
		set_variable = { econ_social_unemployment_minimal_x = 34 }
	}

	if = {
		limit = {
			check_variable = { econ_admin_security_minimal_x < 34 }
		}
		set_variable = { econ_admin_security_minimal_x = 34 }
	}
	if = {
		limit = {
			check_variable = { econ_admin_regulations_minimal_x < 34 }
		}
		set_variable = { econ_admin_regulations_minimal_x = 34 }
	}
	if = {
		limit = {
			check_variable = { econ_admin_pollution_minimal_x < 34 }
		}
		set_variable = { econ_admin_pollution_minimal_x = 34 }
	}
	if = {
		limit = {
			check_variable = { econ_admin_bureaucracy_minimal_x < 34 }
		}
		set_variable = { econ_admin_bureaucracy_minimal_x = 34 }
	}

	if = {
		limit = {
			check_variable = { econ_research_science_minimal_x < 34 }
		}
		set_variable = { econ_research_science_minimal_x = 34 }
	}
	if = {
		limit = {
			check_variable = { econ_research_facilities_minimal_x < 34 }
		}
		set_variable = { econ_research_facilities_minimal_x = 34 }
	}

	if = {
		limit = {
			check_variable = { econ_army_maintenance_maximal_x > 228 }
		}
		set_variable = { econ_army_maintenance_maximal_x = 228 }
	}
	if = {
		limit = {
			check_variable = { econ_army_R_D_maximal_x > 228 }
		}
		set_variable = { econ_army_R_D_maximal_x = 228 }
	}
	if = {
		limit = {
			check_variable = { econ_army_logistics_maximal_x > 228 }
		}
		set_variable = { econ_army_logistics_maximal_x = 228 }
	}
	if = {
		limit = {
			check_variable = { econ_army_procurement_maximal_x > 228 }
		}
		set_variable = { econ_army_procurement_maximal_x = 228 }
	}

	if = {
		limit = {
			check_variable = { econ_social_healthcare_maximal_x > 228 }
		}
		set_variable = { econ_social_healthcare_maximal_x = 228 }
	}
	if = {
		limit = {
			check_variable = { econ_social_pensions_maximal_x > 228 }
		}
		set_variable = { econ_social_pensions_maximal_x = 228 }
	}
	if = {
		limit = {
			check_variable = { econ_social_education_maximal_x > 228 }
		}
		set_variable = { econ_social_education_maximal_x = 228 }
	}
	if = {
		limit = {
			check_variable = { econ_social_unemployment_maximal_x > 228 }
		}
		set_variable = { econ_social_unemployment_maximal_x = 228 }
	}

	if = {
		limit = {
			check_variable = { econ_admin_security_maximal_x > 228 }
		}
		set_variable = { econ_admin_security_maximal_x = 228 }
	}
	if = {
		limit = {
			check_variable = { econ_admin_regulations_maximal_x > 228 }
		}
		set_variable = { econ_admin_regulations_maximal_x = 228 }
	}
	if = {
		limit = {
			check_variable = { econ_admin_pollution_maximal_x > 228 }
		}
		set_variable = { econ_admin_pollution_maximal_x = 228 }
	}
	if = {
		limit = {
			check_variable = { econ_admin_bureaucracy_maximal_x > 228 }
		}
		set_variable = { econ_admin_bureaucracy_maximal_x = 228 }
	}

	if = {
		limit = {
			check_variable = { econ_research_science_maximal_x > 228 }
		}
		set_variable = { econ_research_science_maximal_x = 228 }
	}
	if = {
		limit = {
			check_variable = { econ_research_facilities_maximal_x > 228 }
		}
		set_variable = { econ_research_facilities_maximal_x = 228 }
	}
	if = {
		limit = {
			check_variable = { econ_army_expenditures_minimal_x > econ_army_expenditures_maximal_x }
		}
		set_variable = { econ_army_expenditures_minimal_x = econ_army_expenditures_maximal_x }
	}
	if = {
		limit = {
			check_variable = { econ_naval_expenditures_minimal_x > econ_naval_expenditures_maximal_x }
		}
		set_variable = { econ_naval_expenditures_minimal_x = econ_naval_expenditures_maximal_x }
	}
	if = {
		limit = {
			check_variable = { econ_nuclear_expenditures_minimal_x > econ_nuclear_expenditures_maximal_x }
		}
		set_variable = { econ_nuclear_expenditures_minimal_x = econ_nuclear_expenditures_maximal_x }
	}
	if = {
		limit = {
			check_variable = { econ_research_expenditures_minimal_x > econ_research_expenditures_maximal_x }
		}
		set_variable = { econ_research_expenditures_minimal_x = econ_research_expenditures_maximal_x }
	}
	if = {
		limit = {
			check_variable = { econ_social_expenditures_minimal_x > econ_social_expenditures_maximal_x }
		}
		set_variable = { econ_social_expenditures_minimal_x = econ_social_expenditures_maximal_x }
	}
	if = {
		limit = {
			check_variable = { econ_admin_expenditures_minimal_x > econ_admin_expenditures_maximal_x }
		}
		set_variable = { econ_admin_expenditures_minimal_x = econ_admin_expenditures_maximal_x }
	}

	if = {
		limit = {
			check_variable = { econ_army_maintenance_minimal_x > econ_army_maintenance_maximal_x }
		}
		set_variable = { econ_army_maintenance_minimal_x = econ_army_maintenance_maximal_x }
	}
	if = {
		limit = {
			check_variable = { econ_army_R_D_minimal_x > econ_army_R_D_maximal_x }
		}
		set_variable = { econ_army_R_D_minimal_x = econ_army_R_D_maximal_x }
	}
	if = {
		limit = {
			check_variable = { econ_army_logistics_minimal_x > econ_army_logistics_maximal_x }
		}
		set_variable = { econ_army_logistics_minimal_x = econ_army_logistics_maximal_x }
	}
	if = {
		limit = {
			check_variable = { econ_army_procurement_minimal_x > econ_army_procurement_maximal_x }
		}
		set_variable = { econ_army_procurement_minimal_x = econ_army_procurement_maximal_x }
	}

	if = {
		limit = {
			check_variable = { econ_social_healthcare_minimal_x > econ_social_healthcare_maximal_x }
		}
		set_variable = { econ_social_healthcare_minimal_x = econ_social_healthcare_maximal_x }
	}
	if = {
		limit = {
			check_variable = { econ_social_pensions_minimal_x > econ_social_pensions_maximal_x }
		}
		set_variable = { econ_social_pensions_minimal_x = econ_social_pensions_maximal_x }
	}
	if = {
		limit = {
			check_variable = { econ_social_education_minimal_x > econ_social_education_maximal_x }
		}
		set_variable = { econ_social_education_minimal_x = econ_social_education_maximal_x }
	}
	if = {
		limit = {
			check_variable = { econ_social_unemployment_minimal_x > econ_social_unemployment_maximal_x }
		}
		set_variable = { econ_social_unemployment_minimal_x = econ_social_unemployment_maximal_x }
	}

	if = {
		limit = {
			check_variable = { econ_admin_security_minimal_x > econ_admin_security_maximal_x }
		}
		set_variable = { econ_admin_security_minimal_x = econ_admin_security_maximal_x }
	}
	if = {
		limit = {
			check_variable = { econ_admin_regulations_minimal_x > econ_admin_regulations_maximal_x }
		}
		set_variable = { econ_admin_regulations_minimal_x = econ_admin_regulations_maximal_x }
	}
	if = {
		limit = {
			check_variable = { econ_admin_pollution_minimal_x > econ_admin_pollution_maximal_x }
		}
		set_variable = { econ_admin_pollution_minimal_x = econ_admin_pollution_maximal_x }
	}
	if = {
		limit = {
			check_variable = { econ_admin_bureaucracy_minimal_x > econ_admin_bureaucracy_maximal_x }
		}
		set_variable = { econ_admin_bureaucracy_minimal_x = econ_admin_bureaucracy_maximal_x }
	}

	if = {
		limit = {
			check_variable = { econ_research_science_minimal_x > econ_research_science_maximal_x }
		}
		set_variable = { econ_research_science_minimal_x = econ_research_science_maximal_x }
	}
	if = {
		limit = {
			check_variable = { econ_research_facilities_minimal_x > econ_research_facilities_maximal_x }
		}
		set_variable = { econ_research_facilities_minimal_x = econ_research_facilities_maximal_x }
	}
}


# Other handy effects #

#HOW TO USE:
#First enter the scope of the country the GDP is being TAKEN FROM
#Then enter the scope of the country the GDP is being transferred to

#EXAMPLE:
#
#MEX = {
#	USA = {
#		transfer_GDP = yes
#	}
#}
#This will transfer Mexico's GDP to the US

#transfer_GDP = {
#	set_temp_variable = { temp_GDP = PREV.GDP }
#	multiply_temp_variable = { temp_GDP = 0.001 } #already converted to billion

#	set_variable = { PREV.GDP = 0.0 } #already converted to billion
#	add_to_variable = { GDP = temp_GDP }
#}

generate_state_gdps = {

	set_variable = { state_value = state_population_k }
	set_variable = { state_value_factor = 1 }

	#Buildings

	set_temp_variable = { sv_factor_inf = infrastructure_level }
	multiply_temp_variable = { sv_factor_inf = 0.1 }
	add_to_variable = { state_value_factor = sv_factor_inf }

	set_temp_variable = { sv_factor_nuc = building_level@nuclear_reactor }
	multiply_temp_variable = { sv_factor_nuc = 0.03 }
	add_to_variable = { state_value_factor = sv_factor_nuc }

	set_temp_variable = { sv_factor_doc = building_level@dockyard }
	multiply_temp_variable = { sv_factor_doc = 0.03 }
	add_to_variable = { state_value_factor = sv_factor_doc }
	
	set_temp_variable = { sv_factor_doc = building_level@synthetic_refinery }
	multiply_temp_variable = { sv_factor_doc = 0.04 }
	add_to_variable = { state_value_factor = sv_factor_doc }
	
	set_temp_variable = { sv_factor_doc = building_level@thermoelectric_plant }
	multiply_temp_variable = { sv_factor_doc = 0.03 }
	add_to_variable = { state_value_factor = sv_factor_doc }
	
	set_temp_variable = { sv_factor_doc = building_level@schools }
	multiply_temp_variable = { sv_factor_doc = 0.02 }
	add_to_variable = { state_value_factor = sv_factor_doc }
	
	set_temp_variable = { sv_factor_doc = building_level@offices }
	multiply_temp_variable = { sv_factor_doc = 0.02 }
	add_to_variable = { state_value_factor = sv_factor_doc }
	
	#resources
	set_temp_variable = { sv_factor_doc = resource@steel }
	multiply_temp_variable = { sv_factor_doc = 0.001 }
	add_to_variable = { state_value_factor = sv_factor_doc }
	
	set_temp_variable = { sv_factor_doc = resource@rubber }
	multiply_temp_variable = { sv_factor_doc = 0.003 }
	add_to_variable = { state_value_factor = sv_factor_doc }
	
	set_temp_variable = { sv_factor_doc = resource@oil }
	multiply_temp_variable = { sv_factor_doc = 0.004 }
	add_to_variable = { state_value_factor = sv_factor_doc }
	
	set_temp_variable = { sv_factor_doc = resource@aluminium }
	multiply_temp_variable = { sv_factor_doc = 0.001 }
	add_to_variable = { state_value_factor = sv_factor_doc }
	
	set_temp_variable = { sv_factor_doc = resource@tungsten }
	multiply_temp_variable = { sv_factor_doc = 0.001 }
	add_to_variable = { state_value_factor = sv_factor_doc }
	
	set_temp_variable = { sv_factor_doc = resource@chromium }
	multiply_temp_variable = { sv_factor_doc = 0.001 }
	add_to_variable = { state_value_factor = sv_factor_doc }
	
	set_temp_variable = { sv_factor_doc = resource@aluminium }
	multiply_temp_variable = { sv_factor_doc = 0.001 }
	add_to_variable = { state_value_factor = sv_factor_doc }
	
	#State category block
	if = {
		limit = {
			NOT = {
				has_state_flag = GDP_category_pastoral
				has_state_flag = GDP_category_rural
				has_state_flag = GDP_category_town
				has_state_flag = GDP_category_large_town
				has_state_flag = GDP_category_city
				has_state_flag = GDP_category_large_city
				has_state_flag = GDP_category_metropolis
				has_state_flag = GDP_category_megalopolis
			}
		}
		if = {
			limit = { has_state_category = megalopolis }
			multiply_variable = { state_value_factor = 1.8 }
		}
		else_if = {
			limit = { has_state_category = metropolis }
			multiply_variable = { state_value_factor = 1.65 }
		}
		else_if = {
			limit = { has_state_category = large_city }
			multiply_variable = { state_value_factor = 1.5 }
		}
		else_if = {
			limit = { has_state_category = city }
			multiply_variable = { state_value_factor = 1.3 }
		}
		else_if = {
			limit = { has_state_category = large_town }
			multiply_variable = { state_value_factor = 1.15 }
		}
		else_if = {
			limit = { has_state_category = town }
			multiply_variable = { state_value_factor = 1.0 }
		}
		else_if = {
			limit = { has_state_category = rural }
			multiply_variable = { state_value_factor = 0.8 }
		}
		else = {
			multiply_variable = { state_value_factor = 0.65 }
		}
	}
	else = {
		if = {
			limit = { has_state_flag = GDP_category_megalopolis }
			multiply_variable = { state_value_factor = 1.8 }
		}
		else_if = {
			limit = { has_state_flag = GDP_category_metropolis }
			multiply_variable = { state_value_factor = 1.65 }
		}
		else_if = {
			limit = { has_state_flag = GDP_category_large_city }
			multiply_variable = { state_value_factor = 1.5 }
		}
		else_if = {
			limit = { has_state_flag = GDP_category_city }
			multiply_variable = { state_value_factor = 1.3 }
		}
		else_if = {
			limit = { has_state_flag = GDP_category_large_town }
			multiply_variable = { state_value_factor = 1.15 }
		}
		else_if = {
			limit = { has_state_flag = GDP_category_town }
			multiply_variable = { state_value_factor = 1.0 }
		}
		else_if = {
			limit = { has_state_flag = GDP_category_rural }
			multiply_variable = { state_value_factor = 0.8 }
		}
		else_if = {
			limit = { has_state_flag = GDP_category_pastoral }
			multiply_variable = { state_value_factor = 0.65 }
		}
	}

	multiply_variable = { state_value = state_value_factor }
	divide_variable = { state_value = 10 } # state GDP now in millions
	set_variable = { gdp_growth = 1 }

	set_temp_variable = { minimum_state_value = state_population_k }
	divide_temp_variable = { minimum_state_value = 40 }
	clamp_variable = { var = state_value min = minimum_state_value }
}


calculate_total_state_gdp = {
	set_variable = { totalstateGDP = 0.0 } #already converted to billion
	THIS = {
		every_controlled_state = {
			set_variable = { state_value_B = state_value }
			divide_variable = { state_value_B = 1000 }

			set_variable = { state_GDPPC = state_value }
			divide_variable = { state_GDPPC = state_population_k }
			multiply_variable = { state_GDPPC = 1000 }

			set_temp_variable = { temp_totalstateGDP = modifier@state_GDP_contribution_to_total_state_GDP_modifier } # this is where we multiply stateGDP by the amount it is contributing (by default, 100%)
			clamp_temp_variable = { var = temp_totalstateGDP max = 0 } # no you may not contribute more than 100% of your modifier to totalGDP
			add_to_temp_variable = { temp_totalstateGDP = 1 }
			multiply_temp_variable = { temp_totalstateGDP = state_value }
			set_variable = { state_GDP_contribution = temp_totalstateGDP }

			divide_temp_variable = { temp_totalstateGDP = 1000 } #convert to B for overflow purposes
			add_to_variable = { PREV.totalstateGDP = temp_totalstateGDP }
			if = {
				limit = {
					has_state_flag = GDP_regions_korea
				}
				add_to_variable = { PREV.korea_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_formosa
				}
				add_to_variable = { PREV.formosa_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_hainan
				}
				add_to_variable = { PREV.hainan_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_new_guinea
				}
				add_to_variable = { PREV.new_guinea_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 629
				}
				add_to_variable = { PREV.hawaii_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_austria
				}
				add_to_variable = { PREV.austria_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_gotenland
				}
				add_to_variable = { PREV.gotenland_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 64
				}
				add_to_variable = { PREV.germania_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 69
				}
				add_to_variable = { PREV.sudetenland_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 87
				}
				add_to_variable = { PREV.wartheland_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 9
				}
				add_to_variable = { PREV.bohmen_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 75
				}
				add_to_variable = { PREV.mahren_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 8
				}
				add_to_variable = { PREV.luxembourg_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 770
				}
				add_to_variable = { PREV.untersteiermark_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 98
				}
				add_to_variable = { PREV.oberkrain_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 97
				}
				add_to_variable = { PREV.bialystok_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1532
				}
				add_to_variable = { PREV.theoderichshafen_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_burgundy
				}
				add_to_variable = { PREV.burgundy_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_albania
				}
				add_to_variable = { PREV.albania_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_libya
				}
				add_to_variable = { PREV.libya_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_tunisia
				}
				add_to_variable = { PREV.tunisia_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 103
				}
				add_to_variable = { PREV.zara_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 102
				}
				add_to_variable = { PREV.slovenia_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 735
				}
				add_to_variable = { PREV.alpi_occidentali_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1
				}
				add_to_variable = { PREV.corsica_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1327
				}
				add_to_variable = { PREV.malta_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1705
				}
				add_to_variable = { PREV.aden_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 105
				}
				add_to_variable = { PREV.kosovo_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1704
				}
				add_to_variable = { PREV.debar_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_veneto
				}
				add_to_variable = { PREV.veneto_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_liguria
				}
				add_to_variable = { PREV.liguria_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 158
				}
				add_to_variable = { PREV.piedmont_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 159
				}
				add_to_variable = { PREV.lombardy_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 161
				}
				add_to_variable = { PREV.emilia_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 162
				}
				add_to_variable = { PREV.tuscany_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1324
				}
				add_to_variable = { PREV.marche_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 743
				}
				add_to_variable = { PREV.umbria_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 2
				}
				add_to_variable = { PREV.latium_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 157
				}
				add_to_variable = { PREV.abruzzi_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 117
				}
				add_to_variable = { PREV.campania_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1325
				}
				add_to_variable = { PREV.puglia_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1445
				}
				add_to_variable = { PREV.basilicata_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 156
				}
				add_to_variable = { PREV.calabria_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 115
				}
				add_to_variable = { PREV.sicily_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 114
				}
				add_to_variable = { PREV.sardinia_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 709
				}
				add_to_variable = { PREV.seychelles_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 164
				}
				add_to_variable = { PREV.dodecanese_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_scotland
				}
				add_to_variable = { PREV.scotland_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_wales
				}
				add_to_variable = { PREV.wales_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1300
				}
				add_to_variable = { PREV.london_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_paris
				}
				add_to_variable = { PREV.paris_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 784
				}
				add_to_variable = { PREV.alger_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_portugal
				}
				add_to_variable = { PREV.portugal_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_morocco
				}
				add_to_variable = { PREV.morocco_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_western_sahara
				}
				add_to_variable = { PREV.western_sahara_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_equatorial_guinea
				}
				add_to_variable = { PREV.equatorial_guinea_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 296
				}
				add_to_variable = { PREV.guinea_bissau_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_turkish_syria
				}
				add_to_variable = { PREV.turkish_syria_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 184
				}
				add_to_variable = { PREV.belomora_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 195
				}
				add_to_variable = { PREV.sankt_petersburg_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 239
				}
				add_to_variable = { PREV.wolgagebiet_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 243
				}
				add_to_variable = { PREV.paulusburg_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 260
				}
				add_to_variable = { PREV.platenfurt_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_karelia
				}
				add_to_variable = { PREV.karelia_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_lithuania
				}
				add_to_variable = { PREV.lithuania_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_latvia
				}
				add_to_variable = { PREV.latvia_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_estonia
				}
				add_to_variable = { PREV.estonia_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_belarus
				}
				add_to_variable = { PREV.belarus_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_pleskau
				}
				add_to_variable = { PREV.pleskau_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_luki
				}
				add_to_variable = { PREV.luki_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1397
				}
				add_to_variable = { PREV.riga_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_transylvania
				}
				add_to_variable = { PREV.transylvania_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 664
				}
				add_to_variable = { PREV.southern_slovakia_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 73
				}
				add_to_variable = { PREV.carpathian_ruthenia_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_macedonia
				}
				add_to_variable = { PREV.macedonia_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_vranje
				}
				add_to_variable = { PREV.vranje_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_sudan
				}
				add_to_variable = { PREV.sudan_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_georgia
				}
				add_to_variable = { PREV.georgia_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_azerbaijan
				}
				add_to_variable = { PREV.azerbaijan_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1552
				}
				add_to_variable = { PREV.baku_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_cyprus
				}
				add_to_variable = { PREV.cyprus_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_bosnia
				}
				add_to_variable = { PREV.bosnia_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 656
				}
				add_to_variable = { PREV.kuwait_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1789
				}
				add_to_variable = { PREV.bahrain_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1335
				}
				add_to_variable = { PREV.qatar_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1629
				}
				add_to_variable = { PREV.montevideo_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 300
				}
				add_to_variable = { PREV.metropolitana_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1630
				}
				add_to_variable = { PREV.centro_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1631
				}
				add_to_variable = { PREV.este_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1634
				}
				add_to_variable = { PREV.noreste_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1632
				}
				add_to_variable = { PREV.litoral_sur_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1633
				}
				add_to_variable = { PREV.litoral_norte_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 751
				}
				add_to_variable = { PREV.singapore_totalstateGDP = state_GDP_contribution }
			}
			
			else_if = {
				limit = {
					has_state_flag = GDP_regions_amazonas
				}
				add_to_variable = { PREV.amazonas_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_para
				}
				add_to_variable = { PREV.para_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_mato_grosso
				}
				add_to_variable = { PREV.mato_grosso_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_goias
				}
				add_to_variable = { PREV.goias_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_rio
				}
				add_to_variable = { PREV.rio_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 497
				}
				add_to_variable = { PREV.maranhao_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1484
				}
				add_to_variable = { PREV.piaui_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 504
				}
				add_to_variable = { PREV.ceara_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 498
				}
				add_to_variable = { PREV.rio_grande_n_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1492
				}
				add_to_variable = { PREV.paraiba_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1491
				}
				add_to_variable = { PREV.pernambuco_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1490
				}
				add_to_variable = { PREV.alagoas_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1485
				}
				add_to_variable = { PREV.sergipe_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 499
				}
				add_to_variable = { PREV.bahia_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1489
				}
				add_to_variable = { PREV.brasilia_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 496
				}
				add_to_variable = { PREV.minas_gerais_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1487
				}
				add_to_variable = { PREV.espirito_santo_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 501
				}
				add_to_variable = { PREV.sao_paulo_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 503
				}
				add_to_variable = { PREV.parana_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1486
				}
				add_to_variable = { PREV.santa_catarina_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 502
				}
				add_to_variable = { PREV.rio_grande_s_totalstateGDP = state_GDP_contribution }
			}
			
			else_if = {
				limit = {
					state = 1511
				}
				add_to_variable = { PREV.buenos_aires_c_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_la_plata
				}
				add_to_variable = { PREV.buenos_aires_p_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_santa_fe
				}
				add_to_variable = { PREV.santa_fe_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_cordoba
				}
				add_to_variable = { PREV.cordoba_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_misiones
				}
				add_to_variable = { PREV.misiones_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1502
				}
				add_to_variable = { PREV.entre_rios_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1501
				}
				add_to_variable = { PREV.corrientes_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1499
				}
				add_to_variable = { PREV.chaco_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1498
				}
				add_to_variable = { PREV.formosa_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 508
				}
				add_to_variable = { PREV.tucuman_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1507
				}
				add_to_variable = { PREV.neuquen_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_salta_jujuy
				}
				add_to_variable = { PREV.salta_jujuy_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_catamarca
				}
				add_to_variable = { PREV.catamarca_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_santiago_del_estero
				}
				add_to_variable = { PREV.santiago_del_estero_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_san_juan
				}
				add_to_variable = { PREV.san_juan_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_mendoza
				}
				add_to_variable = { PREV.mendoza_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_la_pampa
				}
				add_to_variable = { PREV.la_pampa_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_rio_negro
				}
				add_to_variable = { PREV.rio_negro_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_chubut
				}
				add_to_variable = { PREV.chubut_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_santa_cruz
				}
				add_to_variable = { PREV.santa_cruz_totalstateGDP = state_GDP_contribution }
			}
			
			else_if = {
				limit = {
					has_state_flag = GDP_regions_tarapaca
				}
				add_to_variable = { PREV.tarapaca_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_valparaiso
				}
				add_to_variable = { PREV.valparaiso_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 506
				}
				add_to_variable = { PREV.antofagasta_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1514
				}
				add_to_variable = { PREV.atacama_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1515
				}
				add_to_variable = { PREV.coquimbo_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 279
				}
				add_to_variable = { PREV.santiago_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1518
				}
				add_to_variable = { PREV.ohiggins_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_maule
				}
				add_to_variable = { PREV.maule_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_bio
				}
				add_to_variable = { PREV.bio_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_araucania
				}
				add_to_variable = { PREV.araucania_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_los_lagos
				}
				add_to_variable = { PREV.los_lagos_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_aysen
				}
				add_to_variable = { PREV.aysen_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_magallanes
				}
				add_to_variable = { PREV.magallanes_totalstateGDP = state_GDP_contribution }
			}
			
			else_if = {
				limit = {
					state = 489
				}
				add_to_variable = { PREV.zulia_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 307
				}
				add_to_variable = { PREV.miranda_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 307
				}
				add_to_variable = { PREV.miranda_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_sw_vz
				}
				add_to_variable = { PREV.merida_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_mw_vz
				}
				add_to_variable = { PREV.lara_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_aragua
				}
				add_to_variable = { PREV.aragua_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_sucre
				}
				add_to_variable = { PREV.sucre_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_bolivar
				}
				add_to_variable = { PREV.bolivar_totalstateGDP = state_GDP_contribution }
			}
			
			else_if = {
				limit = {
					state = 484
				}
				add_to_variable = { PREV.baja_california_n_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1550
				}
				add_to_variable = { PREV.baja_california_s_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 483
				}
				add_to_variable = { PREV.sonora_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 482
				}
				add_to_variable = { PREV.chihuahua_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 480
				}
				add_to_variable = { PREV.coahuila_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1409
				}
				add_to_variable = { PREV.nuevo_leon_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 479
				}
				add_to_variable = { PREV.tamaulipas_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 481
				}
				add_to_variable = { PREV.sinaloa_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1408
				}
				add_to_variable = { PREV.durango_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 478
				}
				add_to_variable = { PREV.nayarit_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1423
				}
				add_to_variable = { PREV.zacatecas_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1422
				}
				add_to_variable = { PREV.aguascalientes_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1410
				}
				add_to_variable = { PREV.san_luis_potosi_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1419
				}
				add_to_variable = { PREV.jalisco_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1420
				}
				add_to_variable = { PREV.colima_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1416
				}
				add_to_variable = { PREV.guanajuato_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1417
				}
				add_to_variable = { PREV.queretaro_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1418
				}
				add_to_variable = { PREV.michoacan_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 485
				}
				add_to_variable = { PREV.guerrero_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1415
				}
				add_to_variable = { PREV.hidalgo_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1413
				}
				add_to_variable = { PREV.mexico_s_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 277
				}
				add_to_variable = { PREV.mexico_c_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1412
				}
				add_to_variable = { PREV.morelos_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1414
				}
				add_to_variable = { PREV.tlaxcala_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1411
				}
				add_to_variable = { PREV.puebla_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 477
				}
				add_to_variable = { PREV.veracruz_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 476
				}
				add_to_variable = { PREV.oaxaca_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1424
				}
				add_to_variable = { PREV.tabasco_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 475
				}
				add_to_variable = { PREV.chiapas_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1425
				}
				add_to_variable = { PREV.campeche_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 474
				}
				add_to_variable = { PREV.yucatan_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 2152
				}
				add_to_variable = { PREV.quintana_roo_totalstateGDP = state_GDP_contribution }
			}
			
			else_if = {
				limit = {
					state = 952
				}
				add_to_variable = { PREV.maine_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 951
				}
				add_to_variable = { PREV.new_hampshire_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 950
				}
				add_to_variable = { PREV.vermont_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 949
				}
				add_to_variable = { PREV.massachusetts_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 948
				}
				add_to_variable = { PREV.rhode_island_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 357
				}
				add_to_variable = { PREV.connecticut_totalstateGDP = state_GDP_contribution }
			}
			
			else_if = {
				limit = {
					state = 358
				}
				add_to_variable = { PREV.new_york_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 359
				}
				add_to_variable = { PREV.new_jersey_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 360
				}
				add_to_variable = { PREV.pennsylvania_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 954
				}
				add_to_variable = { PREV.delaware_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 361
				}
				add_to_variable = { PREV.maryland_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 992
				}
				add_to_variable = { PREV.washington_dc_totalstateGDP = state_GDP_contribution }
			}
			
			else_if = {
				limit = {
					state = 953
				}
				add_to_variable = { PREV.w_virginia_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 362
				}
				add_to_variable = { PREV.virginia_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 369
				}
				add_to_variable = { PREV.kentucky_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 368
				}
				add_to_variable = { PREV.tennessee_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 363
				}
				add_to_variable = { PREV.n_carolina_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 364
				}
				add_to_variable = { PREV.s_carolina_totalstateGDP = state_GDP_contribution }
			}
			
			else_if = {
				limit = {
					state = 372
				}
				add_to_variable = { PREV.arkansas_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 371
				}
				add_to_variable = { PREV.louisiana_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 370
				}
				add_to_variable = { PREV.mississippi_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 367
				}
				add_to_variable = { PREV.alabama_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 365
				}
				add_to_variable = { PREV.georgia_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 366
				}
				add_to_variable = { PREV.florida_totalstateGDP = state_GDP_contribution }
			}
			
			else_if = {
				limit = {
					state = 394
				}
				add_to_variable = { PREV.wisconsin_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 393
				}
				add_to_variable = { PREV.michigan_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 395
				}
				add_to_variable = { PREV.illinois_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 396
				}
				add_to_variable = { PREV.indiana_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 261
				}
				add_to_variable = { PREV.ohio_totalstateGDP = state_GDP_contribution }
			}
			
			else_if = {
				limit = {
					state = 389
				}
				add_to_variable = { PREV.n_dakota_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 390
				}
				add_to_variable = { PREV.s_dakota_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 384
				}
				add_to_variable = { PREV.nebraska_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 383
				}
				add_to_variable = { PREV.kansas_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 391
				}
				add_to_variable = { PREV.minnesota_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 392
				}
				add_to_variable = { PREV.iowa_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 373
				}
				add_to_variable = { PREV.missouri_totalstateGDP = state_GDP_contribution }
			}
			
			else_if = {
				limit = {
					state = 387
				}
				add_to_variable = { PREV.idaho_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 388
				}
				add_to_variable = { PREV.montana_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 381
				}
				add_to_variable = { PREV.wyoming_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 380
				}
				add_to_variable = { PREV.utah_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 382
				}
				add_to_variable = { PREV.colorado_totalstateGDP = state_GDP_contribution }
			}
			
			else_if = {
				limit = {
					state = 377
				}
				add_to_variable = { PREV.arizona_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 376
				}
				add_to_variable = { PREV.new_mexico_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 375
				}
				add_to_variable = { PREV.texas_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 374
				}
				add_to_variable = { PREV.oklahoma_totalstateGDP = state_GDP_contribution }
			}
			
			else_if = {
				limit = {
					state = 463
				}
				add_to_variable = { PREV.alaska_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 386
				}
				add_to_variable = { PREV.washington_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 385
				}
				add_to_variable = { PREV.oregon_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 378
				}
				add_to_variable = { PREV.california_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 379
				}
				add_to_variable = { PREV.nevada_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 101
				}
				add_to_variable = { PREV.greenland_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 686
				}
				add_to_variable = { PREV.puerto_rico_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 2106
				}
				add_to_variable = { PREV.virgin_islands_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 685
				}
				add_to_variable = { PREV.pcz_totalstateGDP = state_GDP_contribution }
			}
			
			else_if = {
				limit = {
					state = 289
				}
				add_to_variable = { PREV.bangkok_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 2226
				}
				add_to_variable = { PREV.ayutthaya_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 843
				}
				add_to_variable = { PREV.saharat_thai_doem_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_north_thailand
				}
				add_to_variable = { PREV.north_thailand_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_isan
				}
				add_to_variable = { PREV.isan_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_east_thailand
				}
				add_to_variable = { PREV.east_thailand_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_thai_cambodia
				}
				add_to_variable = { PREV.thai_cambodia_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_south_thailand
				}
				add_to_variable = { PREV.south_thailand_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_thai_malaya
				}
				add_to_variable = { PREV.thai_malaya_totalstateGDP = state_GDP_contribution }
			}
			
			else_if = {
				limit = {
					state = 980
				}
				add_to_variable = { PREV.delhi_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 321
				}
				add_to_variable = { PREV.goa_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 932
				}
				add_to_variable = { PREV.kerala_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1888
				}
				add_to_variable = { PREV.manipur_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_jammu_kashmir
				}
				add_to_variable = { PREV.jammu_kashmir_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_punjab
				}
				add_to_variable = { PREV.punjab_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_sindh
				}
				add_to_variable = { PREV.sindh_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_rajasthan
				}
				add_to_variable = { PREV.rajasthan_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_gujarat
				}
				add_to_variable = { PREV.gujarat_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_madhya_pradesh
				}
				add_to_variable = { PREV.madhya_pradesh_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_maharashtra
				}
				add_to_variable = { PREV.maharashtra_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_karnataka
				}
				add_to_variable = { PREV.karnataka_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_tamil_nadu
				}
				add_to_variable = { PREV.tamil_nadu_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_andhra_pradesh
				}
				add_to_variable = { PREV.andhra_pradesh_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_orissa_ind
				}
				add_to_variable = { PREV.orissa_ind_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_orissa_azh
				}
				add_to_variable = { PREV.orissa_azh_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_uttar_pradesh
				}
				add_to_variable = { PREV.uttar_pradesh_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_bihar
				}
				add_to_variable = { PREV.bihar_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_bihar_ind
				}
				add_to_variable = { PREV.bihar_ind_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_bengal
				}
				add_to_variable = { PREV.bengal_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_assam
				}
				add_to_variable = { PREV.assam_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_sarawak
				}
				add_to_variable = { PREV.sarawak_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 807
				}
				add_to_variable = { PREV.brunei_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_sabah
				}
				add_to_variable = { PREV.sabah_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 795
				}
				add_to_variable = { PREV.djakarta_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_east_west_java
				}
				add_to_variable = { PREV.east_west_java_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_central_java
				}
				add_to_variable = { PREV.central_java_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_riau
				}
				add_to_variable = { PREV.riau_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_medan
				}
				add_to_variable = { PREV.medan_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_djambi
				}
				add_to_variable = { PREV.djambi_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_south_sumatra
				}
				add_to_variable = { PREV.south_sumatra_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_sumatra
				}
				add_to_variable = { PREV.sumatra_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_makassar
				}
				add_to_variable = { PREV.makassar_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_sulawesi
				}
				add_to_variable = { PREV.sulawesi_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_southeast_sulawesi
				}
				add_to_variable = { PREV.southeast_sulawesi_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 783
				}
				add_to_variable = { PREV.minahasa_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_kalimantan
				}
				add_to_variable = { PREV.kalimantan_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 794
				}
				add_to_variable = { PREV.e_kalimantan_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1757
				}
				add_to_variable = { PREV.bali_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_nusa_tenggara
				}
				add_to_variable = { PREV.nusa_tenggara_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_maluku
				}
				add_to_variable = { PREV.maluku_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_west_papua
				}
				add_to_variable = { PREV.west_papua_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 613
				}
				add_to_variable = { PREV.nanjing_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 813
				}
				add_to_variable = { PREV.shanghai_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 608
				}
				add_to_variable = { PREV.beijing_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 2325
				}
				add_to_variable = { PREV.tianjin_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1538
				}
				add_to_variable = { PREV.chongqing_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 812
				}
				add_to_variable = { PREV.qingdao_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 2326
				}
				add_to_variable = { PREV.xiamen_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_jiangsu_huaihai
				}
				add_to_variable = { PREV.jiangsu_huaihai_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_anhui
				}
				add_to_variable = { PREV.anhui_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_zhejiang_ouhai
				}
				add_to_variable = { PREV.zhejiang_ouhai_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_jiangxi_ganjiang
				}
				add_to_variable = { PREV.jiangxi_ganjiang_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_fujian
				}
				add_to_variable = { PREV.fujian_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_hubei
				}
				add_to_variable = { PREV.hubei_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_hunan
				}
				add_to_variable = { PREV.hunan_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_henan_sanyang
				}
				add_to_variable = { PREV.henan_sanyang_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_hebei_zhongyuan
				}
				add_to_variable = { PREV.hebei_zhongyuan_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_shandong_taiyue
				}
				add_to_variable = { PREV.shandong_taiyue_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_chuandong
				}
				add_to_variable = { PREV.chuandong_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_chuanxi
				}
				add_to_variable = { PREV.chuanxi_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_shanxi
				}
				add_to_variable = { PREV.shanxi_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_shaanxi
				}
				add_to_variable = { PREV.shaanxi_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_outer_mongolia
				}
				add_to_variable = { PREV.outer_mongolia_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_chahar_suiyuan
				}
				add_to_variable = { PREV.chahar_suiyuan_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_gansu
				}
				add_to_variable = { PREV.gansu_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_qinghai
				}
				add_to_variable = { PREV.qinghai_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_south_shaanxi
				}
				add_to_variable = { PREV.south_shaanxi_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1016
				}
				add_to_variable = { PREV.wuhan_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 2445
				}
				add_to_variable = { PREV.san_andres_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 493
				}
				add_to_variable = { PREV.guajira_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 306
				}
				add_to_variable = { PREV.bogota_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 2446
				}
				add_to_variable = { PREV.cundinamarca_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1657
				}
				add_to_variable = { PREV.boyaca_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 486
				}
				add_to_variable = { PREV.meta_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1652
				}
				add_to_variable = { PREV.vichada_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1658
				}
				add_to_variable = { PREV.arauca_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1656
				}
				add_to_variable = { PREV.tolima_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1655
				}
				add_to_variable = { PREV.huila_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1663
				}
				add_to_variable = { PREV.antioquia_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1664
				}
				add_to_variable = { PREV.caldas_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1699
				}
				add_to_variable = { PREV.cordoba_COL_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1660
				}
				add_to_variable = { PREV.bolivar_COL_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 2524
				}
				add_to_variable = { PREV.cartagena_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1659
				}
				add_to_variable = { PREV.atlantico_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1700
				}
				add_to_variable = { PREV.magdalena_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1665
				}
				add_to_variable = { PREV.choco_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1662
				}
				add_to_variable = { PREV.cauca_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1654
				}
				add_to_variable = { PREV.valle_del_cauca_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 2458
				}
				add_to_variable = { PREV.ibague_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1653
				}
				add_to_variable = { PREV.narino_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1650
				}
				add_to_variable = { PREV.caqueta_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 2447
				}
				add_to_variable = { PREV.putumayo_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 2448
				}
				add_to_variable = { PREV.amazonas_COL_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1651
				}
				add_to_variable = { PREV.vaupes_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 2449
				}
				add_to_variable = { PREV.n_santander_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1661
				}
				add_to_variable = { PREV.santander_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1565
				}
				add_to_variable = { PREV.batum_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1567
				}
				add_to_variable = { PREV.nakhchivan_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1267
				}
				add_to_variable = { PREV.e_thrace_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 341
				}
				add_to_variable = { PREV.istanbul_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 347
				}
				add_to_variable = { PREV.kocaeli_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 340
				}
				add_to_variable = { PREV.bursa_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 345
				}
				add_to_variable = { PREV.balikesir_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 339
				}
				add_to_variable = { PREV.izmir_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 349
				}
				add_to_variable = { PREV.mugla_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 343
				}
				add_to_variable = { PREV.afyon_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 49
				}
				add_to_variable = { PREV.ankara_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1987
				}
				add_to_variable = { PREV.tokat_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 348
				}
				add_to_variable = { PREV.kayseri_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 346
				}
				add_to_variable = { PREV.konya_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1986
				}
				add_to_variable = { PREV.zonguldak_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 356
				}
				add_to_variable = { PREV.kastamonu_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 355
				}
				add_to_variable = { PREV.samsun_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 354
				}
				add_to_variable = { PREV.trabzon_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1448
				}
				add_to_variable = { PREV.rize_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 342
				}
				add_to_variable = { PREV.antalya_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 344
				}
				add_to_variable = { PREV.adana_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1991
				}
				add_to_variable = { PREV.gaziantep_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1988
				}
				add_to_variable = { PREV.hatay_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1989
				}
				add_to_variable = { PREV.malatya_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 353
				}
				add_to_variable = { PREV.erzurum_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1990
				}
				add_to_variable = { PREV.agri_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 350
				}
				add_to_variable = { PREV.diyarbakir_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 352
				}
				add_to_variable = { PREV.van_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1992
				}
				add_to_variable = { PREV.mardin_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_ontario
				}
				add_to_variable = { PREV.ontario_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_british_columbia
				}
				add_to_variable = { PREV.british_columbia_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_alberta
				}
				add_to_variable = { PREV.alberta_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 683
				}
				add_to_variable = { PREV.manitoba_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_quebec
				}
				add_to_variable = { PREV.quebec_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 1433
				}
				add_to_variable = { PREV.saskatchewan_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 464
				}
				add_to_variable = { PREV.nova_scotia_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 465
				}
				add_to_variable = { PREV.new_brunswick_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 730
				}
				add_to_variable = { PREV.prince_edward_island_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_newfoundland
				}
				add_to_variable = { PREV.newfoundland_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 471
				}
				add_to_variable = { PREV.yukon_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_northwest_territories
				}
				add_to_variable = { PREV.northwest_territories_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_bahamas
				}
				add_to_variable = { PREV.bahamas_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 2512
				}
				add_to_variable = { PREV.turks_and_caicos_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 696
				}
				add_to_variable = { PREV.bermuda_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 2513
				}
				add_to_variable = { PREV.cayman_islands_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					state = 2444
				}
				add_to_variable = { PREV.british_virgin_islands_totalstateGDP = state_GDP_contribution }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_south_atlantic
				}
				add_to_variable = { PREV.south_atlantic_totalstateGDP = state_GDP_contribution }
			}
			set_variable = { state_GDP_contribution_B = temp_totalstateGDP }
		}
	}
	set_variable = { totalstateGDP_display = totalstateGDP } # since we later do a little trolling with totalstateGDP, it's best to have a display number
	#log ="[THIS.GetName] has total state GDP of [?totalstateGDP]"
	##log ="[GetDateText]: [THIS.GetName]: ran total state GDP calculation script - GDP is $[?totalstateGDP] million. GDP growth is [?GDP_growth]%."
}

GDP_distribute_regionally = {
	if = {
		limit = {
			tag = JAP
		}
		set_variable = { koreaGDP = 10.943 }
		set_variable = { formosaGDP = 3.889 }
		set_variable = { hawaiiGDP = 0.501 }
		set_variable = { new_guineaGDP = 0.234 }
		
		multiply_variable = { korea_totalstateGDP = neededGDP }
		multiply_variable = { formosa_totalstateGDP = neededGDP }
		multiply_variable = { hawaii_totalstateGDP = neededGDP }
		multiply_variable = { new_guinea_totalstateGDP = neededGDP }
		divide_variable = { korea_totalstateGDP = 1000 }
		divide_variable = { formosa_totalstateGDP = 1000 }
		divide_variable = { hainan_totalstateGDP = 1000 }
		divide_variable = { hawaii_totalstateGDP = 1000 }
		divide_variable = { new_guinea_totalstateGDP = 1000 }
		
		set_temp_variable = { totalgdp_else_temp = GDP }
		subtract_from_temp_variable = { totalgdp_else_temp = korea_totalstateGDP }
		subtract_from_temp_variable = { totalgdp_else_temp = formosa_totalstateGDP }
		subtract_from_temp_variable = { totalgdp_else_temp = hawaii_totalstateGDP }
		subtract_from_temp_variable = { totalgdp_else_temp = new_guinea_totalstateGDP }
		
		set_variable = { home_islands_gdp = 183.874 }
		
		divide_variable = { koreaGDP = korea_totalstateGDP }
		divide_variable = { formosaGDP = formosa_totalstateGDP }
		divide_variable = { hawaiiGDP = hawaii_totalstateGDP }
		divide_variable = { new_guineaGDP = new_guinea_totalstateGDP }
		divide_variable = { home_islands_gdp = totalgdp_else_temp }
		
		every_owned_state = {
			if = {
				limit = {
					has_state_flag = GDP_regions_korea
				}
				multiply_variable = { state_value = PREV.koreaGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_formosa
				}
				multiply_variable = { state_value = PREV.formosaGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_new_guinea
				}
				multiply_variable = { state_value = PREV.new_guineaGDP }
			}
			else_if = {
				limit = {
					state = 629
				}
				multiply_variable = { state_value = PREV.hawaiiGDP }
			}
			else = {
				multiply_variable = { state_value = PREV.home_islands_gdp }
			}
		}
	}
	if = {
		limit = {
			tag = GER
		}
		set_variable = { austriaGDP = 12.096 }
		set_variable = { gotenlandGDP = 2.412 }
		set_variable = { germaniaGDP = 19.198 }
		set_variable = { sudetenlandGDP = 4.715 }
		set_variable = { warthelandGDP = 5.821 }
		set_variable = { bohmenGDP = 6.466 }
		set_variable = { mahrenGDP = 2.871 }
		set_variable = { luxembourgGDP = 0.626 }
		set_variable = { untersteiermarkGDP = 0.530 }
		set_variable = { oberkrainGDP = 0.203 }
		set_variable = { bialystokGDP = 0.541 }
		set_variable = { theoderichshafenGDP = 0.215 }
		
		multiply_variable = { austria_totalstateGDP = neededGDP }
		multiply_variable = { gotenland_totalstateGDP = neededGDP }
		multiply_variable = { germania_totalstateGDP = neededGDP }
		multiply_variable = { sudetenland_totalstateGDP = neededGDP }
		multiply_variable = { wartheland_totalstateGDP = neededGDP }
		multiply_variable = { bohmen_totalstateGDP = neededGDP }
		multiply_variable = { mahren_totalstateGDP = neededGDP }
		multiply_variable = { luxembourg_totalstateGDP = neededGDP }
		multiply_variable = { untersteiermark_totalstateGDP = neededGDP }
		multiply_variable = { oberkrain_totalstateGDP = neededGDP }
		multiply_variable = { bialystok_totalstateGDP = neededGDP }
		multiply_variable = { theoderichshafen_totalstateGDP = neededGDP }
		divide_variable = { austria_totalstateGDP = 1000 }
		divide_variable = { gotenland_totalstateGDP = 1000 }
		divide_variable = { germania_totalstateGDP = 1000 }
		divide_variable = { sudetenland_totalstateGDP = 1000 }
		divide_variable = { wartheland_totalstateGDP = 1000 }
		divide_variable = { bohmen_totalstateGDP = 1000 }
		divide_variable = { mahren_totalstateGDP = 1000 }
		divide_variable = { luxembourg_totalstateGDP = 1000 }
		divide_variable = { untersteiermark_totalstateGDP = 1000 }
		divide_variable = { oberkrain_totalstateGDP = 1000 }
		divide_variable = { bialystok_totalstateGDP = 1000 }
		divide_variable = { theoderichshafen_totalstateGDP = 1000 }
		
		set_temp_variable = { totalgdp_else_temp = GDP }
		subtract_from_temp_variable = { totalgdp_else_temp = austria_totalstateGDP }
		subtract_from_temp_variable = { totalgdp_else_temp = gotenland_totalstateGDP }
		subtract_from_temp_variable = { totalgdp_else_temp = germania_totalstateGDP }
		subtract_from_temp_variable = { totalgdp_else_temp = sudetenland_totalstateGDP }
		subtract_from_temp_variable = { totalgdp_else_temp = wartheland_totalstateGDP }
		subtract_from_temp_variable = { totalgdp_else_temp = bohmen_totalstateGDP }
		subtract_from_temp_variable = { totalgdp_else_temp = mahren_totalstateGDP }
		subtract_from_temp_variable = { totalgdp_else_temp = luxembourg_totalstateGDP }
		subtract_from_temp_variable = { totalgdp_else_temp = untersteiermark_totalstateGDP }
		subtract_from_temp_variable = { totalgdp_else_temp = oberkrain_totalstateGDP }
		subtract_from_temp_variable = { totalgdp_else_temp = bialystok_totalstateGDP }
		subtract_from_temp_variable = { totalgdp_else_temp = theoderichshafen_totalstateGDP }
		
		set_variable = { germany_proper_gdp = 190.246 }
		
		divide_variable = { austriaGDP = austria_totalstateGDP }
		divide_variable = { gotenlandGDP = gotenland_totalstateGDP }
		divide_variable = { germaniaGDP = germania_totalstateGDP }
		divide_variable = { sudetenlandGDP = sudetenland_totalstateGDP }
		divide_variable = { warthelandGDP = wartheland_totalstateGDP }
		divide_variable = { bohmenGDP = bohmen_totalstateGDP }
		divide_variable = { mahrenGDP = mahren_totalstateGDP }
		divide_variable = { luxembourgGDP = luxembourg_totalstateGDP }
		divide_variable = { untersteiermarkGDP = untersteiermark_totalstateGDP }
		divide_variable = { oberkrainGDP = oberkrain_totalstateGDP }
		divide_variable = { bialystokGDP = bialystok_totalstateGDP }
		divide_variable = { theoderichshafenGDP = theoderichshafen_totalstateGDP }
		divide_variable = { germany_proper_gdp = totalgdp_else_temp }
		
		every_owned_state = {
			if = {
				limit = {
					has_state_flag = GDP_regions_austria
				}
				multiply_variable = { state_value = PREV.austriaGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_gotenland
				}
				multiply_variable = { state_value = PREV.gotenlandGDP }
			}
			else_if = {
				limit = {
					state = 64
				}
				multiply_variable = { state_value = PREV.germaniaGDP }
			}
			else_if = {
				limit = {
					state = 69
				}
				multiply_variable = { state_value = PREV.sudetenlandGDP }
			}
			else_if = {
				limit = {
					state = 87
				}
				multiply_variable = { state_value = PREV.warthelandGDP }
			}
			else_if = {
				limit = {
					state = 9
				}
				multiply_variable = { state_value = PREV.bohmenGDP }
			}
			else_if = {
				limit = {
					state = 75
				}
				multiply_variable = { state_value = PREV.mahrenGDP }
			}
			else_if = {
				limit = {
					state = 8
				}
				multiply_variable = { state_value = PREV.luxembourgGDP }
			}
			else_if = {
				limit = {
					state = 770
				}
				multiply_variable = { state_value = PREV.untersteiermarkGDP }
			}
			else_if = {
				limit = {
					state = 98
				}
				multiply_variable = { state_value = PREV.oberkrainGDP }
			}
			else_if = {
				limit = {
					state = 97
				}
				multiply_variable = { state_value = PREV.bialystokGDP }
			}
			else_if = {
				limit = {
					state = 1532
				}
				multiply_variable = { state_value = PREV.theoderichshafenGDP }
			}
			else = {
				multiply_variable = { state_value = PREV.germany_proper_gdp }
			}
		}
	}
	if = {
		limit = {
			tag = BRG
		}
		set_variable = { burgundyGDP = 6.206 }
		
		multiply_variable = { burgundy_totalstateGDP = neededGDP }
		divide_variable = { burgundy_totalstateGDP = 1000 }
		
		set_temp_variable = { totalgdp_else_temp = GDP }
		subtract_from_temp_variable = { totalgdp_else_temp = burgundy_totalstateGDP }
		
		set_variable = { belgium_gdp = 17.791 }
		
		divide_variable = { burgundyGDP = burgundy_totalstateGDP }
		divide_variable = { belgium_gdp = totalgdp_else_temp }
		
		every_owned_state = {
			if = {
				limit = {
					has_state_flag = GDP_regions_burgundy
				}
				multiply_variable = { state_value = PREV.burgundyGDP }
			}
			else = {
				multiply_variable = { state_value = PREV.belgium_gdp }
			}
		}
	}
	if = {
		limit = {
			tag = ITA
		}
		set_variable = { libyaGDP = 0.488 }
		set_variable = { zaraGDP = 0.353 }
		set_variable = { sloveniaGDP = 0.843 }
		set_variable = { alpi_occidentaliGDP = 1.010 }
		set_variable = { corsicaGDP = 0.341 }
		set_variable = { maltaGDP = 0.098 }
		set_variable = { adenGDP = 0.003 }
		
		set_variable = { piedmontGDP = 9.818 }
		set_variable = { liguriaGDP = 5.456 }
		set_variable = { lombardyGDP = 19.183 }
		set_variable = { venetoGDP = 11.108 }
		set_variable = { emiliaGDP = 7.904 }
		set_variable = { marcheGDP = 2.196 }
		set_variable = { tuscanyGDP = 6.429 }
		set_variable = { umbriaGDP = 1.310 }
		set_variable = { latiumGDP = 8.104 }
		set_variable = { campaniaGDP = 5.520 }
		set_variable = { abruzziGDP = 1.728 }
		set_variable = { pugliaGDP = 3.904 }
		set_variable = { basilicataGDP = 0.641 }
		set_variable = { calabriaGDP = 1.469 }
		set_variable = { sicilyGDP = 5.046 }
		set_variable = { sardiniaGDP = 1.954 }
		set_variable = { seychellesGDP = 0.063 }
		set_variable = { dodecaneseGDP = 0.071 }
		
		multiply_variable = { libya_totalstateGDP = neededGDP }
		multiply_variable = { zara_totalstateGDP = neededGDP }
		multiply_variable = { slovenia_totalstateGDP = neededGDP }
		multiply_variable = { alpi_occidentali_totalstateGDP = neededGDP }
		multiply_variable = { corsica_totalstateGDP = neededGDP }
		multiply_variable = { malta_totalstateGDP = neededGDP }
		multiply_variable = { aden_totalstateGDP = neededGDP }
		
		multiply_variable = { piedmont_totalstateGDP = neededGDP }
		multiply_variable = { liguria_totalstateGDP = neededGDP }
		multiply_variable = { lombardy_totalstateGDP = neededGDP }
		multiply_variable = { veneto_totalstateGDP = neededGDP }
		multiply_variable = { emilia_totalstateGDP = neededGDP }
		multiply_variable = { marche_totalstateGDP = neededGDP }
		multiply_variable = { tuscany_totalstateGDP = neededGDP }
		multiply_variable = { umbria_totalstateGDP = neededGDP }
		multiply_variable = { latium_totalstateGDP = neededGDP }
		multiply_variable = { campania_totalstateGDP = neededGDP }
		multiply_variable = { abruzzi_totalstateGDP = neededGDP }
		multiply_variable = { puglia_totalstateGDP = neededGDP }
		multiply_variable = { basilicata_totalstateGDP = neededGDP }
		multiply_variable = { calabria_totalstateGDP = neededGDP }
		multiply_variable = { sicily_totalstateGDP = neededGDP }
		multiply_variable = { sardinia_totalstateGDP = neededGDP }
		multiply_variable = { seychelles_totalstateGDP = neededGDP }
		multiply_variable = { dodecanese_totalstateGDP = neededGDP }
		
		divide_variable = { libya_totalstateGDP = 1000 }
		divide_variable = { zara_totalstateGDP = 1000 }
		divide_variable = { slovenia_totalstateGDP = 1000 }
		divide_variable = { alpi_occidentali_totalstateGDP = 1000 }
		divide_variable = { corsica_totalstateGDP = 1000 }
		divide_variable = { malta_totalstateGDP = 1000 }
		divide_variable = { aden_totalstateGDP = 1000 }
		
		divide_variable = { piedmont_totalstateGDP = 1000 }
		divide_variable = { liguria_totalstateGDP = 1000 }
		divide_variable = { lombardy_totalstateGDP = 1000 }
		divide_variable = { veneto_totalstateGDP = 1000 }
		divide_variable = { emilia_totalstateGDP = 1000 }
		divide_variable = { marche_totalstateGDP = 1000 }
		divide_variable = { tuscany_totalstateGDP = 1000 }
		divide_variable = { umbria_totalstateGDP = 1000 }
		divide_variable = { latium_totalstateGDP = 1000 }
		divide_variable = { campania_totalstateGDP = 1000 }
		divide_variable = { abruzzi_totalstateGDP = 1000 }
		divide_variable = { puglia_totalstateGDP = 1000 }
		divide_variable = { basilicata_totalstateGDP = 1000 }
		divide_variable = { calabria_totalstateGDP = 1000 }
		divide_variable = { sicily_totalstateGDP = 1000 }
		divide_variable = { sardinia_totalstateGDP = 1000 }
		divide_variable = { seychelles_totalstateGDP = 1000 }
		divide_variable = { dodecanese_totalstateGDP = 1000 }
		
		divide_variable = { libyaGDP = libya_totalstateGDP }
		divide_variable = { zaraGDP = zara_totalstateGDP }
		divide_variable = { sloveniaGDP = slovenia_totalstateGDP }
		divide_variable = { alpi_occidentaliGDP = alpi_occidentali_totalstateGDP }
		divide_variable = { corsicaGDP = corsica_totalstateGDP }
		divide_variable = { maltaGDP = malta_totalstateGDP }
		divide_variable = { adenGDP = aden_totalstateGDP }
		
		divide_variable = { piedmontGDP = piedmont_totalstateGDP }
		divide_variable = { liguriaGDP = liguria_totalstateGDP }
		divide_variable = { lombardyGDP = lombardy_totalstateGDP }
		divide_variable = { venetoGDP = veneto_totalstateGDP }
		divide_variable = { emiliaGDP = emilia_totalstateGDP }
		divide_variable = { marcheGDP = marche_totalstateGDP }
		divide_variable = { tuscanyGDP = tuscany_totalstateGDP }
		divide_variable = { umbriaGDP = umbria_totalstateGDP }
		divide_variable = { latiumGDP = latium_totalstateGDP }
		divide_variable = { campaniaGDP = campania_totalstateGDP }
		divide_variable = { abruzziGDP = abruzzi_totalstateGDP }
		divide_variable = { pugliaGDP = puglia_totalstateGDP }
		divide_variable = { basilicataGDP = basilicata_totalstateGDP }
		divide_variable = { calabriaGDP = calabria_totalstateGDP }
		divide_variable = { sicilyGDP = sicily_totalstateGDP }
		divide_variable = { sardiniaGDP = sardinia_totalstateGDP }
		divide_variable = { seychellesGDP = seychelles_totalstateGDP }
		divide_variable = { dodecaneseGDP = dodecanese_totalstateGDP }
		
		every_owned_state = {
			if = {
				limit = {
					has_state_flag = GDP_regions_libya
				}
				multiply_variable = { state_value = PREV.libyaGDP }
			}
			else_if = {
				limit = {
					state = 103
				}
				multiply_variable = { state_value = PREV.zaraGDP }
			}
			else_if = {
				limit = {
					state = 102
				}
				multiply_variable = { state_value = PREV.sloveniaGDP }
			}
			else_if = {
				limit = {
					state = 735
				}
				multiply_variable = { state_value = PREV.alpi_occidentaliGDP }
			}
			else_if = {
				limit = {
					state = 1
				}
				multiply_variable = { state_value = PREV.corsicaGDP }
			}
			else_if = {
				limit = {
					state = 1327
				}
				multiply_variable = { state_value = PREV.maltaGDP }
			}
			else_if = {
				limit = {
					state = 1705
				}
				multiply_variable = { state_value = PREV.adenGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_liguria
				}
				multiply_variable = { state_value = PREV.liguriaGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_veneto
				}
				multiply_variable = { state_value = PREV.venetoGDP }
			}
			else_if = {
				limit = {
					state = 158
				}
				multiply_variable = { state_value = PREV.piedmontGDP }
			}
			else_if = {
				limit = {
					state = 159
				}
				multiply_variable = { state_value = PREV.lombardyGDP }
			}
			else_if = {
				limit = {
					state = 161
				}
				multiply_variable = { state_value = PREV.emiliaGDP }
			}
			else_if = {
				limit = {
					state = 162
				}
				multiply_variable = { state_value = PREV.tuscanyGDP }
			}
			else_if = {
				limit = {
					state = 1324
				}
				multiply_variable = { state_value = PREV.marcheGDP }
			}
			else_if = {
				limit = {
					state = 743
				}
				multiply_variable = { state_value = PREV.umbriaGDP }
			}
			else_if = {
				limit = {
					state = 2
				}
				multiply_variable = { state_value = PREV.latiumGDP }
			}
			else_if = {
				limit = {
					state = 157
				}
				multiply_variable = { state_value = PREV.abruzziGDP }
			}
			else_if = {
				limit = {
					state = 117
				}
				multiply_variable = { state_value = PREV.campaniaGDP }
			}
			else_if = {
				limit = {
					state = 1325
				}
				multiply_variable = { state_value = PREV.pugliaGDP }
			}
			else_if = {
				limit = {
					state = 1445
				}
				multiply_variable = { state_value = PREV.basilicataGDP }
			}
			else_if = {
				limit = {
					state = 156
				}
				multiply_variable = { state_value = PREV.calabriaGDP }
			}
			else_if = {
				limit = {
					state = 115
				}
				multiply_variable = { state_value = PREV.sicilyGDP }
			}
			else_if = {
				limit = {
					state = 114
				}
				multiply_variable = { state_value = PREV.sardiniaGDP }
			}
			else_if = {
				limit = {
					state = 709
				}
				multiply_variable = { state_value = PREV.seychellesGDP }
			}
			else_if = {
				limit = {
					state = 164
				}
				multiply_variable = { state_value = PREV.dodecaneseGDP }
			}
		}
	}
	if = {
		limit = {
			tag = ALB
		}
		set_variable = { albaniaGDP = 0.515 }
		set_variable = { kosovoGDP = 0.183 }
		set_variable = { debarGDP = 0.110 }
		
		multiply_variable = { albania_totalstateGDP = neededGDP }
		multiply_variable = { kosovo_totalstateGDP = neededGDP }
		multiply_variable = { debar_totalstateGDP = neededGDP }
		divide_variable = { albania_totalstateGDP = 1000 }
		divide_variable = { kosovo_totalstateGDP = 1000 }
		divide_variable = { debar_totalstateGDP = 1000 }
		
		divide_variable = { albaniaGDP = albania_totalstateGDP }
		divide_variable = { kosovoGDP = kosovo_totalstateGDP }
		divide_variable = { debarGDP = debar_totalstateGDP }
		
		every_owned_state = {
			if = {
				limit = {
					has_state_flag = GDP_regions_albania
				}
				multiply_variable = { state_value = PREV.albaniaGDP }
			}
			else_if = {
				limit = {
					state = 105
				}
				multiply_variable = { state_value = PREV.kosovoGDP }
			}
			else_if = {
				limit = {
					state = 1704
				}
				multiply_variable = { state_value = PREV.debarGDP }
			}
		}
	}
	if = {
		limit = {
			tag = ENG
		}
		set_variable = { londonGDP = 16.316 }
		set_variable = { scotlandGDP = 8.534 }
		set_variable = { walesGDP = 3.564 }
		
		multiply_variable = { london_totalstateGDP = neededGDP }
		divide_variable = { london_totalstateGDP = 1000 }
		multiply_variable = { scotland_totalstateGDP = neededGDP }
		divide_variable = { scotland_totalstateGDP = 1000 }
		multiply_variable = { wales_totalstateGDP = neededGDP }
		divide_variable = { wales_totalstateGDP = 1000 }
		
		set_temp_variable = { totalgdp_else_temp = GDP }
		subtract_from_temp_variable = { totalgdp_else_temp = london_totalstateGDP }
		subtract_from_temp_variable = { totalgdp_else_temp = scotland_totalstateGDP }
		subtract_from_temp_variable = { totalgdp_else_temp = wales_totalstateGDP }
		
		set_variable = { england_proper_gdp = 57.486 }
		
		divide_variable = { londonGDP = london_totalstateGDP }
		divide_variable = { scotlandGDP = scotland_totalstateGDP }
		divide_variable = { walesGDP = wales_totalstateGDP }
		divide_variable = { england_proper_gdp = totalgdp_else_temp }
		
		every_owned_state = {
			if = {
				limit = {
					state = 1300
				}
				multiply_variable = { state_value = PREV.londonGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_wales
				}
				multiply_variable = { state_value = PREV.walesGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_scotland
				}
				multiply_variable = { state_value = PREV.scotlandGDP }
			}
			else = {
				multiply_variable = { state_value = PREV.england_proper_gdp }
			}
		}
	}
	if = {
		limit = {
			tag = FRS
		}
		set_variable = { parisGDP = 14.807 }
		set_variable = { algerGDP = 1.310 }
		
		multiply_variable = { paris_totalstateGDP = neededGDP }
		multiply_variable = { alger_totalstateGDP = neededGDP }
		divide_variable = { paris_totalstateGDP = 1000 }
		divide_variable = { alger_totalstateGDP = 1000 }
		
		set_temp_variable = { totalgdp_else_temp = GDP }
		subtract_from_temp_variable = { totalgdp_else_temp = paris_totalstateGDP }
		subtract_from_temp_variable = { totalgdp_else_temp = alger_totalstateGDP }
		
		set_variable = { france_proper_gdp = 44.367 }
		
		divide_variable = { parisGDP = paris_totalstateGDP }
		divide_variable = { algerGDP = alger_totalstateGDP }
		divide_variable = { france_proper_gdp = totalgdp_else_temp }
		
		every_owned_state = {
			if = {
				limit = {
					has_state_flag = GDP_regions_paris
				}
				multiply_variable = { state_value = PREV.parisGDP }
			}
			else_if = {
				limit = {
					state = 784
				}
				multiply_variable = { state_value = PREV.algerGDP }
			}
			else = {
				multiply_variable = { state_value = PREV.france_proper_gdp }
			}
		}
	}
	if = {
		limit = {
			tag = IBR
		}
		set_variable = { portugalGDP = 5.464 }
		set_variable = { moroccoGDP = 3.614 }
		set_variable = { western_saharaGDP = 0.008 }
		set_variable = { equatorial_guineaGDP = 0.042 }
		set_variable = { guinea_bissauGDP = 0.066 }
		
		multiply_variable = { portugal_totalstateGDP = neededGDP }
		multiply_variable = { morocco_totalstateGDP = neededGDP }
		multiply_variable = { western_sahara_totalstateGDP = neededGDP }
		multiply_variable = { equatorial_guinea_totalstateGDP = neededGDP }
		multiply_variable = { guinea_bissau_totalstateGDP = neededGDP }
		divide_variable = { portugal_totalstateGDP = 1000 }
		divide_variable = { morocco_totalstateGDP = 1000 }
		divide_variable = { western_sahara_totalstateGDP = 1000 }
		divide_variable = { equatorial_guinea_totalstateGDP = 1000 }
		divide_variable = { guinea_bissau_totalstateGDP = 1000 }
		
		set_temp_variable = { totalgdp_else_temp = GDP }
		subtract_from_temp_variable = { totalgdp_else_temp = portugal_totalstateGDP }
		subtract_from_temp_variable = { totalgdp_else_temp = morocco_totalstateGDP }
		subtract_from_temp_variable = { totalgdp_else_temp = western_sahara_totalstateGDP }
		subtract_from_temp_variable = { totalgdp_else_temp = equatorial_guinea_totalstateGDP }
		subtract_from_temp_variable = { totalgdp_else_temp = guinea_bissau_totalstateGDP }
		
		set_variable = { spain_gdp = 20.311 }
		
		divide_variable = { portugalGDP = portugal_totalstateGDP }
		divide_variable = { moroccoGDP = morocco_totalstateGDP }
		divide_variable = { western_saharaGDP = western_sahara_totalstateGDP }
		divide_variable = { equatorial_guineaGDP = equatorial_guinea_totalstateGDP }
		divide_variable = { guinea_bissauGDP = guinea_bissau_totalstateGDP }
		divide_variable = { spain_gdp = totalgdp_else_temp }
		
		every_owned_state = {
			if = {
				limit = {
					has_state_flag = GDP_regions_portugal
				}
				multiply_variable = { state_value = PREV.portugalGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_morocco
				}
				multiply_variable = { state_value = PREV.moroccoGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_western_sahara
				}
				multiply_variable = { state_value = PREV.western_saharaGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_equatorial_guinea
				}
				multiply_variable = { state_value = PREV.equatorial_guineaGDP }
			}
			else_if = {
				limit = {
					state = 296
				}
				multiply_variable = { state_value = PREV.guinea_bissauGDP }
			}
			else = {
				multiply_variable = { state_value = PREV.spain_gdp }
			}
		}
	}
	if = {
		limit = {
			tag = TUR
		}
		set_variable = { turkish_syriaGDP = 0.828 }
		set_variable = { batumGDP = 0.252 }
		set_variable = { nakhchivanGDP = 0.048 }
		set_variable = { e_thraceGDP = 0.412 }
		set_variable = { istanbulGDP = 1.477 }
		set_variable = { kocaeliGDP = 0.444 }
		set_variable = { bursaGDP = 0.378 }
		set_variable = { balikesirGDP = 0.535 }
		set_variable = { izmirGDP = 0.920 }
		set_variable = { muglaGDP = 0.515 }
		set_variable = { afyonGDP = 0.745 }
		set_variable = { ankaraGDP = 0.952 }
		set_variable = { tokatGDP = 0.582 }
		set_variable = { konyaGDP = 0.877 }
		set_variable = { kayseriGDP = 0.452 }
		set_variable = { zonguldakGDP = 0.459 }
		set_variable = { kastamonuGDP = 0.155 }
		set_variable = { samsunGDP = 0.358 }
		set_variable = { trabzonGDP = 0.365 }
		set_variable = { rizeGDP = 0.138 }
		set_variable = { antalyaGDP = 0.420 }
		set_variable = { adanaGDP = 0.779 }
		set_variable = { gaziantepGDP = 0.264 }
		set_variable = { hatayGDP = 0.183 }
		set_variable = { malatyaGDP = 0.512 }
		set_variable = { erzurumGDP = 0.380 }
		set_variable = { agriGDP = 0.133 }
		set_variable = { diyarbakirGDP = 0.275 }
		set_variable = { vanGDP = 0.101 }
		set_variable = { mardinGDP = 0.334 }
		
		multiply_variable = { turkish_syria_totalstateGDP = neededGDP }
		multiply_variable = { batum_totalstateGDP = neededGDP }
		multiply_variable = { nakhchivan_totalstateGDP = neededGDP }
		multiply_variable = { e_thrace_totalstateGDP = neededGDP }
		multiply_variable = { istanbul_totalstateGDP = neededGDP }
		multiply_variable = { kocaeli_totalstateGDP = neededGDP }
		multiply_variable = { bursa_totalstateGDP = neededGDP }
		multiply_variable = { balikesir_totalstateGDP = neededGDP }
		multiply_variable = { izmir_totalstateGDP = neededGDP }
		multiply_variable = { mugla_totalstateGDP = neededGDP }
		multiply_variable = { afyon_totalstateGDP = neededGDP }
		multiply_variable = { ankara_totalstateGDP = neededGDP }
		multiply_variable = { tokat_totalstateGDP = neededGDP }
		multiply_variable = { konya_totalstateGDP = neededGDP }
		multiply_variable = { kayseri_totalstateGDP = neededGDP }
		multiply_variable = { zonguldak_totalstateGDP = neededGDP }
		multiply_variable = { kastamonu_totalstateGDP = neededGDP }
		multiply_variable = { samsun_totalstateGDP = neededGDP }
		multiply_variable = { trabzon_totalstateGDP = neededGDP }
		multiply_variable = { rize_totalstateGDP = neededGDP }
		multiply_variable = { antalya_totalstateGDP = neededGDP }
		multiply_variable = { adana_totalstateGDP = neededGDP }
		multiply_variable = { gaziantep_totalstateGDP = neededGDP }
		multiply_variable = { hatay_totalstateGDP = neededGDP }
		multiply_variable = { malatya_totalstateGDP = neededGDP }
		multiply_variable = { erzurum_totalstateGDP = neededGDP }
		multiply_variable = { agri_totalstateGDP = neededGDP }
		multiply_variable = { diyarbakir_totalstateGDP = neededGDP }
		multiply_variable = { van_totalstateGDP = neededGDP }
		multiply_variable = { mardin_totalstateGDP = neededGDP }
		
		divide_variable = { turkish_syria_totalstateGDP = 1000 }
		divide_variable = { batum_totalstateGDP = 1000 }
		divide_variable = { nakhchivan_totalstateGDP = 1000 }
		divide_variable = { e_thrace_totalstateGDP = 1000 }
		divide_variable = { istanbul_totalstateGDP = 1000 }
		divide_variable = { kocaeli_totalstateGDP = 1000 }
		divide_variable = { bursa_totalstateGDP = 1000 }
		divide_variable = { balikesir_totalstateGDP = 1000 }
		divide_variable = { izmir_totalstateGDP = 1000 }
		divide_variable = { mugla_totalstateGDP = 1000 }
		divide_variable = { afyon_totalstateGDP = 1000 }
		divide_variable = { ankara_totalstateGDP = 1000 }
		divide_variable = { tokat_totalstateGDP = 1000 }
		divide_variable = { konya_totalstateGDP = 1000 }
		divide_variable = { kayseri_totalstateGDP = 1000 }
		divide_variable = { zonguldak_totalstateGDP = 1000 }
		divide_variable = { kastamonu_totalstateGDP = 1000 }
		divide_variable = { samsun_totalstateGDP = 1000 }
		divide_variable = { trabzon_totalstateGDP = 1000 }
		divide_variable = { rize_totalstateGDP = 1000 }
		divide_variable = { antalya_totalstateGDP = 1000 }
		divide_variable = { adana_totalstateGDP = 1000 }
		divide_variable = { gaziantep_totalstateGDP = 1000 }
		divide_variable = { hatay_totalstateGDP = 1000 }
		divide_variable = { malatya_totalstateGDP = 1000 }
		divide_variable = { erzurum_totalstateGDP = 1000 }
		divide_variable = { agri_totalstateGDP = 1000 }
		divide_variable = { diyarbakir_totalstateGDP = 1000 }
		divide_variable = { van_totalstateGDP = 1000 }
		divide_variable = { mardin_totalstateGDP = 1000 }
		
		divide_variable = { turkish_syriaGDP = turkish_syria_totalstateGDP }
		divide_variable = { batumGDP = batum_totalstateGDP }
		divide_variable = { nakhchivanGDP = nakhchivan_totalstateGDP }
		divide_variable = { e_thraceGDP = e_thrace_totalstateGDP }
		divide_variable = { istanbulGDP = istanbul_totalstateGDP }
		divide_variable = { kocaeliGDP = kocaeli_totalstateGDP }
		divide_variable = { bursaGDP = bursa_totalstateGDP }
		divide_variable = { balikesirGDP = balikesir_totalstateGDP }
		divide_variable = { izmirGDP = izmir_totalstateGDP }
		divide_variable = { muglaGDP = mugla_totalstateGDP }
		divide_variable = { afyonGDP = afyon_totalstateGDP }
		divide_variable = { ankaraGDP = ankara_totalstateGDP }
		divide_variable = { tokatGDP = tokat_totalstateGDP }
		divide_variable = { konyaGDP = konya_totalstateGDP }
		divide_variable = { kayseriGDP = kayseri_totalstateGDP }
		divide_variable = { zonguldakGDP = zonguldak_totalstateGDP }
		divide_variable = { kastamonuGDP = kastamonu_totalstateGDP }
		divide_variable = { samsunGDP = samsun_totalstateGDP }
		divide_variable = { trabzonGDP = trabzon_totalstateGDP }
		divide_variable = { rizeGDP = rize_totalstateGDP }
		divide_variable = { antalyaGDP = antalya_totalstateGDP }
		divide_variable = { adanaGDP = adana_totalstateGDP }
		divide_variable = { gaziantepGDP = gaziantep_totalstateGDP }
		divide_variable = { hatayGDP = hatay_totalstateGDP }
		divide_variable = { malatyaGDP = malatya_totalstateGDP }
		divide_variable = { erzurumGDP = erzurum_totalstateGDP }
		divide_variable = { agriGDP = agri_totalstateGDP }
		divide_variable = { diyarbakirGDP = diyarbakir_totalstateGDP }
		divide_variable = { vanGDP = van_totalstateGDP }
		divide_variable = { mardinGDP = mardin_totalstateGDP }
		
		every_owned_state = {
			if = {
				limit = {
					has_state_flag = GDP_regions_turkish_syria
				}
				multiply_variable = { state_value = PREV.turkish_syriaGDP }
			}
			else_if = {
				limit = {
					state = 1565
				}
				multiply_variable = { state_value = PREV.batumGDP }
			}
			else_if = {
				limit = {
					state = 1567
				}
				multiply_variable = { state_value = PREV.nakhchivanGDP }
			}
			else_if = {
				limit = {
					state = 1267
				}
				multiply_variable = { state_value = PREV.e_thraceGDP }
			}
			else_if = {
				limit = {
					state = 341
				}
				multiply_variable = { state_value = PREV.istanbulGDP }
			}
			else_if = {
				limit = {
					state = 347
				}
				multiply_variable = { state_value = PREV.kocaeliGDP }
			}
			else_if = {
				limit = {
					state = 340
				}
				multiply_variable = { state_value = PREV.bursaGDP }
			}
			else_if = {
				limit = {
					state = 345
				}
				multiply_variable = { state_value = PREV.balikesirGDP }
			}
			else_if = {
				limit = {
					state = 339
				}
				multiply_variable = { state_value = PREV.izmirGDP }
			}
			else_if = {
				limit = {
					state = 349
				}
				multiply_variable = { state_value = PREV.muglaGDP }
			}
			else_if = {
				limit = {
					state = 343
				}
				multiply_variable = { state_value = PREV.afyonGDP }
			}
			else_if = {
				limit = {
					state = 49
				}
				multiply_variable = { state_value = PREV.ankaraGDP }
			}
			else_if = {
				limit = {
					state = 1987
				}
				multiply_variable = { state_value = PREV.tokatGDP }
			}
			else_if = {
				limit = {
					state = 346
				}
				multiply_variable = { state_value = PREV.konyaGDP }
			}
			else_if = {
				limit = {
					state = 348
				}
				multiply_variable = { state_value = PREV.kayseriGDP }
			}
			else_if = {
				limit = {
					state = 1986
				}
				multiply_variable = { state_value = PREV.zonguldakGDP }
			}
			else_if = {
				limit = {
					state = 356
				}
				multiply_variable = { state_value = PREV.kastamonuGDP }
			}
			else_if = {
				limit = {
					state = 355
				}
				multiply_variable = { state_value = PREV.samsunGDP }
			}
			else_if = {
				limit = {
					state = 354
				}
				multiply_variable = { state_value = PREV.trabzonGDP }
			}
			else_if = {
				limit = {
					state = 1448
				}
				multiply_variable = { state_value = PREV.rizeGDP }
			}
			else_if = {
				limit = {
					state = 342
				}
				multiply_variable = { state_value = PREV.antalyaGDP }
			}
			else_if = {
				limit = {
					state = 344
				}
				multiply_variable = { state_value = PREV.adanaGDP }
			}
			else_if = {
				limit = {
					state = 1991
				}
				multiply_variable = { state_value = PREV.gaziantepGDP }
			}
			else_if = {
				limit = {
					state = 1988
				}
				multiply_variable = { state_value = PREV.hatayGDP }
			}
			else_if = {
				limit = {
					state = 1989
				}
				multiply_variable = { state_value = PREV.malatyaGDP }
			}
			else_if = {
				limit = {
					state = 353
				}
				multiply_variable = { state_value = PREV.erzurumGDP }
			}
			else_if = {
				limit = {
					state = 1990
				}
				multiply_variable = { state_value = PREV.agriGDP }
			}
			else_if = {
				limit = {
					state = 350
				}
				multiply_variable = { state_value = PREV.diyarbakirGDP }
			}
			else_if = {
				limit = {
					state = 352
				}
				multiply_variable = { state_value = PREV.vanGDP }
			}
			else_if = {
				limit = {
					state = 1992
				}
				multiply_variable = { state_value = PREV.mardinGDP }
			}
		}
	}
	if = {
		limit = {
			tag = FIN
		}
		set_variable = { kareliaGDP = 0.337 }
		
		multiply_variable = { karelia_totalstateGDP = neededGDP }
		divide_variable = { karelia_totalstateGDP = 1000 }
		
		set_temp_variable = { totalgdp_else_temp = GDP }
		subtract_from_temp_variable = { totalgdp_else_temp = karelia_totalstateGDP }
		
		set_variable = { finland_proper_gdp = 5.789 }
		
		divide_variable = { kareliaGDP = karelia_totalstateGDP }
		divide_variable = { finland_proper_gdp = totalgdp_else_temp }
		
		every_owned_state = {
			if = {
				limit = {
					has_state_flag = GDP_regions_karelia
				}
				multiply_variable = { state_value = PREV.kareliaGDP }
			}
			else = {
				multiply_variable = { state_value = PREV.finland_proper_gdp }
			}
		}
	}
	if = {
		limit = {
			tag = MCW
		}
		set_variable = { sankt_petersburgGDP = 0.922 }
		set_variable = { wolgagebietGDP = 0.572 }
		set_variable = { paulusburgGDP = 0.563 }
		set_variable = { platenfurtGDP = 0.539 }
		
		multiply_variable = { sankt_petersburg_totalstateGDP = neededGDP }
		multiply_variable = { wolgagebiet_totalstateGDP = neededGDP }
		multiply_variable = { paulusburg_totalstateGDP = neededGDP }
		multiply_variable = { platenfurt_totalstateGDP = neededGDP }
		divide_variable = { sankt_petersburg_totalstateGDP = 1000 }
		divide_variable = { wolgagebiet_totalstateGDP = 1000 }
		divide_variable = { paulusburg_totalstateGDP = 1000 }
		divide_variable = { platenfurt_totalstateGDP = 1000 }
		
		set_temp_variable = { totalgdp_else_temp = GDP }
		subtract_from_temp_variable = { totalgdp_else_temp = sankt_petersburg_totalstateGDP }
		subtract_from_temp_variable = { totalgdp_else_temp = wolgagebiet_totalstateGDP }
		subtract_from_temp_variable = { totalgdp_else_temp = paulusburg_totalstateGDP }
		subtract_from_temp_variable = { totalgdp_else_temp = platenfurt_totalstateGDP }
		
		set_variable = { russian_moskGDP = 16.662 }
		
		divide_variable = { sankt_petersburgGDP = sankt_petersburg_totalstateGDP }
		divide_variable = { wolgagebietGDP = wolgagebiet_totalstateGDP }
		divide_variable = { paulusburgGDP = paulusburg_totalstateGDP }
		divide_variable = { platenfurtGDP = platenfurt_totalstateGDP }
		divide_variable = { russian_moskGDP = totalgdp_else_temp }
		
		every_owned_state = {
			if = {
				limit = {
					state = 195
				}
				multiply_variable = { state_value = PREV.sankt_petersburgGDP }
			}
			else_if = {
				limit = {
					state = 239
				}
				multiply_variable = { state_value = PREV.wolgagebietGDP }
			}
			else_if = {
				limit = {
					state = 243
				}
				multiply_variable = { state_value = PREV.paulusburgGDP }
			}
			else_if = {
				limit = {
					state = 260
				}
				multiply_variable = { state_value = PREV.platenfurtGDP }
			}
			else = {
				multiply_variable = { state_value = PREV.russian_moskGDP }
			}
		}
	}
	if = {
		limit = {
			tag = OST
		}
		set_variable = { estoniaGDP = 1.815 }
		set_variable = { latviaGDP = 2.303 }
		set_variable = { lithuaniaGDP = 4.032 }
		set_variable = { rigaGDP = 0.794 }
		set_variable = { belarusGDP = 2.825 }
		set_variable = { pleskauGDP = 0.733 }
		set_variable = { lukiGDP = 0.375 }
		
		multiply_variable = { estonia_totalstateGDP = neededGDP }
		multiply_variable = { latvia_totalstateGDP = neededGDP }
		multiply_variable = { lithuania_totalstateGDP = neededGDP }
		multiply_variable = { riga_totalstateGDP = neededGDP }
		multiply_variable = { belarus_totalstateGDP = neededGDP }
		multiply_variable = { pleskau_totalstateGDP = neededGDP }
		multiply_variable = { luki_totalstateGDP = neededGDP }
		
		divide_variable = { estonia_totalstateGDP = 1000 }
		divide_variable = { latvia_totalstateGDP = 1000 }
		divide_variable = { lithuania_totalstateGDP = 1000 }
		divide_variable = { riga_totalstateGDP = 1000 }
		divide_variable = { belarus_totalstateGDP = 1000 }
		divide_variable = { pleskau_totalstateGDP = 1000 }
		divide_variable = { luki_totalstateGDP = 1000 }
		
		divide_variable = { estoniaGDP = estonia_totalstateGDP }
		divide_variable = { latviaGDP = latvia_totalstateGDP }
		divide_variable = { lithuaniaGDP = lithuania_totalstateGDP }
		divide_variable = { rigaGDP = riga_totalstateGDP }
		divide_variable = { belarusGDP = belarus_totalstateGDP }
		divide_variable = { pleskauGDP = pleskau_totalstateGDP }
		divide_variable = { lukiGDP = luki_totalstateGDP }
		
		every_owned_state = {
			if = {
				limit = {
					has_state_flag = GDP_regions_estonia
				}
				multiply_variable = { state_value = PREV.estoniaGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_latvia
				}
				multiply_variable = { state_value = PREV.latviaGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_lithuania
				}
				multiply_variable = { state_value = PREV.lithuaniaGDP }
			}
			else_if = {
				limit = {
					state = 1397
				}
				multiply_variable = { state_value = PREV.rigaGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_belarus
				}
				multiply_variable = { state_value = PREV.belarusGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_pleskau
				}
				multiply_variable = { state_value = PREV.pleskauGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_luki
				}
				multiply_variable = { state_value = PREV.lukiGDP }
			}
		}
	}
	if = {
		limit = {
			tag = HUN
		}
		set_variable = { transylvaniaGDP = 1.604 }
		set_variable = { southern_slovakiaGDP = 0.877 }
		set_variable = { carpathian_rutheniaGDP = 0.613 }
		
		multiply_variable = { transylvania_totalstateGDP = neededGDP }
		multiply_variable = { southern_slovakia_totalstateGDP = neededGDP }
		multiply_variable = { carpathian_ruthenia_totalstateGDP = neededGDP }
		divide_variable = { transylvania_totalstateGDP = 1000 }
		divide_variable = { southern_slovakia_totalstateGDP = 1000 }
		divide_variable = { carpathian_ruthenia_totalstateGDP = 1000 }
		
		set_temp_variable = { totalgdp_else_temp = GDP }
		subtract_from_temp_variable = { totalgdp_else_temp = transylvania_totalstateGDP }
		subtract_from_temp_variable = { totalgdp_else_temp = southern_slovakia_totalstateGDP }
		subtract_from_temp_variable = { totalgdp_else_temp = carpathian_ruthenia_totalstateGDP }
		
		set_variable = { hungary_proper_gdp = 9.792 }
		
		divide_variable = { transylvaniaGDP = transylvania_totalstateGDP }
		divide_variable = { southern_slovakiaGDP = southern_slovakia_totalstateGDP }
		divide_variable = { carpathian_rutheniaGDP = carpathian_ruthenia_totalstateGDP }
		divide_variable = { hungary_proper_gdp = totalgdp_else_temp }
		
		every_owned_state = {
			if = {
				limit = {
					has_state_flag = GDP_regions_transylvania
				}
				multiply_variable = { state_value = PREV.transylvaniaGDP }
			}
			else_if = {
				limit = {
					state = 664
				}
				multiply_variable = { state_value = PREV.southern_slovakiaGDP }
			}
			else_if = {
				limit = {
					state = 73
				}
				multiply_variable = { state_value = PREV.carpathian_rutheniaGDP }
			}
			else = {
				multiply_variable = { state_value = PREV.hungary_proper_gdp }
			}
		}
	}
	if = {
		limit = {
			tag = BUL
		}
		set_variable = { macedoniaGDP = 0.472 }
		set_variable = { vranjeGDP = 0.141 }
		set_variable = { belomoraGDP = 0.246 }
		
		multiply_variable = { macedonia_totalstateGDP = neededGDP }
		multiply_variable = { vranje_totalstateGDP = neededGDP }
		multiply_variable = { belomora_totalstateGDP = neededGDP }
		divide_variable = { macedonia_totalstateGDP = 1000 }
		divide_variable = { vranje_totalstateGDP = 1000 }
		divide_variable = { belomora_totalstateGDP = 1000 }
		
		set_temp_variable = { totalgdp_else_temp = GDP }
		subtract_from_temp_variable = { totalgdp_else_temp = macedonia_totalstateGDP }
		subtract_from_temp_variable = { totalgdp_else_temp = vranje_totalstateGDP }
		subtract_from_temp_variable = { belomora_else_temp = vranje_totalstateGDP }
		
		set_variable = { bulgaria_proper_gdp = 5.338 }
		
		divide_variable = { macedoniaGDP = macedonia_totalstateGDP }
		divide_variable = { vranjeGDP = vranje_totalstateGDP }
		divide_variable = { belomoraGDP = belomora_totalstateGDP }
		divide_variable = { bulgaria_proper_gdp = totalgdp_else_temp }
		
		every_owned_state = {
			if = {
				limit = {
					has_state_flag = GDP_regions_macedonia
				}
				multiply_variable = { state_value = PREV.macedoniaGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_vranje
				}
				multiply_variable = { state_value = PREV.vranjeGDP }
			}
			else_if = {
				limit = {
					state = 184
				}
				multiply_variable = { state_value = PREV.belomoraGDP }
			}
			else = {
				multiply_variable = { state_value = PREV.bulgaria_proper_gdp }
			}
		}
	}
	if = {
		limit = {
			tag = EGY
		}
		set_variable = { sudanGDP = 2.234 }
		
		multiply_variable = { sudan_totalstateGDP = neededGDP }
		divide_variable = { sudan_totalstateGDP = 1000 }
		
		set_temp_variable = { totalgdp_else_temp = GDP }
		subtract_from_temp_variable = { totalgdp_else_temp = sudan_totalstateGDP }
		
		set_variable = { egypt_proper_gdp = 5.669 }
		
		divide_variable = { sudanGDP = sudan_totalstateGDP }
		divide_variable = { egypt_proper_gdp = totalgdp_else_temp }
		
		every_owned_state = {
			if = {
				limit = {
					has_state_flag = GDP_regions_sudan
				}
				multiply_variable = { state_value = PREV.sudanGDP }
			}
			else = {
				multiply_variable = { state_value = PREV.egypt_proper_gdp }
			}
		}
	}
	if = {
		limit = {
			tag = CAU
		}
		set_variable = { georgiaGDP = 3.398 }
		set_variable = { azerbaijanGDP = 1.363 }
		set_variable = { bakuGDP = 1.612 }
		
		multiply_variable = { georgia_totalstateGDP = neededGDP }
		multiply_variable = { azerbaijan_totalstateGDP = neededGDP }
		multiply_variable = { baku_totalstateGDP = neededGDP }
		divide_variable = { georgia_totalstateGDP = 1000 }
		divide_variable = { azerbaijan_totalstateGDP = 1000 }
		divide_variable = { baku_totalstateGDP = 1000 }
		
		set_temp_variable = { totalgdp_else_temp = GDP }
		subtract_from_temp_variable = { totalgdp_else_temp = georgia_totalstateGDP }
		subtract_from_temp_variable = { totalgdp_else_temp = azerbaijan_totalstateGDP }
		subtract_from_temp_variable = { totalgdp_else_temp = baku_totalstateGDP }
		
		set_variable = { north_kaukasien_gdp = 4.149 }
		
		divide_variable = { georgiaGDP = georgia_totalstateGDP }
		divide_variable = { azerbaijanGDP = azerbaijan_totalstateGDP }
		divide_variable = { bakuGDP = baku_totalstateGDP }
		divide_variable = { north_kaukasien_gdp = totalgdp_else_temp }
		
		every_owned_state = {
			if = {
				limit = {
					has_state_flag = GDP_regions_georgia
				}
				multiply_variable = { state_value = PREV.georgiaGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_azerbaijan
				}
				multiply_variable = { state_value = PREV.azerbaijanGDP }
			}
			else_if = {
				limit = {
					state = 1552
				}
				multiply_variable = { state_value = PREV.bakuGDP }
			}
			else = {
				multiply_variable = { state_value = PREV.north_kaukasien_gdp }
			}
		}
	}
	if = {
		limit = {
			tag = GRE
		}
		set_variable = { cyprusGDP = 0.270 }
		
		multiply_variable = { cyprus_totalstateGDP = neededGDP }
		divide_variable = { cyprus_totalstateGDP = 1000 }
		
		set_temp_variable = { totalgdp_else_temp = GDP }
		subtract_from_temp_variable = { totalgdp_else_temp = cyprus_totalstateGDP }
		
		set_variable = { greece_proper_gdp = 3.530 }
		
		divide_variable = { cyprusGDP = cyprus_totalstateGDP }
		divide_variable = { greece_proper_gdp = totalgdp_else_temp }
		
		every_owned_state = {
			if = {
				limit = {
					has_state_flag = GDP_regions_cyprus
				}
				multiply_variable = { state_value = PREV.cyprusGDP }
			}
			else = {
				multiply_variable = { state_value = PREV.greece_proper_gdp }
			}
		}
	}
	if = {
		limit = {
			tag = CRO
		}
		set_variable = { bosniaGDP = 0.729 }
		
		multiply_variable = { bosnia_totalstateGDP = neededGDP }
		divide_variable = { bosnia_totalstateGDP = 1000 }
		
		set_temp_variable = { totalgdp_else_temp = GDP }
		subtract_from_temp_variable = { totalgdp_else_temp = cyprus_totalstateGDP }
		
		set_variable = { croatia_proper_gdp = 2.102 }
		
		divide_variable = { bosniaGDP = bosnia_totalstateGDP }
		divide_variable = { croatia_proper_gdp = totalgdp_else_temp }
		
		every_owned_state = {
			if = {
				limit = {
					has_state_flag = GDP_regions_bosnia
				}
				multiply_variable = { state_value = PREV.bosniaGDP }
			}
			else = {
				multiply_variable = { state_value = PREV.croatia_proper_gdp }
			}
		}
	}
	if = {
		limit = {
			tag = IRQ
		}
		set_variable = { kuwaitGDP = 1.706 }
		
		multiply_variable = { kuwait_totalstateGDP = neededGDP }
		divide_variable = { kuwait_totalstateGDP = 1000 }
		
		set_temp_variable = { totalgdp_else_temp = GDP }
		subtract_from_temp_variable = { totalgdp_else_temp = kuwait_totalstateGDP }
		
		set_variable = { iraq_proper_gdp = 3.364 }
		
		divide_variable = { kuwaitGDP = kuwait_totalstateGDP }
		divide_variable = { iraq_proper_gdp = totalgdp_else_temp }
		
		every_owned_state = {
			if = {
				limit = {
					state = 656
				}
				multiply_variable = { state_value = PREV.kuwaitGDP }
			}
			else = {
				multiply_variable = { state_value = PREV.iraq_proper_gdp }
			}
		}
	}
	if = {
		limit = {
			tag = GUL
		}
		set_variable = { bahrainGDP = 0.106 }
		set_variable = { qatarGDP = 0.269 }
		
		multiply_variable = { bahrain_totalstateGDP = neededGDP }
		multiply_variable = { qatar_totalstateGDP = neededGDP }
		divide_variable = { bahrain_totalstateGDP = 1000 }
		divide_variable = { qatar_totalstateGDP = 1000 }
		
		set_temp_variable = { totalgdp_else_temp = GDP }
		subtract_from_temp_variable = { totalgdp_else_temp = bahrain_totalstateGDP }
		subtract_from_temp_variable = { totalgdp_else_temp = qatar_totalstateGDP }
		
		set_variable = { UAE_gdp = 0.520 }
		
		divide_variable = { bahrainGDP = bahrain_totalstateGDP }
		divide_variable = { qatarGDP = qatar_totalstateGDP }
		divide_variable = { UAE_gdp = totalgdp_else_temp }
		
		every_owned_state = {
			if = {
				limit = {
					state = 1789
				}
				multiply_variable = { state_value = PREV.bahrainGDP }
			}
			else_if = {
				limit = {
					state = 1335
				}
				multiply_variable = { state_value = PREV.qatarGDP }
			}
			else = {
				multiply_variable = { state_value = PREV.UAE_gdp }
			}
		}
	}
	if = {
		limit = {
			tag = URG
		}
		set_variable = { montevideoGDP = 1.431 }
		set_variable = { metropolitanaGDP = 0.274 }
		set_variable = { centroGDP = 0.133 }
		set_variable = { esteGDP = 0.204 }
		set_variable = { noresteGDP = 0.157 }
		set_variable = { litoral_surGDP = 0.217 }
		set_variable = { litoral_norteGDP = 0.196 }
		
		multiply_variable = { montevideo_totalstateGDP = neededGDP }
		multiply_variable = { metropolitana_totalstateGDP = neededGDP }
		multiply_variable = { centro_totalstateGDP = neededGDP }
		multiply_variable = { este_totalstateGDP = neededGDP }
		multiply_variable = { noreste_totalstateGDP = neededGDP }
		multiply_variable = { litoral_sur_totalstateGDP = neededGDP }
		multiply_variable = { litoral_norte_totalstateGDP = neededGDP }
		
		divide_variable = { montevideo_totalstateGDP = 1000 }
		divide_variable = { metropolitana_totalstateGDP = 1000 }
		divide_variable = { centro_totalstateGDP = 1000 }
		divide_variable = { este_totalstateGDP = 1000 }
		divide_variable = { noreste_totalstateGDP = 1000 }
		divide_variable = { litoral_sur_totalstateGDP = 1000 }
		divide_variable = { litoral_norte_totalstateGDP = 1000 }
		
		divide_variable = { montevideoGDP = montevideo_totalstateGDP }
		divide_variable = { metropolitanaGDP = metropolitana_totalstateGDP }
		divide_variable = { centroGDP = centro_totalstateGDP }
		divide_variable = { esteGDP = este_totalstateGDP }
		divide_variable = { noresteGDP = noreste_totalstateGDP }
		divide_variable = { litoral_surGDP = litoral_sur_totalstateGDP }
		divide_variable = { litoral_norteGDP = litoral_norte_totalstateGDP }
		
		every_owned_state = {
			if = {
				limit = {
					state = 1629
				}
				multiply_variable = { state_value = PREV.montevideoGDP }
			}
			else_if = {
				limit = {
					state = 300
				}
				multiply_variable = { state_value = PREV.metropolitanaGDP }
			}
			else_if = {
				limit = {
					state = 1630
				}
				multiply_variable = { state_value = PREV.centroGDP }
			}
			else_if = {
				limit = {
					state = 1631
				}
				multiply_variable = { state_value = PREV.esteGDP }
			}
			else_if = {
				limit = {
					state = 1634
				}
				multiply_variable = { state_value = PREV.noresteGDP }
			}
			else_if = {
				limit = {
					state = 1632
				}
				multiply_variable = { state_value = PREV.litoral_surGDP }
			}
			else_if = {
				limit = {
					state = 1633
				}
				multiply_variable = { state_value = PREV.litoral_norteGDP }
			}
		}
	}
	if = {
		limit = {
			tag = BRA
		}
		set_variable = { amazonasGDP = 0.113 }
		set_variable = { paraGDP = 0.450 }
		set_variable = { maranhaoGDP = 0.487 }
		set_variable = { piauiGDP = 0.217 }
		set_variable = { cearaGDP = 0.631 }
		set_variable = { rio_grande_nGDP = 0.197 }
		set_variable = { paraibaGDP = 0.536 }
		set_variable = { pernambucoGDP = 0.927 }
		set_variable = { alagoasGDP = 0.222 }
		set_variable = { sergipeGDP = 0.123 }
		set_variable = { bahiaGDP = 0.663 }
		set_variable = { espirito_santoGDP = 0.325 }
		set_variable = { rioGDP = 5.726 }
		set_variable = { sao_pauloGDP = 11.738 }
		set_variable = { minas_geraisGDP = 3.413 }
		set_variable = { paranaGDP = 1.700 }
		set_variable = { santa_catarinaGDP = 0.850 }
		set_variable = { rio_grande_sGDP = 2.581 }
		set_variable = { mato_grossoGDP = 0.374 }
		set_variable = { goiasGDP = 0.714 }
		set_variable = { brasiliaGDP = 0.072 }
		
		multiply_variable = { amazonas_totalstateGDP = neededGDP }
		multiply_variable = { para_totalstateGDP = neededGDP }
		multiply_variable = { maranhao_totalstateGDP = neededGDP }
		multiply_variable = { piaui_totalstateGDP = neededGDP }
		multiply_variable = { ceara_totalstateGDP = neededGDP }
		multiply_variable = { rio_grande_n_totalstateGDP = neededGDP }
		multiply_variable = { paraiba_totalstateGDP = neededGDP }
		multiply_variable = { pernambuco_totalstateGDP = neededGDP }
		multiply_variable = { alagoas_totalstateGDP = neededGDP }
		multiply_variable = { sergipe_totalstateGDP = neededGDP }
		multiply_variable = { bahia_totalstateGDP = neededGDP }
		multiply_variable = { espirito_santo_totalstateGDP = neededGDP }
		multiply_variable = { rio_totalstateGDP = neededGDP }
		multiply_variable = { sao_paulo_totalstateGDP = neededGDP }
		multiply_variable = { minas_gerais_totalstateGDP = neededGDP }
		multiply_variable = { parana_totalstateGDP = neededGDP }
		multiply_variable = { santa_catarina_totalstateGDP = neededGDP }
		multiply_variable = { rio_grande_s_totalstateGDP = neededGDP }
		multiply_variable = { mato_grosso_totalstateGDP = neededGDP }
		multiply_variable = { goias_totalstateGDP = neededGDP }
		multiply_variable = { brasilia_totalstateGDP = neededGDP }
		
		divide_variable = { amazonas_totalstateGDP = 1000 }
		divide_variable = { para_totalstateGDP = 1000 }
		divide_variable = { maranhao_totalstateGDP = 1000 }
		divide_variable = { piaui_totalstateGDP = 1000 }
		divide_variable = { ceara_totalstateGDP = 1000 }
		divide_variable = { rio_grande_n_totalstateGDP = 1000 }
		divide_variable = { paraiba_totalstateGDP = 1000 }
		divide_variable = { pernambuco_totalstateGDP = 1000 }
		divide_variable = { alagoas_totalstateGDP = 1000 }
		divide_variable = { sergipe_totalstateGDP = 1000 }
		divide_variable = { bahia_totalstateGDP = 1000 }
		divide_variable = { espirito_santo_totalstateGDP = 1000 }
		divide_variable = { rio_totalstateGDP = 1000 }
		divide_variable = { sao_paulo_totalstateGDP = 1000 }
		divide_variable = { minas_gerais_totalstateGDP = 1000 }
		divide_variable = { parana_totalstateGDP = 1000 }
		divide_variable = { santa_catarina_totalstateGDP = 1000 }
		divide_variable = { rio_grande_s_totalstateGDP = 1000 }
		divide_variable = { mato_grosso_totalstateGDP = 1000 }
		divide_variable = { goias_totalstateGDP = 1000 }
		divide_variable = { brasilia_totalstateGDP = 1000 }
		
		divide_variable = { amazonasGDP = amazonas_totalstateGDP }
		divide_variable = { paraGDP = para_totalstateGDP }
		divide_variable = { maranhaoGDP = maranhao_totalstateGDP }
		divide_variable = { piauiGDP = piaui_totalstateGDP }
		divide_variable = { cearaGDP = ceara_totalstateGDP }
		divide_variable = { rio_grande_nGDP = rio_grande_n_totalstateGDP }
		divide_variable = { paraibaGDP = paraiba_totalstateGDP }
		divide_variable = { pernambucoGDP = pernambuco_totalstateGDP }
		divide_variable = { alagoasGDP = alagoas_totalstateGDP }
		divide_variable = { sergipeGDP = sergipe_totalstateGDP }
		divide_variable = { bahiaGDP = bahia_totalstateGDP }
		divide_variable = { espirito_santoGDP = espirito_santo_totalstateGDP }
		divide_variable = { rioGDP = rio_totalstateGDP }
		divide_variable = { sao_pauloGDP = sao_paulo_totalstateGDP }
		divide_variable = { minas_geraisGDP = minas_gerais_totalstateGDP }
		divide_variable = { paranaGDP = parana_totalstateGDP }
		divide_variable = { santa_catarinaGDP = santa_catarina_totalstateGDP }
		divide_variable = { rio_grande_sGDP = rio_grande_s_totalstateGDP }
		divide_variable = { mato_grossoGDP = mato_grosso_totalstateGDP }
		divide_variable = { goiasGDP = goias_totalstateGDP }
		divide_variable = { brasiliaGDP = brasilia_totalstateGDP }
		
		every_owned_state = {
			if = {
				limit = {
					has_state_flag = GDP_regions_amazonas
				}
				multiply_variable = { state_value = PREV.amazonasGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_para
				}
				multiply_variable = { state_value = PREV.paraGDP }
			}
			else_if = {
				limit = {
					state = 497
				}
				multiply_variable = { state_value = PREV.maranhaoGDP }
			}
			else_if = {
				limit = {
					state = 1484
				}
				multiply_variable = { state_value = PREV.piauiGDP }
			}
			else_if = {
				limit = {
					state = 504
				}
				multiply_variable = { state_value = PREV.cearaGDP }
			}
			else_if = {
				limit = {
					state = 498
				}
				multiply_variable = { state_value = PREV.rio_grande_nGDP }
			}
			else_if = {
				limit = {
					state = 1492
				}
				multiply_variable = { state_value = PREV.paraibaGDP }
			}
			else_if = {
				limit = {
					state = 1491
				}
				multiply_variable = { state_value = PREV.pernambucoGDP }
			}
			else_if = {
				limit = {
					state = 1490
				}
				multiply_variable = { state_value = PREV.alagoasGDP }
			}
			else_if = {
				limit = {
					state = 1485
				}
				multiply_variable = { state_value = PREV.sergipeGDP }
			}
			else_if = {
				limit = {
					state = 499
				}
				multiply_variable = { state_value = PREV.bahiaGDP }
			}
			else_if = {
				limit = {
					state = 1487
				}
				multiply_variable = { state_value = PREV.espirito_santoGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_rio
				}
				multiply_variable = { state_value = PREV.rioGDP }
			}
			else_if = {
				limit = {
					state = 501
				}
				multiply_variable = { state_value = PREV.sao_pauloGDP }
			}
			else_if = {
				limit = {
					state = 496
				}
				multiply_variable = { state_value = PREV.minas_geraisGDP }
			}
			else_if = {
				limit = {
					state = 503
				}
				multiply_variable = { state_value = PREV.paranaGDP }
			}
			else_if = {
				limit = {
					state = 1486
				}
				multiply_variable = { state_value = PREV.santa_catarinaGDP }
			}
			else_if = {
				limit = {
					state = 502
				}
				multiply_variable = { state_value = PREV.rio_grande_sGDP }
			}
			else_if = {
				limit = {
					state = 1489
				}
				multiply_variable = { state_value = PREV.brasiliaGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_mato_grosso
				}
				multiply_variable = { state_value = PREV.mato_grossoGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_goias
				}
				multiply_variable = { state_value = PREV.goiasGDP }
			}
		}
	}
	if = {
		limit = {
			tag = ARG
		}
		set_variable = { buenos_aires_cGDP = 7.301 }
		set_variable = { buenos_aires_pGDP = 9.834 }
		set_variable = { cordobaGDP = 3.383 }
		set_variable = { santa_feGDP = 2.550 }
		set_variable = { entre_riosGDP = 0.643 }
		set_variable = { corrientesGDP = 0.360 }
		set_variable = { misionesGDP = 0.210 }
		set_variable = { chacoGDP = 0.463 }
		set_variable = { formosaGDP = 0.089 }
		set_variable = { santiago_del_esteroGDP = 0.196 }
		set_variable = { salta_jujuyGDP = 0.497 }
		set_variable = { tucumanGDP = 0.429 }
		set_variable = { catamarcaGDP = 0.318 }
		set_variable = { san_juanGDP = 0.477 }
		set_variable = { mendozaGDP = 1.002 }
		set_variable = { la_pampaGDP = 0.313 }
		set_variable = { neuquenGDP = 0.092 }
		set_variable = { rio_negroGDP = 0.275 }
		set_variable = { chubutGDP = 0.160 }
		set_variable = { santa_cruzGDP = 0.426 }
		
		multiply_variable = { buenos_aires_c_totalstateGDP = neededGDP }
		multiply_variable = { buenos_aires_p_totalstateGDP = neededGDP }
		multiply_variable = { cordoba_totalstateGDP = neededGDP }
		multiply_variable = { santa_fe_totalstateGDP = neededGDP }
		multiply_variable = { entre_rios_totalstateGDP = neededGDP }
		multiply_variable = { corrientes_totalstateGDP = neededGDP }
		multiply_variable = { misiones_totalstateGDP = neededGDP }
		multiply_variable = { chaco_totalstateGDP = neededGDP }
		multiply_variable = { formosa_totalstateGDP = neededGDP }
		multiply_variable = { santiago_del_estero_totalstateGDP = neededGDP }
		multiply_variable = { salta_jujuy_totalstateGDP = neededGDP }
		multiply_variable = { tucuman_totalstateGDP = neededGDP }
		multiply_variable = { catamarca_totalstateGDP = neededGDP }
		multiply_variable = { san_juan_totalstateGDP = neededGDP }
		multiply_variable = { mendoza_totalstateGDP = neededGDP }
		multiply_variable = { la_pampa_totalstateGDP = neededGDP }
		multiply_variable = { neuquen_totalstateGDP = neededGDP }
		multiply_variable = { rio_negro_totalstateGDP = neededGDP }
		multiply_variable = { chubut_totalstateGDP = neededGDP }
		multiply_variable = { santa_cruz_totalstateGDP = neededGDP }
		
		divide_variable = { buenos_aires_c_totalstateGDP = 1000 }
		divide_variable = { buenos_aires_p_totalstateGDP = 1000 }
		divide_variable = { cordoba_totalstateGDP = 1000 }
		divide_variable = { santa_fe_totalstateGDP = 1000 }
		divide_variable = { entre_rios_totalstateGDP = 1000 }
		divide_variable = { corrientes_totalstateGDP = 1000 }
		divide_variable = { misiones_totalstateGDP = 1000 }
		divide_variable = { chaco_totalstateGDP = 1000 }
		divide_variable = { formosa_totalstateGDP = 1000 }
		divide_variable = { santiago_del_estero_totalstateGDP = 1000 }
		divide_variable = { salta_jujuy_totalstateGDP = 1000 }
		divide_variable = { tucuman_totalstateGDP = 1000 }
		divide_variable = { catamarca_totalstateGDP = 1000 }
		divide_variable = { san_juan_totalstateGDP = 1000 }
		divide_variable = { mendoza_totalstateGDP = 1000 }
		divide_variable = { la_pampa_totalstateGDP = 1000 }
		divide_variable = { neuquen_totalstateGDP = 1000 }
		divide_variable = { rio_negro_totalstateGDP = 1000 }
		divide_variable = { chubut_totalstateGDP = 1000 }
		divide_variable = { santa_cruz_totalstateGDP = 1000 }
		
		divide_variable = { buenos_aires_cGDP = buenos_aires_c_totalstateGDP }
		divide_variable = { buenos_aires_pGDP = buenos_aires_p_totalstateGDP }
		divide_variable = { cordobaGDP = cordoba_totalstateGDP }
		divide_variable = { santa_feGDP = santa_fe_totalstateGDP }
		divide_variable = { entre_riosGDP = entre_rios_totalstateGDP }
		divide_variable = { corrientesGDP = corrientes_totalstateGDP }
		divide_variable = { misionesGDP = misiones_totalstateGDP }
		divide_variable = { chacoGDP = chaco_totalstateGDP }
		divide_variable = { formosaGDP = formosa_totalstateGDP }
		divide_variable = { santiago_del_esteroGDP = santiago_del_estero_totalstateGDP }
		divide_variable = { salta_jujuyGDP = salta_jujuy_totalstateGDP }
		divide_variable = { tucumanGDP = tucuman_totalstateGDP }
		divide_variable = { catamarcaGDP = catamarca_totalstateGDP }
		divide_variable = { san_juanGDP = san_juan_totalstateGDP }
		divide_variable = { mendozaGDP = mendoza_totalstateGDP }
		divide_variable = { la_pampaGDP = la_pampa_totalstateGDP }
		divide_variable = { neuquenGDP = neuquen_totalstateGDP }
		divide_variable = { rio_negroGDP = rio_negro_totalstateGDP }
		divide_variable = { chubutGDP = chubut_totalstateGDP }
		divide_variable = { santa_cruzGDP = santa_cruz_totalstateGDP }
		
		every_owned_state = {
			if = {
				limit = {
					state = 1511
				}
				multiply_variable = { state_value = PREV.buenos_aires_cGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_la_plata
				}
				multiply_variable = { state_value = PREV.buenos_aires_pGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_cordoba
				}
				multiply_variable = { state_value = PREV.cordobaGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_santa_fe
				}
				multiply_variable = { state_value = PREV.santa_feGDP }
			}
			else_if = {
				limit = {
					state = 1502
				}
				multiply_variable = { state_value = PREV.entre_riosGDP }
			}
			else_if = {
				limit = {
					state = 1501
				}
				multiply_variable = { state_value = PREV.corrientesGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_misiones
				}
				multiply_variable = { state_value = PREV.misionesGDP }
			}
			else_if = {
				limit = {
					state = 1499
				}
				multiply_variable = { state_value = PREV.chacoGDP }
			}
			else_if = {
				limit = {
					state = 1498
				}
				multiply_variable = { state_value = PREV.formosaGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_salta_jujuy
				}
				multiply_variable = { state_value = PREV.salta_jujuyGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_santiago_del_estero
				}
				multiply_variable = { state_value = PREV.santiago_del_esteroGDP }
			}
			else_if = {
				limit = {
					state = 508
				}
				multiply_variable = { state_value = PREV.tucumanGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_catamarca
				}
				multiply_variable = { state_value = PREV.catamarcaGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_san_juan
				}
				multiply_variable = { state_value = PREV.san_juanGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_mendoza
				}
				multiply_variable = { state_value = PREV.mendozaGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_la_pampa
				}
				multiply_variable = { state_value = PREV.la_pampaGDP }
			}
			else_if = {
				limit = {
					state = 1507
				}
				multiply_variable = { state_value = PREV.neuquenGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_rio_negro
				}
				multiply_variable = { state_value = PREV.rio_negroGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_chubut
				}
				multiply_variable = { state_value = PREV.chubutGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_santa_cruz
				}
				multiply_variable = { state_value = PREV.santa_cruzGDP }
			}
		}
	}
	if = {
		limit = {
			tag = SHO
		}
		set_variable = { singaporeGDP = 0.677 }
		
		multiply_variable = { singapore_totalstateGDP = neededGDP }
		divide_variable = { singapore_totalstateGDP = 1000 }
		
		set_temp_variable = { totalgdp_else_temp = GDP }
		subtract_from_temp_variable = { totalgdp_else_temp = singapore_totalstateGDP }
		
		set_variable = { malaya_gdp = 0.551 }
		
		divide_variable = { singaporeGDP = singapore_totalstateGDP }
		divide_variable = { malaya_gdp = totalgdp_else_temp }
		
		every_owned_state = {
			if = {
				limit = {
					state = 751
				}
				multiply_variable = { state_value = PREV.singaporeGDP }
			}
			else = {
				multiply_variable = { state_value = PREV.malaya_gdp }
			}
		}
	}
	if = {
		limit = {
			tag = CHL
		}
		set_variable = { tarapacaGDP = 0.258 }
		set_variable = { antofagastaGDP = 0.346 }
		set_variable = { atacamaGDP = 0.124 }
		set_variable = { coquimboGDP = 0.165 }
		set_variable = { valparaisoGDP = 0.974 }
		set_variable = { ohigginsGDP = 0.222 }
		set_variable = { mauleGDP = 0.247 }
		set_variable = { bioGDP = 1.077 }
		set_variable = { araucaniaGDP = 0.242 }
		set_variable = { los_lagosGDP = 0.359 }
		set_variable = { aysenGDP = 0.029 }
		set_variable = { magallanesGDP = 0.231 }
		set_variable = { santiagoGDP = 3.654 }
		
		multiply_variable = { tarapaca_totalstateGDP = neededGDP }
		multiply_variable = { antofagasta_totalstateGDP = neededGDP }
		multiply_variable = { atacama_totalstateGDP = neededGDP }
		multiply_variable = { coquimbo_totalstateGDP = neededGDP }
		multiply_variable = { valparaiso_totalstateGDP = neededGDP }
		multiply_variable = { ohiggins_totalstateGDP = neededGDP }
		multiply_variable = { maule_totalstateGDP = neededGDP }
		multiply_variable = { bio_totalstateGDP = neededGDP }
		multiply_variable = { araucania_totalstateGDP = neededGDP }
		multiply_variable = { los_lagos_totalstateGDP = neededGDP }
		multiply_variable = { aysen_totalstateGDP = neededGDP }
		multiply_variable = { magallanes_totalstateGDP = neededGDP }
		multiply_variable = { santiago_totalstateGDP = neededGDP }
		
		divide_variable = { tarapaca_totalstateGDP = 1000 }
		divide_variable = { antofagasta_totalstateGDP = 1000 }
		divide_variable = { atacama_totalstateGDP = 1000 }
		divide_variable = { coquimbo_totalstateGDP = 1000 }
		divide_variable = { valparaiso_totalstateGDP = 1000 }
		divide_variable = { ohiggins_totalstateGDP = 1000 }
		divide_variable = { maule_totalstateGDP = 1000 }
		divide_variable = { bio_totalstateGDP = 1000 }
		divide_variable = { araucania_totalstateGDP = 1000 }
		divide_variable = { los_lagos_totalstateGDP = 1000 }
		divide_variable = { aysen_totalstateGDP = 1000 }
		divide_variable = { magallanes_totalstateGDP = 1000 }
		divide_variable = { santiago_totalstateGDP = 1000 }
		
		divide_variable = { tarapacaGDP = tarapaca_totalstateGDP }
		divide_variable = { antofagastaGDP = antofagasta_totalstateGDP }
		divide_variable = { atacamaGDP = atacama_totalstateGDP }
		divide_variable = { coquimboGDP = coquimbo_totalstateGDP }
		divide_variable = { valparaisoGDP = valparaiso_totalstateGDP }
		divide_variable = { ohigginsGDP = ohiggins_totalstateGDP }
		divide_variable = { mauleGDP = maule_totalstateGDP }
		divide_variable = { bioGDP = bio_totalstateGDP }
		divide_variable = { araucaniaGDP = araucania_totalstateGDP }
		divide_variable = { los_lagosGDP = los_lagos_totalstateGDP }
		divide_variable = { aysenGDP = aysen_totalstateGDP }
		divide_variable = { magallanesGDP = magallanes_totalstateGDP }
		divide_variable = { santiagoGDP = santiago_totalstateGDP }
		
		every_owned_state = {
			if = {
				limit = {
					has_state_flag = GDP_regions_tarapaca
				}
				multiply_variable = { state_value = PREV.tarapacaGDP }
			}
			else_if = {
				limit = {
					state = 506
				}
				multiply_variable = { state_value = PREV.antofagastaGDP }
			}
			else_if = {
				limit = {
					state = 1514
				}
				multiply_variable = { state_value = PREV.atacamaGDP }
			}
			else_if = {
				limit = {
					state = 1515
				}
				multiply_variable = { state_value = PREV.coquimboGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_valparaiso
				}
				multiply_variable = { state_value = PREV.valparaisoGDP }
			}
			else_if = {
				limit = {
					state = 1518
				}
				multiply_variable = { state_value = PREV.ohigginsGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_maule
				}
				multiply_variable = { state_value = PREV.mauleGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_bio
				}
				multiply_variable = { state_value = PREV.bioGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_araucania
				}
				multiply_variable = { state_value = PREV.araucaniaGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_los_lagos
				}
				multiply_variable = { state_value = PREV.los_lagosGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_aysen
				}
				multiply_variable = { state_value = PREV.aysenGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_magallanes
				}
				multiply_variable = { state_value = PREV.magallanesGDP }
			}
			else_if = {
				limit = {
					state = 279
				}
				multiply_variable = { state_value = PREV.santiagoGDP }
			}
		}
	}
	if = {
		limit = {
			tag = VEN
		}
		set_variable = { meridaGDP = 1.118 }
		set_variable = { bolivarGDP = 0.282 }
		set_variable = { sucreGDP = 1.269 }
		set_variable = { laraGDP = 1.500 }
		set_variable = { araguaGDP = 1.549 }
		set_variable = { zuliaGDP = 2.108 }
		set_variable = { mirandaGDP = 4.223 }
		
		multiply_variable = { merida_totalstateGDP = neededGDP }
		multiply_variable = { bolivar_totalstateGDP = neededGDP }
		multiply_variable = { sucre_totalstateGDP = neededGDP }
		multiply_variable = { lara_totalstateGDP = neededGDP }
		multiply_variable = { aragua_totalstateGDP = neededGDP }
		multiply_variable = { zulia_totalstateGDP = neededGDP }
		multiply_variable = { miranda_totalstateGDP = neededGDP }
		
		divide_variable = { merida_totalstateGDP = 1000 }
		divide_variable = { bolivar_totalstateGDP = 1000 }
		divide_variable = { sucre_totalstateGDP = 1000 }
		divide_variable = { lara_totalstateGDP = 1000 }
		divide_variable = { aragua_totalstateGDP = 1000 }
		divide_variable = { zulia_totalstateGDP = 1000 }
		divide_variable = { miranda_totalstateGDP = 1000 }
		
		divide_variable = { meridaGDP = merida_totalstateGDP }
		divide_variable = { bolivarGDP = bolivar_totalstateGDP }
		divide_variable = { sucreGDP = sucre_totalstateGDP }
		divide_variable = { laraGDP = lara_totalstateGDP }
		divide_variable = { araguaGDP = aragua_totalstateGDP }
		divide_variable = { zuliaGDP = zulia_totalstateGDP }
		divide_variable = { mirandaGDP = miranda_totalstateGDP }
		
		every_owned_state = {
			if = {
				limit = {
					has_state_flag = GDP_regions_sw_vz
				}
				multiply_variable = { state_value = PREV.meridaGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_bolivar
				}
				multiply_variable = { state_value = PREV.bolivarGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_sucre
				}
				multiply_variable = { state_value = PREV.sucreGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_mw_vz
				}
				multiply_variable = { state_value = PREV.laraGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_aragua
				}
				multiply_variable = { state_value = PREV.araguaGDP }
			}
			else_if = {
				limit = {
					state = 489
				}
				multiply_variable = { state_value = PREV.zuliaGDP }
			}
			else_if = {
				limit = {
					state = 307
				}
				multiply_variable = { state_value = PREV.mirandaGDP }
			}
		}
	}
	if = {
		limit = {
			tag = MEX
		}
		set_variable = { baja_california_nGDP = 0.250 }
		set_variable = { baja_california_sGDP = 0.042 }
		set_variable = { sonoraGDP = 0.303 }
		set_variable = { chihuahuaGDP = 0.814 }
		set_variable = { coahuilaGDP = 0.841 }
		set_variable = { nuevo_leonGDP = 1.511 }
		set_variable = { tamaulipasGDP = 1.263 }
		set_variable = { sinaloaGDP = 0.363 }
		set_variable = { durangoGDP = 0.285 }
		set_variable = { zacatecasGDP = 0.124 }
		set_variable = { aguascalientesGDP = 0.074 }
		set_variable = { san_luis_potosiGDP = 0.347 }
		set_variable = { guanajuatoGDP = 0.682 }
		set_variable = { queretaroGDP = 0.074 }
		set_variable = { nayaritGDP = 0.075 }
		set_variable = { jaliscoGDP = 0.959 }
		set_variable = { colimaGDP = 0.034 }
		set_variable = { michoacanGDP = 0.258 }
		set_variable = { guerreroGDP = 0.157 }
		set_variable = { mexico_sGDP = 1.656 }
		set_variable = { mexico_cGDP = 8.500 }
		set_variable = { hidalgoGDP = 0.258 }
		set_variable = { morelosGDP = 0.131 }
		set_variable = { tlaxcalaGDP = 0.080 }
		set_variable = { pueblaGDP = 0.572 }
		set_variable = { oaxacaGDP = 0.188 }
		set_variable = { veracruzGDP = 1.641 }
		set_variable = { tabascoGDP = 0.196 }
		set_variable = { chiapasGDP = 0.098 }
		set_variable = { campecheGDP = 0.079 }
		set_variable = { yucatanGDP = 0.297 }
		set_variable = { quintana_rooGDP = 0.020 }
		
		multiply_variable = { baja_california_n_totalstateGDP = neededGDP }
		multiply_variable = { baja_california_s_totalstateGDP = neededGDP }
		multiply_variable = { sonora_totalstateGDP = neededGDP }
		multiply_variable = { chihuahua_totalstateGDP = neededGDP }
		multiply_variable = { coahuila_totalstateGDP = neededGDP }
		multiply_variable = { nuevo_leon_totalstateGDP = neededGDP }
		multiply_variable = { tamaulipas_totalstateGDP = neededGDP }
		multiply_variable = { sinaloa_totalstateGDP = neededGDP }
		multiply_variable = { durango_totalstateGDP = neededGDP }
		multiply_variable = { zacatecas_totalstateGDP = neededGDP }
		multiply_variable = { aguascalientes_totalstateGDP = neededGDP }
		multiply_variable = { san_luis_potosi_totalstateGDP = neededGDP }
		multiply_variable = { guanajuato_totalstateGDP = neededGDP }
		multiply_variable = { queretaro_totalstateGDP = neededGDP }
		multiply_variable = { nayarit_totalstateGDP = neededGDP }
		multiply_variable = { jalisco_totalstateGDP = neededGDP }
		multiply_variable = { colima_totalstateGDP = neededGDP }
		multiply_variable = { michoacan_totalstateGDP = neededGDP }
		multiply_variable = { guerrero_totalstateGDP = neededGDP }
		multiply_variable = { mexico_s_totalstateGDP = neededGDP }
		multiply_variable = { mexico_c_totalstateGDP = neededGDP }
		multiply_variable = { hidalgo_totalstateGDP = neededGDP }
		multiply_variable = { morelos_totalstateGDP = neededGDP }
		multiply_variable = { tlaxcala_totalstateGDP = neededGDP }
		multiply_variable = { puebla_totalstateGDP = neededGDP }
		multiply_variable = { oaxaca_totalstateGDP = neededGDP }
		multiply_variable = { veracruz_totalstateGDP = neededGDP }
		multiply_variable = { tabasco_totalstateGDP = neededGDP }
		multiply_variable = { chiapas_totalstateGDP = neededGDP }
		multiply_variable = { campeche_totalstateGDP = neededGDP }
		multiply_variable = { yucatan_totalstateGDP = neededGDP }
		multiply_variable = { quintana_roo_totalstateGDP = neededGDP }
		
		divide_variable = { baja_california_n_totalstateGDP = 1000 }
		divide_variable = { baja_california_s_totalstateGDP = 1000 }
		divide_variable = { sonora_totalstateGDP = 1000 }
		divide_variable = { chihuahua_totalstateGDP = 1000 }
		divide_variable = { coahuila_totalstateGDP = 1000 }
		divide_variable = { nuevo_leon_totalstateGDP = 1000 }
		divide_variable = { tamaulipas_totalstateGDP = 1000 }
		divide_variable = { sinaloa_totalstateGDP = 1000 }
		divide_variable = { durango_totalstateGDP = 1000 }
		divide_variable = { zacatecas_totalstateGDP = 1000 }
		divide_variable = { aguascalientes_totalstateGDP = 1000 }
		divide_variable = { san_luis_potosi_totalstateGDP = 1000 }
		divide_variable = { guanajuato_totalstateGDP = 1000 }
		divide_variable = { queretaro_totalstateGDP = 1000 }
		divide_variable = { nayarit_totalstateGDP = 1000 }
		divide_variable = { jalisco_totalstateGDP = 1000 }
		divide_variable = { colima_totalstateGDP = 1000 }
		divide_variable = { michoacan_totalstateGDP = 1000 }
		divide_variable = { guerrero_totalstateGDP = 1000 }
		divide_variable = { mexico_s_totalstateGDP = 1000 }
		divide_variable = { mexico_c_totalstateGDP = 1000 }
		divide_variable = { hidalgo_totalstateGDP = 1000 }
		divide_variable = { morelos_totalstateGDP = 1000 }
		divide_variable = { tlaxcala_totalstateGDP = 1000 }
		divide_variable = { puebla_totalstateGDP = 1000 }
		divide_variable = { oaxaca_totalstateGDP = 1000 }
		divide_variable = { veracruz_totalstateGDP = 1000 }
		divide_variable = { tabasco_totalstateGDP = 1000 }
		divide_variable = { chiapas_totalstateGDP = 1000 }
		divide_variable = { campeche_totalstateGDP = 1000 }
		divide_variable = { yucatan_totalstateGDP = 1000 }
		divide_variable = { quintana_roo_totalstateGDP = 1000 }
		
		divide_variable = { baja_california_nGDP = baja_california_n_totalstateGDP }
		divide_variable = { baja_california_sGDP = baja_california_s_totalstateGDP }
		divide_variable = { sonoraGDP = sonora_totalstateGDP }
		divide_variable = { chihuahuaGDP = chihuahua_totalstateGDP }
		divide_variable = { coahuilaGDP = coahuila_totalstateGDP }
		divide_variable = { nuevo_leonGDP = nuevo_leon_totalstateGDP }
		divide_variable = { tamaulipasGDP = tamaulipas_totalstateGDP }
		divide_variable = { sinaloaGDP = sinaloa_totalstateGDP }
		divide_variable = { durangoGDP = durango_totalstateGDP }
		divide_variable = { zacatecasGDP = zacatecas_totalstateGDP }
		divide_variable = { aguascalientesGDP = aguascalientes_totalstateGDP }
		divide_variable = { san_luis_potosiGDP = san_luis_potosi_totalstateGDP }
		divide_variable = { guanajuatoGDP = guanajuato_totalstateGDP }
		divide_variable = { queretaroGDP = queretaro_totalstateGDP }
		divide_variable = { nayaritGDP = nayarit_totalstateGDP }
		divide_variable = { jaliscoGDP = jalisco_totalstateGDP }
		divide_variable = { colimaGDP = colima_totalstateGDP }
		divide_variable = { michoacanGDP = michoacan_totalstateGDP }
		divide_variable = { guerreroGDP = guerrero_totalstateGDP }
		divide_variable = { mexico_sGDP = mexico_s_totalstateGDP }
		divide_variable = { mexico_cGDP = mexico_c_totalstateGDP }
		divide_variable = { hidalgoGDP = hidalgo_totalstateGDP }
		divide_variable = { morelosGDP = morelos_totalstateGDP }
		divide_variable = { tlaxcalaGDP = tlaxcala_totalstateGDP }
		divide_variable = { pueblaGDP = puebla_totalstateGDP }
		divide_variable = { oaxacaGDP = _oaxacatotalstateGDP }
		divide_variable = { veracruzGDP = veracruz_totalstateGDP }
		divide_variable = { tabascoGDP = tabasco_totalstateGDP }
		divide_variable = { chiapasGDP = chiapas_totalstateGDP }
		divide_variable = { campecheGDP = campeche_totalstateGDP }
		divide_variable = { yucatanGDP = yucatan_totalstateGDP }
		divide_variable = { quintana_rooGDP = quintana_roo_totalstateGDP }
		
		every_owned_state = {
			if = {
				limit = {
					state = 484
				}
				multiply_variable = { state_value = PREV.baja_california_nGDP }
			}
			else_if = {
				limit = {
					state = 1550
				}
				multiply_variable = { state_value = PREV.baja_california_sGDP }
			}
			else_if = {
				limit = {
					state = 483
				}
				multiply_variable = { state_value = PREV.sonoraGDP }
			}
			else_if = {
				limit = {
					state = 482
				}
				multiply_variable = { state_value = PREV.chihuahuaGDP }
			}
			else_if = {
				limit = {
					state = 480
				}
				multiply_variable = { state_value = PREV.coahuilaGDP }
			}
			else_if = {
				limit = {
					state = 1409
				}
				multiply_variable = { state_value = PREV.nuevo_leonGDP }
			}
			else_if = {
				limit = {
					state = 479
				}
				multiply_variable = { state_value = PREV.tamaulipasGDP }
			}
			else_if = {
				limit = {
					state = 481
				}
				multiply_variable = { state_value = PREV.sinaloaGDP }
			}
			else_if = {
				limit = {
					state = 1408
				}
				multiply_variable = { state_value = PREV.durangoGDP }
			}
			else_if = {
				limit = {
					state = 1423
				}
				multiply_variable = { state_value = PREV.zacatecasGDP }
			}
			else_if = {
				limit = {
					state = 1422 
				}
				multiply_variable = { state_value = PREV.aguascalientesGDP }
			}
			else_if = {
				limit = {
					state = 1410
				}
				multiply_variable = { state_value = PREV.san_luis_potosiGDP }
			}
			else_if = {
				limit = {
					state = 1416
				}
				multiply_variable = { state_value = PREV.guanajuatoGDP }
			}
			else_if = {
				limit = {
					state = 1417
				}
				multiply_variable = { state_value = PREV.queretaroGDP }
			}
			else_if = {
				limit = {
					state = 478
				}
				multiply_variable = { state_value = PREV.nayaritGDP }
			}
			else_if = {
				limit = {
					state = 1419
				}
				multiply_variable = { state_value = PREV.jaliscoGDP }
			}
			else_if = {
				limit = {
					state = 1420
				}
				multiply_variable = { state_value = PREV.colimaGDP }
			}
			else_if = {
				limit = {
					state = 1418
				}
				multiply_variable = { state_value = PREV.michoacanGDP }
			}
			else_if = {
				limit = {
					state = 485
				}
				multiply_variable = { state_value = PREV.guerreroGDP }
			}
			else_if = {
				limit = {
					state = 1413
				}
				multiply_variable = { state_value = PREV.mexico_sGDP }
			}
			else_if = {
				limit = {
					state = 277
				}
				multiply_variable = { state_value = PREV.mexico_cGDP }
			}
			else_if = {
				limit = {
					state = 1415
				}
				multiply_variable = { state_value = PREV.hidalgoGDP }
			}
			else_if = {
				limit = {
					state = 1412
				}
				multiply_variable = { state_value = PREV.morelosGDP }
			}
			else_if = {
				limit = {
					state = 1414
				}
				multiply_variable = { state_value = PREV.tlaxcalaGDP }
			}
			else_if = {
				limit = {
					state = 1411
				}
				multiply_variable = { state_value = PREV.pueblaGDP }
			}
			else_if = {
				limit = {
					state = 476
				}
				multiply_variable = { state_value = PREV.oaxacaGDP }
				set_variable = { state_value = 187.456 }
			}
			else_if = {
				limit = {
					state = 477
				}
				multiply_variable = { state_value = PREV.veracruzGDP }
			}
			else_if = {
				limit = {
					state = 1424
				}
				multiply_variable = { state_value = PREV.tabascoGDP }
			}
			else_if = {
				limit = {
					state = 475
				}
				multiply_variable = { state_value = PREV.chiapasGDP }
			}
			else_if = {
				limit = {
					state = 1425
				}
				multiply_variable = { state_value = PREV.campecheGDP }
			}
			else_if = {
				limit = {
					state = 474
				}
				multiply_variable = { state_value = PREV.yucatanGDP }
			}
			else_if = {
				limit = {
					state = 2152
				}
				multiply_variable = { state_value = PREV.quintana_rooGDP }
			}
		}
	}
	if = {
		limit = {
			tag = THA
		}
		set_variable = { bangkokGDP = 3.254 }
		set_variable = { ayutthayaGDP = 0.291 }
		set_variable = { east_thailandGDP = 0.444 }
		set_variable = { south_thailandGDP = 1.223 }
		set_variable = { north_thailandGDP = 0.814 }
		set_variable = { isanGDP = 1.110 }
		set_variable = { saharat_thai_doemGDP = 0.032 }
		set_variable = { thai_cambodiaGDP = 0.151 }
		set_variable = { thai_malayaGDP = 0.309 }
		
		multiply_variable = { bangkok_totalstateGDP = neededGDP }
		multiply_variable = { ayutthaya_totalstateGDP = neededGDP }
		multiply_variable = { east_thailand_totalstateGDP = neededGDP }
		multiply_variable = { south_thailand_totalstateGDP = neededGDP }
		multiply_variable = { north_thailand_totalstateGDP = neededGDP }
		multiply_variable = { isan_totalstateGDP = neededGDP }
		multiply_variable = { saharat_thai_doem_totalstateGDP = neededGDP }
		multiply_variable = { thai_cambodia_totalstateGDP = neededGDP }
		multiply_variable = { thai_malaya_totalstateGDP = neededGDP }
		
		divide_variable = { bangkok_totalstateGDP = 1000 }
		divide_variable = { ayutthaya_totalstateGDP = 1000 }
		divide_variable = { east_thailand_totalstateGDP = 1000 }
		divide_variable = { south_thailand_totalstateGDP = 1000 }
		divide_variable = { north_thailand_totalstateGDP = 1000 }
		divide_variable = { isan_totalstateGDP = 1000 }
		divide_variable = { saharat_thai_doem_totalstateGDP = 1000 }
		divide_variable = { thai_cambodia_totalstateGDP = 1000 }
		divide_variable = { thai_malaya_totalstateGDP = 1000 }
		
		divide_variable = { bangkokGDP = bangkok_totalstateGDP }
		divide_variable = { ayutthayaGDP = ayutthaya_totalstateGDP }
		divide_variable = { east_thailandGDP = east_thailand_totalstateGDP }
		divide_variable = { south_thailandGDP = south_thailand_totalstateGDP }
		divide_variable = { north_thailandGDP = north_thailand_totalstateGDP }
		divide_variable = { isanGDP = isan_totalstateGDP }
		divide_variable = { saharat_thai_doemGDP = saharat_thai_doem_totalstateGDP }
		divide_variable = { thai_cambodiaGDP = thai_cambodia_totalstateGDP }
		divide_variable = { thai_malayaGDP = thai_malaya_totalstateGDP }
		
		every_owned_state = {
			if = {
				limit = {
					state = 289
				}
				multiply_variable = { state_value = PREV.bangkokGDP }
			}
			else_if = {
				limit = {
					state = 2226
				}
				multiply_variable = { state_value = PREV.ayutthayaGDP }
			}
			else_if = {
				limit = {
					state = 843
				}
				multiply_variable = { state_value = PREV.saharat_thai_doemGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_east_thailand
				}
				multiply_variable = { state_value = PREV.east_thailandGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_south_thailand
				}
				multiply_variable = { state_value = PREV.south_thailandGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_north_thailand
				}
				multiply_variable = { state_value = PREV.north_thailandGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_isan
				}
				multiply_variable = { state_value = PREV.isanGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_thai_cambodia
				}
				multiply_variable = { state_value = PREV.thai_cambodiaGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_thai_malaya
				}
				multiply_variable = { state_value = PREV.thai_malayaGDP }
			}
		}
	}
	if = {
		limit = {
			tag = IND
		}
		set_variable = { delhiGDP = 0.743 }
		set_variable = { punjabGDP = 8.723 }
		set_variable = { sindhGDP = 1.186 }
		set_variable = { rajasthanGDP = 2.793 }
		set_variable = { madhya_pradeshGDP = 3.931 }
		set_variable = { jammu_kashmirGDP = 0.435 }
		set_variable = { gujaratGDP = 3.390 }
		set_variable = { maharashtraGDP = 7.344 }
		set_variable = { goaGDP = 0.118 }
		set_variable = { karnatakaGDP = 3.189 }
		set_variable = { keralaGDP = 1.988 }
		set_variable = { tamil_naduGDP = 5.166 }
		set_variable = { andhra_pradeshGDP = 4.491 }
		set_variable = { uttar_pradeshGDP = 9.814 }
		set_variable = { orissa_indGDP = 0.676 }
		set_variable = { bihar_indGDP = 0.829 }
		
		multiply_variable = { delhi_totalstateGDP = neededGDP }
		multiply_variable = { punjab_totalstateGDP = neededGDP }
		multiply_variable = { sindh_totalstateGDP = neededGDP }
		multiply_variable = { rajasthan_totalstateGDP = neededGDP }
		multiply_variable = { madhya_pradesh_totalstateGDP = neededGDP }
		multiply_variable = { jammu_kashmir_totalstateGDP = neededGDP }
		multiply_variable = { gujarat_totalstateGDP = neededGDP }
		multiply_variable = { maharashtra_totalstateGDP = neededGDP }
		multiply_variable = { goa_totalstateGDP = neededGDP }
		multiply_variable = { karnataka_totalstateGDP = neededGDP }
		multiply_variable = { kerala_totalstateGDP = neededGDP }
		multiply_variable = { tamil_nadu_totalstateGDP = neededGDP }
		multiply_variable = { andhra_pradesh_totalstateGDP = neededGDP }
		multiply_variable = { uttar_pradesh_totalstateGDP = neededGDP }
		multiply_variable = { orissa_ind_totalstateGDP = neededGDP }
		multiply_variable = { bihar_ind_totalstateGDP = neededGDP }
		
		divide_variable = { delhi_totalstateGDP = 1000 }
		divide_variable = { punjab_totalstateGDP = 1000 }
		divide_variable = { sindh_totalstateGDP = 1000 }
		divide_variable = { rajasthan_totalstateGDP = 1000 }
		divide_variable = { madhya_pradesh_totalstateGDP = 1000 }
		divide_variable = { jammu_kashmir_totalstateGDP = 1000 }
		divide_variable = { gujarat_totalstateGDP = 1000 }
		divide_variable = { maharashtra_totalstateGDP = 1000 }
		divide_variable = { goa_totalstateGDP = 1000 }
		divide_variable = { karnataka_totalstateGDP = 1000 }
		divide_variable = { kerala_totalstateGDP = 1000 }
		divide_variable = { tamil_nadu_totalstateGDP = 1000 }
		divide_variable = { andhra_pradesh_totalstateGDP = 1000 }
		divide_variable = { uttar_pradesh_totalstateGDP = 1000 }
		divide_variable = { orissa_ind_totalstateGDP = 1000 }
		divide_variable = { bihar_ind_totalstateGDP = 1000 }
		
		divide_variable = { delhiGDP = delhi_totalstateGDP }
		divide_variable = { punjabGDP = punjab_totalstateGDP }
		divide_variable = { sindhGDP = sindh_totalstateGDP }
		divide_variable = { rajasthanGDP = rajasthan_totalstateGDP }
		divide_variable = { madhya_pradeshGDP = madhya_pradesh_totalstateGDP }
		divide_variable = { jammu_kashmirGDP = jammu_kashmir_totalstateGDP }
		divide_variable = { gujaratGDP = gujarat_totalstateGDP }
		divide_variable = { maharashtraGDP = maharashtra_totalstateGDP }
		divide_variable = { goaGDP = goa_totalstateGDP }
		divide_variable = { karnatakaGDP = karnataka_totalstateGDP }
		divide_variable = { keralaGDP = kerala_totalstateGDP }
		divide_variable = { tamil_naduGDP = tamil_nadu_totalstateGDP }
		divide_variable = { andhra_pradeshGDP = andhra_pradesh_totalstateGDP }
		divide_variable = { uttar_pradeshGDP = uttar_pradesh_totalstateGDP }
		divide_variable = { orissa_indGDP = orissa_ind_totalstateGDP }
		divide_variable = { bihar_indGDP = bihar_ind_totalstateGDP }
		
		every_owned_state = {
			if = {
				limit = {
					state = 980
				}
				multiply_variable = { state_value = PREV.delhiGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_punjab
				}
				multiply_variable = { state_value = PREV.punjabGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_sindh
				}
				multiply_variable = { state_value = PREV.sindhGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_rajasthan
				}
				multiply_variable = { state_value = PREV.rajasthanGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_madhya_pradesh
				}
				multiply_variable = { state_value = PREV.madhya_pradeshGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_jammu_kashmir
				}
				multiply_variable = { state_value = PREV.jammu_kashmirGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_gujarat
				}
				multiply_variable = { state_value = PREV.gujaratGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_maharashtra
				}
				multiply_variable = { state_value = PREV.maharashtraGDP }
			}
			else_if = {
				limit = {
					state = 321
				}
				multiply_variable = { state_value = PREV.goaGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_karnataka
				}
				multiply_variable = { state_value = PREV.karnatakaGDP }
			}
			else_if = {
				limit = {
					state = 932
				}
				multiply_variable = { state_value = PREV.keralaGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_tamil_nadu
				}
				multiply_variable = { state_value = PREV.tamil_naduGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_andhra_pradesh
				}
				multiply_variable = { state_value = PREV.andhra_pradeshGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_uttar_pradesh
				}
				multiply_variable = { state_value = PREV.uttar_pradeshGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_orissa_ind
				}
				multiply_variable = { state_value = PREV.orissa_indGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_bihar_ind
				}
				multiply_variable = { state_value = PREV.bihar_indGDP }
			}
		}
	}
	if = {
		limit = {
			tag = AZH
		}
		set_variable = { orissa_azhGDP = 0.968 }
		set_variable = { biharGDP = 4.182 }
		set_variable = { bengalGDP = 17.565 }
		set_variable = { assamGDP = 2.073 }
		set_variable = { manipurGDP = 0.055 }
		
		multiply_variable = { orissa_azh_totalstateGDP = neededGDP }
		multiply_variable = { bihar_totalstateGDP = neededGDP }
		multiply_variable = { bengal_totalstateGDP = neededGDP }
		multiply_variable = { assam_totalstateGDP = neededGDP }
		multiply_variable = { manipur_totalstateGDP = neededGDP }
		
		divide_variable = { orissa_azh_totalstateGDP = 1000 }
		divide_variable = { bihar_totalstateGDP = 1000 }
		divide_variable = { bengal_totalstateGDP = 1000 }
		divide_variable = { assam_totalstateGDP = 1000 }
		divide_variable = { manipur_totalstateGDP = 1000 }
		
		divide_variable = { orissa_azhGDP = orissa_azh_totalstateGDP }
		divide_variable = { biharGDP = bihar_totalstateGDP }
		divide_variable = { bengalGDP = bengal_totalstateGDP }
		divide_variable = { assamGDP = assam_totalstateGDP }
		divide_variable = { manipurGDP = manipur_totalstateGDP }
		
		every_owned_state = {
			if = {
				limit = {
					has_state_flag = GDP_regions_orissa_azh
				}
				multiply_variable = { state_value = PREV.orissa_azhGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_bihar
				}
				multiply_variable = { state_value = PREV.biharGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_bengal
				}
				multiply_variable = { state_value = PREV.bengalGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_assam
				}
				multiply_variable = { state_value = PREV.assamGDP }
			}
			else_if = {
				limit = {
					state = 1888
				}
				multiply_variable = { state_value = PREV.manipurGDP }
			}
		}
	}
	if = {
		limit = {
			tag = USA
		}
		set_variable = { maineGDP = 1.625 }
		set_variable = { new_hampshireGDP = 1.062 }
		set_variable = { vermontGDP = 0.650 }
		set_variable = { massachusettsGDP = 11.464 }
		set_variable = { rhode_islandGDP = 1.790 }
		set_variable = { connecticutGDP = 6.275 }
		set_variable = { new_yorkGDP = 47.822 }
		set_variable = { new_jerseyGDP = 14.927 }
		set_variable = { pennsylvaniaGDP = 23.334 }
		set_variable = { delawareGDP = 1.227 }
		set_variable = { marylandGDP = 4.194 }
		set_variable = { washington_dcGDP = 3.725 }
		set_variable = { virginiaGDP = 7.408 }
		set_variable = { w_virginiaGDP = 3.269 }
		set_variable = { n_carolinaGDP = 8.300 }
		set_variable = { s_carolinaGDP = 3.348 }
		set_variable = { kentuckyGDP = 5.605 }
		set_variable = { tennesseeGDP = 6.121 }
		set_variable = { arkansasGDP = 2.508 }
		set_variable = { louisianaGDP = 8.457 }
		set_variable = { mississippiGDP = 2.936 }
		set_variable = { alabamaGDP = 5.033 }
		set_variable = { georgiaGDP = 6.495 }
		set_variable = { floridaGDP = 8.831 }
		set_variable = { wisconsinGDP = 8.474 }
		set_variable = { michiganGDP = 19.950 }
		set_variable = { illinoisGDP = 25.843 }
		set_variable = { indianaGDP = 10.747 }
		set_variable = { ohioGDP = 21.872 }
		set_variable = { n_dakotaGDP = 1.063 }
		set_variable = { s_dakotaGDP = 2.446 }
		set_variable = { nebraskaGDP = 2.957 }
		set_variable = { kansasGDP = 2.516 }
		set_variable = { minnesotaGDP = 7.164 }
		set_variable = { iowaGDP = 5.333 }
		set_variable = { missouriGDP = 9.053 }
		set_variable = { idahoGDP = 1.253 }
		set_variable = { montanaGDP = 0.960 }
		set_variable = { wyomingGDP = 0.893 }
		set_variable = { utahGDP = 1.925 }
		set_variable = { coloradoGDP = 4.547 }
		set_variable = { arizonaGDP = 2.694 }
		set_variable = { new_mexicoGDP = 2.001 }
		set_variable = { texasGDP = 18.206 }
		set_variable = { oklahomaGDP = 3.841 }
		set_variable = { alaskaGDP = 0.697 }
		set_variable = { washingtonGDP = 7.526 }
		set_variable = { oregonGDP = 3.642 }
		set_variable = { californiaGDP = 41.664 }
		set_variable = { nevadaGDP = 0.892 }
		set_variable = { puerto_ricoGDP = 2.907 }
		set_variable = { virgin_islandsGDP = 0.043 }
		set_variable = { pczGDP = 0.108 }
		set_variable = { greenlandGDP = 0.024 }
		
		multiply_variable = { maine_totalstateGDP = neededGDP }
		multiply_variable = { new_hampshire_totalstateGDP = neededGDP }
		multiply_variable = { vermont_totalstateGDP = neededGDP }
		multiply_variable = { massachusetts_totalstateGDP = neededGDP }
		multiply_variable = { rhode_island_totalstateGDP = neededGDP }
		multiply_variable = { connecticut_totalstateGDP = neededGDP }
		multiply_variable = { new_york_totalstateGDP = neededGDP }
		multiply_variable = { new_jersey_totalstateGDP = neededGDP }
		multiply_variable = { pennsylvania_totalstateGDP = neededGDP }
		multiply_variable = { delaware_totalstateGDP = neededGDP }
		multiply_variable = { maryland_totalstateGDP = neededGDP }
		multiply_variable = { washington_dc_totalstateGDP = neededGDP }
		multiply_variable = { virginia_totalstateGDP = neededGDP }
		multiply_variable = { w_virginia_totalstateGDP = neededGDP }
		multiply_variable = { n_carolina_totalstateGDP = neededGDP }
		multiply_variable = { s_carolina_totalstateGDP = neededGDP }
		multiply_variable = { kentucky_totalstateGDP = neededGDP }
		multiply_variable = { tennessee_totalstateGDP = neededGDP }
		multiply_variable = { arkansas_totalstateGDP = neededGDP }
		multiply_variable = { louisiana_totalstateGDP = neededGDP }
		multiply_variable = { mississippi_totalstateGDP = neededGDP }
		multiply_variable = { alabama_totalstateGDP = neededGDP }
		multiply_variable = { georgia_totalstateGDP = neededGDP }
		multiply_variable = { florida_totalstateGDP = neededGDP }
		multiply_variable = { wisconsin_totalstateGDP = neededGDP }
		multiply_variable = { michigan_totalstateGDP = neededGDP }
		multiply_variable = { illinois_totalstateGDP = neededGDP }
		multiply_variable = { indiana_totalstateGDP = neededGDP }
		multiply_variable = { ohio_totalstateGDP = neededGDP }
		multiply_variable = { n_dakota_totalstateGDP = neededGDP }
		multiply_variable = { s_dakota_totalstateGDP = neededGDP }
		multiply_variable = { nebraska_totalstateGDP = neededGDP }
		multiply_variable = { kansas_totalstateGDP = neededGDP }
		multiply_variable = { minnesota_totalstateGDP = neededGDP }
		multiply_variable = { iowa_totalstateGDP = neededGDP }
		multiply_variable = { missouri_totalstateGDP = neededGDP }
		multiply_variable = { idaho_totalstateGDP = neededGDP }
		multiply_variable = { montana_totalstateGDP = neededGDP }
		multiply_variable = { wyoming_totalstateGDP = neededGDP }
		multiply_variable = { utah_totalstateGDP = neededGDP }
		multiply_variable = { colorado_totalstateGDP = neededGDP }
		multiply_variable = { arizona_totalstateGDP = neededGDP }
		multiply_variable = { new_mexico_totalstateGDP = neededGDP }
		multiply_variable = { texas_totalstateGDP = neededGDP }
		multiply_variable = { oklahoma_totalstateGDP = neededGDP }
		multiply_variable = { alaska_totalstateGDP = neededGDP }
		multiply_variable = { washington_totalstateGDP = neededGDP }
		multiply_variable = { oregon_totalstateGDP = neededGDP }
		multiply_variable = { california_totalstateGDP = neededGDP }
		multiply_variable = { nevada_totalstateGDP = neededGDP }
		multiply_variable = { puerto_rico_totalstateGDP = neededGDP }
		multiply_variable = { virgin_islands_totalstateGDP = neededGDP }
		multiply_variable = { pcz_totalstateGDP = neededGDP }
		multiply_variable = { greenland_totalstateGDP = neededGDP }
		
		divide_variable = { maine_totalstateGDP = 1000 }
		divide_variable = { new_hampshire_totalstateGDP = 1000 }
		divide_variable = { vermont_totalstateGDP = 1000 }
		divide_variable = { massachusetts_totalstateGDP = 1000 }
		divide_variable = { rhode_island_totalstateGDP = 1000 }
		divide_variable = { connecticut_totalstateGDP = 1000 }
		divide_variable = { new_york_totalstateGDP = 1000 }
		divide_variable = { new_jersey_totalstateGDP = 1000 }
		divide_variable = { pennsylvania_totalstateGDP = 1000 }
		divide_variable = { delaware_totalstateGDP = 1000 }
		divide_variable = { maryland_totalstateGDP = 1000 }
		divide_variable = { washington_dc_totalstateGDP = 1000 }
		divide_variable = { virginia_totalstateGDP = 1000 }
		divide_variable = { w_virginia_totalstateGDP = 1000 }
		divide_variable = { n_carolina_totalstateGDP = 1000 }
		divide_variable = { s_carolina_totalstateGDP = 1000 }
		divide_variable = { kentucky_totalstateGDP = 1000 }
		divide_variable = { tennessee_totalstateGDP = 1000 }
		divide_variable = { arkansas_totalstateGDP = 1000 }
		divide_variable = { louisiana_totalstateGDP = 1000 }
		divide_variable = { mississippi_totalstateGDP = 1000 }
		divide_variable = { alabama_totalstateGDP = 1000 }
		divide_variable = { georgia_totalstateGDP = 1000 }
		divide_variable = { florida_totalstateGDP = 1000 }
		divide_variable = { wisconsin_totalstateGDP = 1000 }
		divide_variable = { michigan_totalstateGDP = 1000 }
		divide_variable = { illinois_totalstateGDP = 1000 }
		divide_variable = { indiana_totalstateGDP = 1000 }
		divide_variable = { ohio_totalstateGDP = 1000 }
		divide_variable = { n_dakota_totalstateGDP = 1000 }
		divide_variable = { s_dakota_totalstateGDP = 1000 }
		divide_variable = { nebraska_totalstateGDP = 1000 }
		divide_variable = { kansas_totalstateGDP = 1000 }
		divide_variable = { minnesota_totalstateGDP = 1000 }
		divide_variable = { iowa_totalstateGDP = 1000 }
		divide_variable = { missouri_totalstateGDP = 1000 }
		divide_variable = { idaho_totalstateGDP = 1000 }
		divide_variable = { montana_totalstateGDP = 1000 }
		divide_variable = { wyoming_totalstateGDP = 1000 }
		divide_variable = { utah_totalstateGDP = 1000 }
		divide_variable = { colorado_totalstateGDP = 1000 }
		divide_variable = { arizona_totalstateGDP = 1000 }
		divide_variable = { new_mexico_totalstateGDP = 1000 }
		divide_variable = { texas_totalstateGDP = 1000 }
		divide_variable = { oklahoma_totalstateGDP = 1000 }
		divide_variable = { alaska_totalstateGDP = 1000 }
		divide_variable = { washington_totalstateGDP = 1000 }
		divide_variable = { oregon_totalstateGDP = 1000 }
		divide_variable = { california_totalstateGDP = 1000 }
		divide_variable = { nevada_totalstateGDP = 1000 }
		divide_variable = { puerto_rico_totalstateGDP = 1000 }
		divide_variable = { virgin_islands_totalstateGDP = 1000 }
		divide_variable = { pcz_totalstateGDP = 1000 }
		divide_variable = { greenland_totalstateGDP = 1000 }
		
		divide_variable = { maineGDP = maine_totalstateGDP }
		divide_variable = { new_hampshireGDP = new_hampshire_totalstateGDP }
		divide_variable = { vermontGDP = vermont_totalstateGDP }
		divide_variable = { massachusettsGDP = massachusetts_totalstateGDP }
		divide_variable = { rhode_islandGDP = rhode_island_totalstateGDP }
		divide_variable = { connecticutGDP = connecticut_totalstateGDP }
		divide_variable = { new_yorkGDP = new_york_totalstateGDP }
		divide_variable = { new_jerseyGDP = new_jersey_totalstateGDP }
		divide_variable = { pennsylvaniaGDP = pennsylvania_totalstateGDP }
		divide_variable = { delawareGDP = delaware_totalstateGDP }
		divide_variable = { marylandGDP = maryland_totalstateGDP }
		divide_variable = { washington_dcGDP = washington_dc_totalstateGDP }
		divide_variable = { virginiaGDP = virginia_totalstateGDP }
		divide_variable = { w_virginiaGDP = w_virginia_totalstateGDP }
		divide_variable = { n_carolinaGDP = n_carolina_totalstateGDP }
		divide_variable = { s_carolinaGDP = s_carolina_totalstateGDP }
		divide_variable = { kentuckyGDP = kentucky_totalstateGDP }
		divide_variable = { tennesseeGDP = tennessee_totalstateGDP }
		divide_variable = { arkansasGDP = arkansas_totalstateGDP }
		divide_variable = { louisianaGDP = louisiana_totalstateGDP }
		divide_variable = { mississippiGDP = mississippi_totalstateGDP }
		divide_variable = { alabamaGDP = alabama_totalstateGDP }
		divide_variable = { georgiaGDP = georgia_totalstateGDP }
		divide_variable = { floridaGDP = florida_totalstateGDP }
		divide_variable = { wisconsinGDP = wisconsin_totalstateGDP }
		divide_variable = { michiganGDP = michigan_totalstateGDP }
		divide_variable = { illinoisGDP = illinois_totalstateGDP }
		divide_variable = { indianaGDP = indiana_totalstateGDP }
		divide_variable = { ohioGDP = ohio_totalstateGDP }
		divide_variable = { n_dakotaGDP = n_dakota_totalstateGDP }
		divide_variable = { s_dakotaGDP = s_dakota_totalstateGDP }
		divide_variable = { nebraskaGDP = nebraska_totalstateGDP }
		divide_variable = { kansasGDP = kansas_totalstateGDP }
		divide_variable = { minnesotaGDP = minnesota_totalstateGDP }
		divide_variable = { iowaGDP = iowa_totalstateGDP }
		divide_variable = { missouriGDP = missouri_totalstateGDP }
		divide_variable = { idahoGDP = idaho_totalstateGDP }
		divide_variable = { montanaGDP = montana_totalstateGDP }
		divide_variable = { wyomingGDP = wyoming_totalstateGDP }
		divide_variable = { utahGDP = utah_totalstateGDP }
		divide_variable = { coloradoGDP = colorado_totalstateGDP }
		divide_variable = { arizonaGDP = arizona_totalstateGDP }
		divide_variable = { new_mexicoGDP = new_mexico_totalstateGDP }
		divide_variable = { texasGDP = texas_totalstateGDP }
		divide_variable = { oklahomaGDP = oklahoma_totalstateGDP }
		divide_variable = { alaskaGDP = alaska_totalstateGDP }
		divide_variable = { washingtonGDP = washington_totalstateGDP }
		divide_variable = { oregonGDP = oregon_totalstateGDP }
		divide_variable = { californiaGDP = california_totalstateGDP }
		divide_variable = { nevadaGDP = nevada_totalstateGDP }
		divide_variable = { puerto_ricoGDP = puerto_rico_totalstateGDP }
		divide_variable = { virgin_islandsGDP = virgin_islands_totalstateGDP }
		divide_variable = { pczGDP = pcz_totalstateGDP }
		divide_variable = { greenlandGDP = greenland_totalstateGDP }
		
		every_owned_state = {
			if = {
				limit = {
					state = 952
				}
				multiply_variable = { state_value = PREV.maineGDP }
			}
			else_if = {
				limit = {
					state = 951
				}
				multiply_variable = { state_value = PREV.new_hampshireGDP }
			}
			else_if = {
				limit = {
					state = 950
				}
				multiply_variable = { state_value = PREV.vermontGDP }
			}
			else_if = {
				limit = {
					state = 949
				}
				multiply_variable = { state_value = PREV.massachusettsGDP }
			}
			else_if = {
				limit = {
					state = 948
				}
				multiply_variable = { state_value = PREV.rhode_islandGDP }
			}
			else_if = {
				limit = {
					state = 357
				}
				multiply_variable = { state_value = PREV.connecticutGDP }
			}
			else_if = {
				limit = {
					state = 358
				}
				multiply_variable = { state_value = PREV.new_yorkGDP }
			}
			else_if = {
				limit = {
					state = 359
				}
				multiply_variable = { state_value = PREV.new_jerseyGDP }
			}
			else_if = {
				limit = {
					state = 360
				}
				multiply_variable = { state_value = PREV.pennsylvaniaGDP }
			}
			else_if = {
				limit = {
					state = 954
				}
				multiply_variable = { state_value = PREV.delawareGDP }
			}
			else_if = {
				limit = {
					state = 361
				}
				multiply_variable = { state_value = PREV.marylandGDP }
			}
			else_if = {
				limit = {
					state = 992
				}
				multiply_variable = { state_value = PREV.washington_dcGDP }
			}
			else_if = {
				limit = {
					state = 362
				}
				multiply_variable = { state_value = PREV.virginiaGDP }
			}
			else_if = {
				limit = {
					state = 953
				}
				multiply_variable = { state_value = PREV.w_virginiaGDP }
			}
			else_if = {
				limit = {
					state = 369
				}
				multiply_variable = { state_value = PREV.kentuckyGDP }
			}
			else_if = {
				limit = {
					state = 368
				}
				multiply_variable = { state_value = PREV.tennesseeGDP }
			}
			else_if = {
				limit = {
					state = 363
				}
				multiply_variable = { state_value = PREV.n_carolinaGDP }
			}
			else_if = {
				limit = {
					state = 364
				}
				multiply_variable = { state_value = PREV.s_carolinaGDP }
			}
			else_if = {
				limit = {
					state = 372
				}
				multiply_variable = { state_value = PREV.arkansasGDP }
			}
			else_if = {
				limit = {
					state = 371
				}
				multiply_variable = { state_value = PREV.louisianaGDP }
			}
			else_if = {
				limit = {
					state = 370
				}
				multiply_variable = { state_value = PREV.mississippiGDP }
			}
			else_if = {
				limit = {
					state = 367
				}
				multiply_variable = { state_value = PREV.alabamaGDP }
			}
			else_if = {
				limit = {
					state = 365
				}
				multiply_variable = { state_value = PREV.georgiaGDP }
			}
			else_if = {
				limit = {
					state = 366
				}
				multiply_variable = { state_value = PREV.floridaGDP }
			}
			else_if = {
				limit = {
					state = 394
				}
				multiply_variable = { state_value = PREV.wisconsinGDP }
			}
			else_if = {
				limit = {
					state = 393
				}
				multiply_variable = { state_value = PREV.michiganGDP }
			}
			else_if = {
				limit = {
					state = 395
				}
				multiply_variable = { state_value = PREV.illinoisGDP }
			}
			else_if = {
				limit = {
					state = 396
				}
				multiply_variable = { state_value = PREV.indianaGDP }
			}
			else_if = {
				limit = {
					state = 261
				}
				multiply_variable = { state_value = PREV.ohioGDP }
			}
			else_if = {
				limit = {
					state = 389
				}
				multiply_variable = { state_value = PREV.n_dakotaGDP }
			}
			else_if = {
				limit = {
					state = 390
				}
				multiply_variable = { state_value = PREV.s_dakotaGDP }
			}
			else_if = {
				limit = {
					state = 384
				}
				multiply_variable = { state_value = PREV.nebraskaGDP }
			}
			else_if = {
				limit = {
					state = 383
				}
				multiply_variable = { state_value = PREV.kansasGDP }
			}
			else_if = {
				limit = {
					state = 391
				}
				multiply_variable = { state_value = PREV.minnesotaGDP }
			}
			else_if = {
				limit = {
					state = 392
				}
				multiply_variable = { state_value = PREV.iowaGDP }
			}
			else_if = {
				limit = {
					state = 373
				}
				multiply_variable = { state_value = PREV.missouriGDP }
			}
			else_if = {
				limit = {
					state = 387
				}
				multiply_variable = { state_value = PREV.idahoGDP }
			}
			else_if = {
				limit = {
					state = 388
				}
				multiply_variable = { state_value = PREV.montanaGDP }
			}
			else_if = {
				limit = {
					state = 381
				}
				multiply_variable = { state_value = PREV.wyomingGDP }
			}
			else_if = {
				limit = {
					state = 380
				}
				multiply_variable = { state_value = PREV.utahGDP }
			}
			else_if = {
				limit = {
					state = 382
				}
				multiply_variable = { state_value = PREV.coloradoGDP }
			}
			else_if = {
				limit = {
					state = 463
				}
				multiply_variable = { state_value = PREV.alaskaGDP }
			}
			else_if = {
				limit = {
					state = 386
				}
				multiply_variable = { state_value = PREV.washingtonGDP }
			}
			else_if = {
				limit = {
					state = 385
				}
				multiply_variable = { state_value = PREV.oregonGDP }
			}
			else_if = {
				limit = {
					state = 378
				}
				multiply_variable = { state_value = PREV.californiaGDP }
			}
			else_if = {
				limit = {
					state = 379
				}
				multiply_variable = { state_value = PREV.nevadaGDP }
			}
			else_if = {
				limit = {
					state = 377
				}
				multiply_variable = { state_value = PREV.arizonaGDP }
			}
			else_if = {
				limit = {
					state = 376
				}
				multiply_variable = { state_value = PREV.new_mexicoGDP }
			}
			else_if = {
				limit = {
					state = 375
				}
				multiply_variable = { state_value = PREV.texasGDP }
			}
			else_if = {
				limit = {
					state = 374
				}
				multiply_variable = { state_value = PREV.oklahomaGDP }
			}
			else_if = {
				limit = {
					state = 686
				}
				multiply_variable = { state_value = PREV.puerto_ricoGDP }
			}
			else_if = {
				limit = {
					state = 2106
				}
				multiply_variable = { state_value = PREV.virgin_islandsGDP }
			}
			else_if = {
				limit = {
					state = 685
				}
				multiply_variable = { state_value = PREV.pczGDP }
			}
			else_if = {
				limit = {
					state = 101
				}
				multiply_variable = { state_value = PREV.greenlandGDP }
			}
		}
	}
	if = {
		limit = {
			tag = NRB
		}
		set_variable = { sarawakGDP = 0.217 }
		set_variable = { bruneiGDP = 0.032 }
		set_variable = { sabahGDP = 0.075 }
		
		multiply_variable = { sarawak_totalstateGDP = neededGDP }
		multiply_variable = { brunei_totalstateGDP = neededGDP }
		multiply_variable = { sabah_totalstateGDP = neededGDP }
		
		divide_variable = { sarawak_totalstateGDP = 1000 }
		divide_variable = { brunei_totalstateGDP = 1000 }
		divide_variable = { sabah_totalstateGDP = 1000 }
		
		divide_variable = { sarawakGDP = sarawak_totalstateGDP }
		divide_variable = { bruneiGDP = brunei_totalstateGDP }
		divide_variable = { sabahGDP = sabah_totalstateGDP }
		
		every_owned_state = {
			if = {
				limit = {
					has_state_flag = GDP_regions_sarawak
				}
				multiply_variable = { state_value = PREV.sarawakGDP }
			}
			else_if = {
				limit = {
					state = 807
				}
				multiply_variable = { state_value = PREV.bruneiGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_sabah
				}
				multiply_variable = { state_value = PREV.sabahGDP }
			}
		}
	}
	if = {
		limit = {
			tag = INS
		}
		set_variable = { djakartaGDP = 1.533 }
		set_variable = { east_west_javaGDP = 7.405 }
		set_variable = { central_javaGDP = 3.310 }
		set_variable = { riauGDP = 0.904 }
		set_variable = { medanGDP = 1.433 }
		set_variable = { djambiGDP = 0.239 }
		set_variable = { south_sumatraGDP = 1.127 }
		set_variable = { sumatraGDP = 1.524 }
		set_variable = { makassarGDP = 0.587 }
		set_variable = { minahasaGDP = 0.182 }
		set_variable = { southeast_sulawesiGDP = 0.131 }
		set_variable = { sulawesiGDP = 0.320 }
		set_variable = { e_kalimantanGDP = 0.310 }
		set_variable = { kalimantanGDP = 0.851 }
		set_variable = { baliGDP = 0.387 }
		set_variable = { nusa_tenggaraGDP = 0.449 }
		set_variable = { malukuGDP = 0.180 }
		set_variable = { west_papuaGDP = 0.101 }
		
		multiply_variable = { djakarta_totalstateGDP = neededGDP }
		multiply_variable = { east_west_java_totalstateGDP = neededGDP }
		multiply_variable = { central_java_totalstateGDP = neededGDP }
		multiply_variable = { riau_totalstateGDP = neededGDP }
		multiply_variable = { medan_totalstateGDP = neededGDP }
		multiply_variable = { djambi_totalstateGDP = neededGDP }
		multiply_variable = { south_sumatra_totalstateGDP = neededGDP }
		multiply_variable = { sumatra_totalstateGDP = neededGDP }
		multiply_variable = { makassar_totalstateGDP = neededGDP }
		multiply_variable = { minahasa_totalstateGDP = neededGDP }
		multiply_variable = { southeast_sulawesi_totalstateGDP = neededGDP }
		multiply_variable = { sulawesi_totalstateGDP = neededGDP }
		multiply_variable = { e_kalimantan_totalstateGDP = neededGDP }
		multiply_variable = { kalimantan_totalstateGDP = neededGDP }
		multiply_variable = { bali_totalstateGDP = neededGDP }
		multiply_variable = { nusa_tenggara_totalstateGDP = neededGDP }
		multiply_variable = { maluku_totalstateGDP = neededGDP }
		multiply_variable = { west_papua_totalstateGDP = neededGDP }
		
		divide_variable = { djakarta_totalstateGDP = 1000 }
		divide_variable = { east_west_java_totalstateGDP = 1000 }
		divide_variable = { central_java_totalstateGDP = 1000 }
		divide_variable = { riau_totalstateGDP = 1000 }
		divide_variable = { medan_totalstateGDP = 1000 }
		divide_variable = { djambi_totalstateGDP = 1000 }
		divide_variable = { south_sumatra_totalstateGDP = 1000 }
		divide_variable = { sumatra_totalstateGDP = 1000 }
		divide_variable = { makassar_totalstateGDP = 1000 }
		divide_variable = { minahasa_totalstateGDP = 1000 }
		divide_variable = { southeast_sulawesi_totalstateGDP = 1000 }
		divide_variable = { sulawesi_totalstateGDP = 1000 }
		divide_variable = { e_kalimantan_totalstateGDP = 1000 }
		divide_variable = { kalimantan_totalstateGDP = 1000 }
		divide_variable = { bali_totalstateGDP = 1000 }
		divide_variable = { nusa_tenggara_totalstateGDP = 1000 }
		divide_variable = { maluku_totalstateGDP = 1000 }
		divide_variable = { west_papua_totalstateGDP = 1000 }
		
		divide_variable = { djakartaGDP = djakarta_totalstateGDP }
		divide_variable = { east_west_javaGDP = east_west_java_totalstateGDP }
		divide_variable = { central_javaGDP = central_java_totalstateGDP }
		divide_variable = { riauGDP = riau_totalstateGDP }
		divide_variable = { medanGDP = medan_totalstateGDP }
		divide_variable = { djambiGDP = djambi_totalstateGDP }
		divide_variable = { south_sumatraGDP = south_sumatra_totalstateGDP }
		divide_variable = { sumatraGDP = sumatra_totalstateGDP }
		divide_variable = { makassarGDP = makassar_totalstateGDP }
		divide_variable = { minahasaGDP = minahasa_totalstateGDP }
		divide_variable = { southeast_sulawesiGDP = southeast_sulawesi_totalstateGDP }
		divide_variable = { sulawesiGDP = sulawesi_totalstateGDP }
		divide_variable = { e_kalimantanGDP = e_kalimantan_totalstateGDP }
		divide_variable = { kalimantanGDP = kalimantan_totalstateGDP }
		divide_variable = { baliGDP = bali_totalstateGDP }
		divide_variable = { nusa_tenggaraGDP = nusa_tenggara_totalstateGDP }
		divide_variable = { malukuGDP = maluku_totalstateGDP }
		divide_variable = { west_papuaGDP = west_papua_totalstateGDP }
		
		every_owned_state = {
			if = {
				limit = {
					state = 795
				}
				multiply_variable = { state_value = PREV.djakartaGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_central_java
				}
				multiply_variable = { state_value = PREV.central_javaGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_east_west_java
				}
				multiply_variable = { state_value = PREV.east_west_javaGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_riau
				}
				multiply_variable = { state_value = PREV.riauGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_medan
				}
				multiply_variable = { state_value = PREV.medanGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_djambi
				}
				multiply_variable = { state_value = PREV.djambiGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_south_sumatra
				}
				multiply_variable = { state_value = PREV.south_sumatraGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_sumatra
				}
				multiply_variable = { state_value = PREV.sumatraGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_makassar
				}
				multiply_variable = { state_value = PREV.makassarGDP }
			}
			else_if = {
				limit = {
					state = 783
				}
				multiply_variable = { state_value = PREV.minahasaGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_southeast_sulawesi
				}
				multiply_variable = { state_value = PREV.southeast_sulawesiGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_sulawesi
				}
				multiply_variable = { state_value = PREV.sulawesiGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_kalimantan
				}
				multiply_variable = { state_value = PREV.kalimantanGDP }
			}
			else_if = {
				limit = {
					state = 794
				}
				multiply_variable = { state_value = PREV.e_kalimantanGDP }
			}
			else_if = {
				limit = {
					state = 1757
				}
				multiply_variable = { state_value = PREV.baliGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_nusa_tenggara
				}
				multiply_variable = { state_value = PREV.nusa_tenggaraGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_maluku
				}
				multiply_variable = { state_value = PREV.malukuGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_west_papua
				}
				multiply_variable = { state_value = PREV.west_papuaGDP }
			}
		}
	}
	if = {
		limit = {
			tag = CHI
		}
		set_variable = { nanjingGDP = 0.771 }
		set_variable = { shanghaiGDP = 6.293 }
		set_variable = { beijingGDP = 1.353 }
		set_variable = { tianjinGDP = 2.647 }
		set_variable = { chongqingGDP = 0.836 }
		set_variable = { qingdaoGDP = 0.770 }
		set_variable = { xiamenGDP = 0.156 }
		set_variable = { jiangsu_huaihaiGDP = 6.893 }
		set_variable = { anhuiGDP = 3.261 }
		set_variable = { zhejiang_ouhaiGDP = 3.493 }
		set_variable = { jiangxi_ganjiangGDP = 2.685 }
		set_variable = { fujianGDP = 1.775 }
		set_variable = { hubeiGDP = 2.791 }
		set_variable = { hunanGDP = 3.960 }
		set_variable = { henan_sanyangGDP = 5.139 }
		set_variable = { hebei_zhongyuanGDP = 5.316 }
		set_variable = { shandong_taiyueGDP = 6.238 }
		set_variable = { chuandongGDP = 0.931 }
		set_variable = { chuanxiGDP = 2.643 }
		set_variable = { south_shaanxiGDP = 0.886 }
		set_variable = { wuhanGDP = 0.709 }
		set_variable = { hainanGDP = 0.389 }
		
		multiply_variable = { nanjing_totalstateGDP = neededGDP }
		multiply_variable = { shanghai_totalstateGDP = neededGDP }
		multiply_variable = { beijing_totalstateGDP = neededGDP }
		multiply_variable = { tianjin_totalstateGDP = neededGDP }
		multiply_variable = { chongqing_totalstateGDP = neededGDP }
		multiply_variable = { qingdao_totalstateGDP = neededGDP }
		multiply_variable = { xiamen_totalstateGDP = neededGDP }
		multiply_variable = { jiangsu_huaihai_totalstateGDP = neededGDP }
		multiply_variable = { anhui_totalstateGDP = neededGDP }
		multiply_variable = { zhejiang_ouhai_totalstateGDP = neededGDP }
		multiply_variable = { jiangxi_ganjiang_totalstateGDP = neededGDP }
		multiply_variable = { fujian_totalstateGDP = neededGDP }
		multiply_variable = { hubei_totalstateGDP = neededGDP }
		multiply_variable = { hunan_totalstateGDP = neededGDP }
		multiply_variable = { henan_sanyang_totalstateGDP = neededGDP }
		multiply_variable = { hebei_zhongyuan_totalstateGDP = neededGDP }
		multiply_variable = { shandong_taiyue_totalstateGDP = neededGDP }
		multiply_variable = { chuandong_totalstateGDP = neededGDP }
		multiply_variable = { chuanxi_totalstateGDP = neededGDP }
		multiply_variable = { wuhan_totalstateGDP = neededGDP }
		multiply_variable = { south_shaanxi_totalstateGDP = neededGDP }
		multiply_variable = { hainan_totalstateGDP = neededGDP }
		
		divide_variable = { nanjing_totalstateGDP = 1000 }
		divide_variable = { shanghai_totalstateGDP = 1000 }
		divide_variable = { beijing_totalstateGDP = 1000 }
		divide_variable = { tianjin_totalstateGDP = 1000 }
		divide_variable = { chongqing_totalstateGDP = 1000 }
		divide_variable = { qingdao_totalstateGDP = 1000 }
		divide_variable = { xiamen_totalstateGDP = 1000 }
		divide_variable = { jiangsu_huaihai_totalstateGDP = 1000 }
		divide_variable = { anhui_totalstateGDP = 1000 }
		divide_variable = { zhejiang_ouhai_totalstateGDP = 1000 }
		divide_variable = { jiangxi_ganjiang_totalstateGDP = 1000 }
		divide_variable = { fujian_totalstateGDP = 1000 }
		divide_variable = { hubei_totalstateGDP = 1000 }
		divide_variable = { hunan_totalstateGDP = 1000 }
		divide_variable = { henan_sanyang_totalstateGDP = 1000 }
		divide_variable = { hebei_zhongyuan_totalstateGDP = 1000 }
		divide_variable = { shandong_taiyue_totalstateGDP = 1000 }
		divide_variable = { chuandong_totalstateGDP = 1000 }
		divide_variable = { chuanxi_totalstateGDP = 1000 }
		divide_variable = { wuhan_totalstateGDP = 1000 }
		divide_variable = { south_shaanxi_totalstateGDP = 1000 }
		divide_variable = { hainan_totalstateGDP = 1000 }
		
		divide_variable = { nanjingGDP = nanjing_totalstateGDP }
		divide_variable = { shanghaiGDP = shanghai_totalstateGDP }
		divide_variable = { beijingGDP = beijing_totalstateGDP }
		divide_variable = { tianjinGDP = tianjin_totalstateGDP }
		divide_variable = { chongqingGDP = chongqing_totalstateGDP }
		divide_variable = { qingdaoGDP = qingdao_totalstateGDP }
		divide_variable = { xiamenGDP = xiamen_totalstateGDP }
		divide_variable = { jiangsu_huaihaiGDP = jiangsu_huaihai_totalstateGDP }
		divide_variable = { anhuiGDP = anhui_totalstateGDP }
		divide_variable = { zhejiang_ouhaiGDP = zhejiang_ouhai_totalstateGDP }
		divide_variable = { jiangxi_ganjiangGDP = jiangxi_ganjiang_totalstateGDP }
		divide_variable = { fujianGDP = fujian_totalstateGDP }
		divide_variable = { hubeiGDP = hubei_totalstateGDP }
		divide_variable = { hunanGDP = hunan_totalstateGDP }
		divide_variable = { henan_sanyangGDP = henan_sanyang_totalstateGDP }
		divide_variable = { hebei_zhongyuanGDP = hebei_zhongyuan_totalstateGDP }
		divide_variable = { shandong_taiyueGDP = shandong_taiyue_totalstateGDP }
		divide_variable = { chuandongGDP = chuandong_totalstateGDP }
		divide_variable = { chuanxiGDP = chuanxi_totalstateGDP }
		divide_variable = { wuhanGDP = wuhan_totalstateGDP }
		divide_variable = { south_shaanxiGDP = south_shaanxi_totalstateGDP }
		divide_variable = { hainanGDP = hainan_totalstateGDP }
		
		every_owned_state = {
			if = {
				limit = {
					state = 613
				}
				multiply_variable = { state_value = PREV.nanjingGDP }
			}
			else_if = {
				limit = {
					state = 813
				}
				multiply_variable = { state_value = PREV.shanghaiGDP }
			}
			else_if = {
				limit = {
					state = 608
				}
				multiply_variable = { state_value = PREV.beijingGDP }
			}
			else_if = {
				limit = {
					state = 2325
				}
				multiply_variable = { state_value = PREV.tianjinGDP }
			}
			else_if = {
				limit = {
					state = 1538
				}
				multiply_variable = { state_value = PREV.chongqingGDP }
			}
			else_if = {
				limit = {
					state = 812
				}
				multiply_variable = { state_value = PREV.qingdaoGDP }
			}
			else_if = {
				limit = {
					state = 2326
				}
				multiply_variable = { state_value = PREV.xiamenGDP }
			}
			else_if = {
				limit = {
					state = 1016
				}
				multiply_variable = { state_value = PREV.wuhanGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_jiangsu_huaihai
				}
				multiply_variable = { state_value = PREV.jiangsu_huaihaiGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_anhui
				}
				multiply_variable = { state_value = PREV.anhuiGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_zhejiang_ouhai
				}
				multiply_variable = { state_value = PREV.zhejiang_ouhaiGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_jiangxi_ganjiang
				}
				multiply_variable = { state_value = PREV.jiangxi_ganjiangGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_fujian
				}
				multiply_variable = { state_value = PREV.fujianGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_hubei
				}
				multiply_variable = { state_value = PREV.hubeiGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_hunan
				}
				multiply_variable = { state_value = PREV.hunanGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_henan_sanyang
				}
				multiply_variable = { state_value = PREV.henan_sanyangGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_hebei_zhongyuan
				}
				multiply_variable = { state_value = PREV.hebei_zhongyuanGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_shandong_taiyue
				}
				multiply_variable = { state_value = PREV.shandong_taiyueGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_chuandong
				}
				multiply_variable = { state_value = PREV.chuandongGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_chuanxi
				}
				multiply_variable = { state_value = PREV.chuanxiGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_south_shaanxi
				}
				multiply_variable = { state_value = PREV.south_shaanxiGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_hainan
				}
				multiply_variable = { state_value = PREV.hainanGDP }
			}
		}
	}
	if = {
		limit = {
			tag = SHX
		}
		set_variable = { shanxiGDP = 2.387 }
		set_variable = { shaanxiGDP = 1.320 }
		
		multiply_variable = { shanxi_totalstateGDP = neededGDP }
		multiply_variable = { shaanxi_totalstateGDP = neededGDP }
		
		divide_variable = { shanxi_totalstateGDP = 1000 }
		divide_variable = { shaanxi_totalstateGDP = 1000 }
		
		divide_variable = { shanxiGDP = shanxi_totalstateGDP }
		divide_variable = { shaanxiGDP = shaanxi_totalstateGDP }
		
		every_owned_state = {
			if = {
				limit = {
					has_state_flag = GDP_regions_shanxi
				}
				multiply_variable = { state_value = PREV.shanxiGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_shaanxi
				}
				multiply_variable = { state_value = PREV.shaanxiGDP }
			}
		}
	}
	if = {
		limit = {
			tag = MEN
		}
		set_variable = { chahar_suiyuanGDP = 2.772 }
		set_variable = { outer_mongoliaGDP = 0.345 }
		
		multiply_variable = { chahar_suiyuan_totalstateGDP = neededGDP }
		multiply_variable = { outer_mongolia_totalstateGDP = neededGDP }
		
		divide_variable = { chahar_suiyuan_totalstateGDP = 1000 }
		divide_variable = { outer_mongolia_totalstateGDP = 1000 }
		
		divide_variable = { chahar_suiyuanGDP = chahar_suiyuan_totalstateGDP }
		divide_variable = { outer_mongoliaGDP = outer_mongolia_totalstateGDP }
		
		every_owned_state = {
			if = {
				limit = {
					has_state_flag = GDP_regions_chahar_suiyuan
				}
				multiply_variable = { state_value = PREV.chahar_suiyuanGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_outer_mongolia
				}
				multiply_variable = { state_value = PREV.outer_mongoliaGDP }
			}
		}
	}
	if = {
		limit = {
			tag = QIN
		}
		set_variable = { qinghaiGDP = 0.275 }
		set_variable = { gansuGDP = 0.443 }
		
		multiply_variable = { qinghai_totalstateGDP = neededGDP }
		multiply_variable = { gansu_totalstateGDP = neededGDP }
		
		divide_variable = { qinghai_totalstateGDP = 1000 }
		divide_variable = { gansu_totalstateGDP = 1000 }
		
		divide_variable = { qinghaiGDP = qinghai_totalstateGDP }
		divide_variable = { gansuGDP = gansu_totalstateGDP }
		
		every_owned_state = {
			if = {
				limit = {
					has_state_flag = GDP_regions_qinghai
				}
				multiply_variable = { state_value = PREV.qinghaiGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_gansu
				}
				multiply_variable = { state_value = PREV.gansuGDP }
			}
		}
	}
	if = {
		limit = {
			tag = COL
		}
		set_variable = { san_andresGDP = 0.008 }
		set_variable = { guajiraGDP = 0.031 }
		set_variable = { bogotaGDP = 1.302 }
		set_variable = { cundinamarcaGDP = 1.154 }
		set_variable = { tolimaGDP = 0.195 }
		set_variable = { huilaGDP = 0.150 }
		set_variable = { antioquiaGDP = 1.615 }
		set_variable = { caldasGDP = 0.297 }
		set_variable = { cordoba_COLGDP = 0.195 }
		set_variable = { bolivar_COLGDP = 0.249 }
		set_variable = { cartagenaGDP = 0.182 }
		set_variable = { atlanticoGDP = 0.435 }
		set_variable = { magdalenaGDP = 0.286 }
		set_variable = { chocoGDP = 0.046 }
		set_variable = { caquetaGDP = 0.035 }
		set_variable = { putumayoGDP = 0.019 }
		set_variable = { amazonas_COLGDP = 0.002 }
		set_variable = { n_santanderGDP = 0.096 }
		set_variable = { santanderGDP = 0.421 }
		
		multiply_variable = { san_andres_totalstateGDP = neededGDP }
		multiply_variable = { guajira_totalstateGDP = neededGDP }
		multiply_variable = { bogota_totalstateGDP = neededGDP }
		multiply_variable = { cundinamarca_totalstateGDP = neededGDP }
		multiply_variable = { tolima_totalstateGDP = neededGDP }
		multiply_variable = { huila_totalstateGDP = neededGDP }
		multiply_variable = { antioquia_totalstateGDP = neededGDP }
		multiply_variable = { caldas_totalstateGDP = neededGDP }
		multiply_variable = { cordoba_COL_totalstateGDP = neededGDP }
		multiply_variable = { bolivar_COL_totalstateGDP = neededGDP }
		multiply_variable = { cartagena_totalstateGDP = neededGDP }
		multiply_variable = { atlantico_totalstateGDP = neededGDP }
		multiply_variable = { magdalena_totalstateGDP = neededGDP }
		multiply_variable = { choco_totalstateGDP = neededGDP }
		multiply_variable = { caqueta_totalstateGDP = neededGDP }
		multiply_variable = { putumayo_totalstateGDP = neededGDP }
		multiply_variable = { amazonas_COL_totalstateGDP = neededGDP }
		multiply_variable = { n_santander_totalstateGDP = neededGDP }
		multiply_variable = { santander_totalstateGDP = neededGDP }
		
		divide_variable = { san_andres_totalstateGDP = 1000 }
		divide_variable = { guajira_totalstateGDP = 1000 }
		divide_variable = { bogota_totalstateGDP = 1000 }
		divide_variable = { cundinamarca_totalstateGDP = 1000 }
		divide_variable = { tolima_totalstateGDP = 1000 }
		divide_variable = { huila_totalstateGDP = 1000 }
		divide_variable = { antioquia_totalstateGDP = 1000 }
		divide_variable = { caldas_totalstateGDP = 1000 }
		divide_variable = { cordoba_COL_totalstateGDP = 1000 }
		divide_variable = { bolivar_COL_totalstateGDP = 1000 }
		divide_variable = { cartagena_totalstateGDP = 1000 }
		divide_variable = { atlantico_totalstateGDP = 1000 }
		divide_variable = { magdalena_totalstateGDP = 1000 }
		divide_variable = { choco_totalstateGDP = 1000 }
		divide_variable = { caqueta_totalstateGDP = 1000 }
		divide_variable = { putumayo_totalstateGDP = 1000 }
		divide_variable = { amazonas_COL_totalstateGDP = 1000 }
		divide_variable = { n_santander_totalstateGDP = 1000 }
		divide_variable = { santander_totalstateGDP = 1000 }
		
		divide_variable = { san_andresGDP = san_andres_totalstateGDP }
		divide_variable = { guajiraGDP = guajira_totalstateGDP }
		divide_variable = { bogotaGDP = bogota_totalstateGDP }
		divide_variable = { cundinamarcaGDP = cundinamarca_totalstateGDP }
		divide_variable = { tolimaGDP = tolima_totalstateGDP }
		divide_variable = { huilaGDP = huila_totalstateGDP }
		divide_variable = { antioquiaGDP = antioquia_totalstateGDP }
		divide_variable = { caldasGDP = caldas_totalstateGDP }
		divide_variable = { cordoba_COLGDP = cordoba_COL_totalstateGDP }
		divide_variable = { bolivar_COLGDP = bolivar_COL_totalstateGDP }
		divide_variable = { cartagenaGDP = cartagena_totalstateGDP }
		divide_variable = { atlanticoGDP = atlantico_totalstateGDP }
		divide_variable = { magdalenaGDP = magdalena_totalstateGDP }
		divide_variable = { chocoGDP = choco_totalstateGDP }
		divide_variable = { caquetaGDP = caqueta_totalstateGDP }
		divide_variable = { putumayoGDP = putumayo_totalstateGDP }
		divide_variable = { amazonas_COLGDP = amazonas_COL_totalstateGDP }
		divide_variable = { n_santanderGDP = n_santander_totalstateGDP }
		divide_variable = { santanderGDP = santander_totalstateGDP }
		
		every_owned_state = {
			if = {
				limit = {
					state = 2445
				}
				multiply_variable = { state_value = PREV.san_andresGDP }
			}
			else_if = {
				limit = {
					state = 493
				}
				multiply_variable = { state_value = PREV.guajiraGDP }
			}
			else_if = {
				limit = {
					state = 306
				}
				multiply_variable = { state_value = PREV.bogotaGDP }
			}
			else_if = {
				limit = {
					state = 2446
				}
				multiply_variable = { state_value = PREV.cundinamarcaGDP }
			}
			else_if = {
				limit = {
					state = 1656
				}
				multiply_variable = { state_value = PREV.tolimaGDP }
			}
			else_if = {
				limit = {
					state = 1655
				}
				multiply_variable = { state_value = PREV.huilaGDP }
			}
			else_if = {
				limit = {
					state = 1663
				}
				multiply_variable = { state_value = PREV.antioquiaGDP }
			}
			else_if = {
				limit = {
					state = 1664
				}
				multiply_variable = { state_value = PREV.caldasGDP }
			}
			else_if = {
				limit = {
					state = 1699
				}
				multiply_variable = { state_value = PREV.cordoba_COLGDP }
			}
			else_if = {
				limit = {
					state = 1660
				}
				multiply_variable = { state_value = PREV.bolivar_COLGDP }
			}
			else_if = {
				limit = {
					state = 2524
				}
				multiply_variable = { state_value = PREV.cartagenaGDP }
			}
			else_if = {
				limit = {
					state = 1659
				}
				multiply_variable = { state_value = PREV.atlanticoGDP }
			}
			else_if = {
				limit = {
					state = 1700
				}
				multiply_variable = { state_value = PREV.magdalenaGDP }
			}
			else_if = {
				limit = {
					state = 1665
				}
				multiply_variable = { state_value = PREV.chocoGDP }
			}
			else_if = {
				limit = {
					state = 1650
				}
				multiply_variable = { state_value = PREV.caquetaGDP }
			}
			else_if = {
				limit = {
					state = 2447
				}
				multiply_variable = { state_value = PREV.putumayoGDP }
			}
			else_if = {
				limit = {
					state = 2448
				}
				multiply_variable = { state_value = PREV.amazonas_COLGDP }
			}
			else_if = {
				limit = {
					state = 2449
				}
				multiply_variable = { state_value = PREV.n_santanderGDP }
			}
			else_if = {
				limit = {
					state = 1661
				}
				multiply_variable = { state_value = PREV.santanderGDP }
			}
		}
	}
	if = {
		limit = {
			tag = CLL
		}
		set_variable = { boyacaGDP = 0.652 }
		set_variable = { metaGDP = 0.07 }
		set_variable = { vichadaGDP = 0.002 }
		set_variable = { araucaGDP = 0.006 }
		set_variable = { vaupesGDP = 0.002 }
		
		multiply_variable = { boyaca_totalstateGDP = neededGDP }
		multiply_variable = { meta_totalstateGDP = neededGDP }
		multiply_variable = { vichada_totalstateGDP = neededGDP }
		multiply_variable = { arauca_totalstateGDP = neededGDP }
		multiply_variable = { vaupes_totalstateGDP = neededGDP }
		
		divide_variable = { boyaca_totalstateGDP = 1000 }
		divide_variable = { meta_totalstateGDP = 1000 }
		divide_variable = { vichada_totalstateGDP = 1000 }
		divide_variable = { arauca_totalstateGDP = 1000 }
		divide_variable = { vaupes_totalstateGDP = 1000 }
		
		divide_variable = { boyacaGDP = boyaca_totalstateGDP }
		divide_variable = { metaGDP = meta_totalstateGDP }
		divide_variable = { vichadaGDP = vichada_totalstateGDP }
		divide_variable = { araucaGDP = arauca_totalstateGDP }
		divide_variable = { vaupesGDP = vaupes_totalstateGDP }
		
		every_owned_state = {
			if = {
				limit = {
					state = 1657
				}
				multiply_variable = { state_value = PREV.boyacaGDP }
			}
			else_if = {
				limit = {
					state = 486
				}
				multiply_variable = { state_value = PREV.metaGDP }
			}
			else_if = {
				limit = {
					state = 1658
				}
				multiply_variable = { state_value = PREV.araucaGDP }
			}
			else_if = {
				limit = {
					state = 1652
				}
				multiply_variable = { state_value = PREV.vichadaGDP }
			}
			else_if = {
				limit = {
					state = 1651
				}
				multiply_variable = { state_value = PREV.vaupesGDP }
			}
		}
	}
	if = {
		limit = {
			tag = CLC
		}
		set_variable = { caucaGDP = 0.299 }
		set_variable = { valle_del_caucaGDP = 1.020 }
		set_variable = { narinoGDP = 0.218 }
		set_variable = { ibagueGDP = 0.110 }
		
		multiply_variable = { cauca_totalstateGDP = neededGDP }
		multiply_variable = { valle_del_cauca_totalstateGDP = neededGDP }
		multiply_variable = { narino_totalstateGDP = neededGDP }
		multiply_variable = { ibague_totalstateGDP = neededGDP }
		
		divide_variable = { cauca_totalstateGDP = 1000 }
		divide_variable = { valle_del_cauca_totalstateGDP = 1000 }
		divide_variable = { narino_totalstateGDP = 1000 }
		divide_variable = { ibague_totalstateGDP = 1000 }
		
		divide_variable = { caucaGDP = cauca_totalstateGDP }
		divide_variable = { valle_del_caucaGDP = valle_del_cauca_totalstateGDP }
		divide_variable = { narinoGDP = narino_totalstateGDP }
		divide_variable = { ibagueGDP = ibague_totalstateGDP }
		
		every_owned_state = {
			if = {
				limit = {
					state = 1662
				}
				multiply_variable = { state_value = PREV.caucaGDP }
			}
			else_if = {
				limit = {
					state = 1654
				}
				multiply_variable = { state_value = PREV.valle_del_caucaGDP }
			}
			else_if = {
				limit = {
					state = 1653
				}
				multiply_variable = { state_value = PREV.narinoGDP }
			}
			else_if = {
				limit = {
					state = 2458
				}
				multiply_variable = { state_value = PREV.ibagueGDP }
			}
		}
	}
	if = {
		limit = {
			tag = CAN
		}
		set_variable = { ontarioGDP = 13.099 }
		set_variable = { british_columbiaGDP = 3.249 }
		set_variable = { albertaGDP = 2.117 }
		set_variable = { manitobaGDP = 1.422 }
		set_variable = { quebecGDP = 7.869 }
		set_variable = { saskatchewanGDP = 1.048 }
		set_variable = { nova_scotiaGDP = 0.756 }
		set_variable = { new_brunswickGDP = 0.589 }
		set_variable = { prince_edward_islandGDP = 0.092 }
		set_variable = { newfoundlandGDP = 0.398 }
		set_variable = { yukonGDP = 0.028 }
		set_variable = { northwest_territoriesGDP = 0.043 }
		set_variable = { bahamasGDP = 0.086 }
		set_variable = { turks_and_caicosGDP = 0.003 }
		set_variable = { bermudaGDP = 0.112 }
		set_variable = { cayman_islandsGDP = 0.007 }
		set_variable = { british_virgin_islandsGDP = 0.005 }
		set_variable = { south_atlanticGDP = 0.011 }
		
		multiply_variable = { ontario_totalstateGDP = neededGDP }
		multiply_variable = { british_columbia_totalstateGDP = neededGDP }
		multiply_variable = { alberta_totalstateGDP = neededGDP }
		multiply_variable = { manitoba_totalstateGDP = neededGDP }
		multiply_variable = { quebec_totalstateGDP = neededGDP }
		multiply_variable = { saskatchewan_totalstateGDP = neededGDP }
		multiply_variable = { nova_scotia_totalstateGDP = neededGDP }
		multiply_variable = { new_brunswick_totalstateGDP = neededGDP }
		multiply_variable = { prince_edward_island_totalstateGDP = neededGDP }
		multiply_variable = { newfoundland_totalstateGDP = neededGDP }
		multiply_variable = { yukon_totalstateGDP = neededGDP }
		multiply_variable = { northwest_territories_totalstateGDP = neededGDP }
		multiply_variable = { bahamas_totalstateGDP = neededGDP }
		multiply_variable = { turks_and_caicos_totalstateGDP = neededGDP }
		multiply_variable = { bermuda_totalstateGDP = neededGDP }
		multiply_variable = { cayman_islands_totalstateGDP = neededGDP }
		multiply_variable = { british_virgin_islands_totalstateGDP = neededGDP }
		multiply_variable = { south_atlantic_totalstateGDP = neededGDP }
		
		divide_variable = { ontario_totalstateGDP = 1000 }
		divide_variable = { british_columbia_totalstateGDP = 1000 }
		divide_variable = { alberta_totalstateGDP = 1000 }
		divide_variable = { manitoba_totalstateGDP = 1000 }
		divide_variable = { quebec_totalstateGDP = 1000 }
		divide_variable = { saskatchewan_totalstateGDP = 1000 }
		divide_variable = { nova_scotia_totalstateGDP = 1000 }
		divide_variable = { new_brunswick_totalstateGDP = 1000 }
		divide_variable = { prince_edward_island_totalstateGDP = 1000 }
		divide_variable = { newfoundland_totalstateGDP = 1000 }
		divide_variable = { yukon_totalstateGDP = 1000 }
		divide_variable = { northwest_territories_totalstateGDP = 1000 }
		divide_variable = { bahamas_totalstateGDP = 1000 }
		divide_variable = { turks_and_caicos_totalstateGDP = 1000 }
		divide_variable = { bermuda_totalstateGDP = 1000 }
		divide_variable = { cayman_islands_totalstateGDP = 1000 }
		divide_variable = { british_virgin_islands_totalstateGDP = 1000 }
		divide_variable = { south_atlantic_totalstateGDP = 1000 }
		
		divide_variable = { ontarioGDP = ontario_totalstateGDP }
		divide_variable = { british_columbiaGDP = british_columbia_totalstateGDP }
		divide_variable = { albertaGDP = alberta_totalstateGDP }
		divide_variable = { manitobaGDP = manitoba_totalstateGDP }
		divide_variable = { quebecGDP = quebec_totalstateGDP }
		divide_variable = { saskatchewanGDP = saskatchewan_totalstateGDP }
		divide_variable = { nova_scotiaGDP = nova_scotia_totalstateGDP }
		divide_variable = { new_brunswickGDP = new_brunswick_totalstateGDP }
		divide_variable = { prince_edward_islandGDP = prince_edward_island_totalstateGDP }
		divide_variable = { newfoundlandGDP = newfoundland_totalstateGDP }
		divide_variable = { yukonGDP = yukon_totalstateGDP }
		divide_variable = { northwest_territoriesGDP = northwest_territories_totalstateGDP }
		divide_variable = { bahamasGDP = bahamas_totalstateGDP }
		divide_variable = { turks_and_caicosGDP = turks_and_caicos_totalstateGDP }
		divide_variable = { bermudaGDP = bermuda_totalstateGDP }
		divide_variable = { cayman_islandsGDP = cayman_islands_totalstateGDP }
		divide_variable = { british_virgin_islandsGDP = british_virgin_islands_totalstateGDP }
		divide_variable = { south_atlanticGDP = south_atlantic_totalstateGDP }
		
		every_owned_state = {
			if = {
				limit = {
					has_state_flag = GDP_regions_ontario
				}
				multiply_variable = { state_value = PREV.ontarioGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_british_columbia
				}
				multiply_variable = { state_value = PREV.british_columbiaGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_alberta
				}
				multiply_variable = { state_value = PREV.albertaGDP }
			}
			else_if = {
				limit = {
					state = 683
				}
				multiply_variable = { state_value = PREV.manitobaGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_quebec
				}
				multiply_variable = { state_value = PREV.quebecGDP }
			}
			else_if = {
				limit = {
					state = 1433
				}
				multiply_variable = { state_value = PREV.saskatchewanGDP }
			}
			else_if = {
				limit = {
					state = 464
				}
				multiply_variable = { state_value = PREV.nova_scotiaGDP }
			}
			else_if = {
				limit = {
					state = 465
				}
				multiply_variable = { state_value = PREV.new_brunswickGDP }
			}
			else_if = {
				limit = {
					state = 730
				}
				multiply_variable = { state_value = PREV.prince_edward_islandGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_newfoundland
				}
				multiply_variable = { state_value = PREV.newfoundlandGDP }
			}
			else_if = {
				limit = {
					state = 471
				}
				multiply_variable = { state_value = PREV.yukonGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_northwest_territories
				}
				multiply_variable = { state_value = PREV.northwest_territoriesGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_bahamas
				}
				multiply_variable = { state_value = PREV.bahamasGDP }
			}
			else_if = {
				limit = {
					state = 2512
				}
				multiply_variable = { state_value = PREV.turks_and_caicosGDP }
			}
			else_if = {
				limit = {
					state = 696
				}
				multiply_variable = { state_value = PREV.bermudaGDP }
			}
			else_if = {
				limit = {
					state = 2513
				}
				multiply_variable = { state_value = PREV.cayman_islandsGDP }
			}
			else_if = {
				limit = {
					state = 2444
				}
				multiply_variable = { state_value = PREV.british_virgin_islandsGDP }
			}
			else_if = {
				limit = {
					has_state_flag = GDP_regions_south_atlantic
				}
				multiply_variable = { state_value = PREV.south_atlanticGDP }
			}
		}
	}
}

resolve_excessive_state_gdp = {
	set_variable = { neededGDP = GDP }
	divide_variable = { neededGDP = totalstateGDP }
	every_owned_state = {
		multiply_variable = { state_value = PREV.neededGDP }
	}
}

generate_russia_state_gdp = {
	hidden_effect = {
		# every_owned_state = {
		# 	generate_state_gdps = yes
		# }
		calculate_total_state_gdp = yes
		generate_country_gdp = yes
		set_variable = { GDP_growth = 5.00 }
		multiply_variable = { GDP = 1.5 } #already converted to billion
		resolve_excessive_state_gdp = yes
	}
}

econ_backfill_graphs = {
	set_temp_variable = { econ_graph_month = 8 }
	clear_array = econ_graph_months
	clear_array = gdp_numbers
	clear_array = debt_to_gdp_numbers
	clear_array = inflation_numbers

	set_temp_variable = { monthly_gdp_growth = GDP_growth }
	divide_temp_variable = { monthly_gdp_growth = 12 }
	divide_temp_variable = { monthly_gdp_growth = 100 }
	multiply_temp_variable = { monthly_gdp_growth = GDP }


	set_temp_variable = { monthly_debt_growth = deficit }
	divide_temp_variable = { monthly_debt_growth = 12 }
	#multiply_temp_variable = { monthly_debt_growth = -1 }

	set_temp_variable = { curr_GDP = GDP }
	set_temp_variable = { curr_debt = national_debt }
	set_temp_variable = { curr_inflation = clamped_inflation_rate }

	for_loop_effect = {
		start = 0
		end = 17
		value = i

		add_to_array = { econ_graph_months = econ_graph_month }
		add_to_temp_variable = { econ_graph_month = 1 }

		add_to_array = { array = gdp_numbers value = curr_GDP index = 0 }

		set_temp_variable = { debt_to_gdp = curr_debt }
		multiply_temp_variable = { debt_to_gdp = 100 }
		divide_temp_variable = { debt_to_gdp = curr_GDP }

		add_to_array = { array = debt_to_gdp_numbers value = debt_to_gdp index = 0 }
		add_to_array = { array = inflation_numbers value = curr_inflation index = 0 }

		# Process GDP
		set_temp_variable = { rand_multiplier = random }
		subtract_from_temp_variable = { rand_multiplier = 0.5 }
		add_to_temp_variable = { rand_multiplier = 1 }
		set_temp_variable = { delta = rand_multiplier }

		multiply_temp_variable = { delta = monthly_gdp_growth }


		subtract_from_temp_variable = { curr_GDP = delta }
		clamp_temp_variable = { var = curr_GDP min = 0 }


		# Process Debt
		set_temp_variable = { rand_multiplier = random }
		subtract_from_temp_variable = { rand_multiplier = 0.5 }
		add_to_temp_variable = { rand_multiplier = 1 }
		set_temp_variable = { delta = rand_multiplier }
		multiply_temp_variable = { delta = monthly_debt_growth }

		subtract_from_temp_variable = { curr_debt = delta }
		clamp_temp_variable = { var = curr_debt min = 0 }

		# Process Inflation
		set_temp_variable = { rand_multiplier = random }
		subtract_from_temp_variable = { rand_multiplier = 0.5 }
		set_temp_variable = { delta = rand_multiplier }

		add_to_temp_variable = { delta = 100 }
		multiply_temp_variable = { delta = curr_inflation }
		divide_temp_variable = { delta = 100 }
		set_temp_variable = { curr_inflation = delta }

		clamp_temp_variable = { var = curr_inflation min = 0 }
	}

	econ_rerender_gdp_graph = yes
	econ_rerender_debt_graph = yes
	econ_rerender_inflation_graph = yes
}

econ_update_graph_monthly = {

	add_to_array = { econ_graph_months = ZZZ.econ_graph_month }
	add_to_array = { gdp_numbers = gdp }

	set_temp_variable = { debt_to_gdp = national_debt }
	multiply_temp_variable = { debt_to_gdp = 100 }
	divide_temp_variable = { debt_to_gdp = gdp }
	add_to_array = { debt_to_gdp_numbers = debt_to_gdp }

	add_to_array = { inflation_numbers = clamped_inflation_rate }

	if = {
		limit = {
			check_variable = { econ_graph_months^num > 17 }
		}
		remove_from_array = { array = econ_graph_months index = 0 }
		remove_from_array = { array = gdp_numbers index = 0 }
		remove_from_array = { array = debt_to_gdp_numbers index = 0 }
		remove_from_array = { array = inflation_numbers index = 0 }
	}

	if = {
		limit = {
			is_ai = no
		}
		econ_rerender_gdp_graph = yes
		econ_rerender_debt_graph = yes
		econ_rerender_inflation_graph = yes
	}
}

econ_rerender_gdp_graph = {
	# Find the maximum and minimum GDP values for the graph
	clear_array = GDP_y_label
	set_temp_variable = { min = gdp_numbers^0 }
	set_temp_variable = { max = gdp_numbers^0 }
	for_loop_effect = {
		start = 0
		end = gdp_numbers^num
		value = i

		if = {
			limit = { check_variable = { gdp_numbers^i > max } }
			set_temp_variable = { max = gdp_numbers^i }
		}
		if = {
			limit = { check_variable = { gdp_numbers^i < min } }
			set_temp_variable = { min = gdp_numbers^i }
		}
	}

	# Simplified version of the range-finding code from Brazil
	# Feel free to move or modify
	# Our range is (min value / 1.1) - (max value * 1.1)
	multiply_temp_variable = { max = 1.1 }
	divide_temp_variable = { min = 1.1 }


	set_temp_variable = { range = max }
	subtract_from_temp_variable = { range = min }

	# Divide the range into 5 equally sized chunks
	set_temp_variable = { display_increment = range }
	divide_temp_variable = { display_increment = 4 }

	set_temp_variable = { gdp_band_display = min }
	for_loop_effect = {
		end = 5
		add_to_array = { GDP_y_label = gdp_band_display index = 0 }
		add_to_temp_variable = { gdp_band_display = display_increment }
	}

	divide_temp_variable = { range = 100 }

	# Get all segments Progress Bar values
	clear_array = gdp_graph_frames
	for_loop_effect = {
		start = 0
		end = 16
		value = i

		set_temp_variable = { j = i }
		add_to_temp_variable = { j = 1 }

		set_temp_variable = { hi = gdp_numbers^j }
		set_temp_variable = { lo = gdp_numbers^i }


		subtract_from_temp_variable = { hi = min }
		subtract_from_temp_variable = { lo = min }
		divide_temp_variable = { hi = range }
		divide_temp_variable = { lo = range }

		round_temp_variable = hi
		round_temp_variable = lo

		set_temp_variable = { endpoints = lo }
		multiply_temp_variable = { endpoints = 1000 }
		add_to_temp_variable = { endpoints = hi }
		add_to_array = { gdp_graph_frames = endpoints }
	}

	add_to_variable = { TNO_economy_GUI_dirty = 1 }
}

econ_rerender_inflation_graph = {
	clear_array = inflation_y_label
	# Find the maximum and minimum inflation values for the graph
	set_temp_variable = { min = inflation_numbers^0 }
	set_temp_variable = { max = inflation_numbers^0 }
	for_loop_effect = {
		start = 0
		end = inflation_numbers^num
		value = i

		if = {
			limit = { check_variable = { inflation_numbers^i > max } }
			set_temp_variable = { max = inflation_numbers^i }
		}
		if = {
			limit = { check_variable = { inflation_numbers^i < min } }
			set_temp_variable = { min = inflation_numbers^i }
		}
	}

	# Simplified version of the range-finding code from Brazil
	# Feel free to move or modify
	# Our range is (min value / 1.1) - (max value * 1.1)
	multiply_temp_variable = { max = 1.1 }
	divide_temp_variable = { min = 1.1 }

	if = {
		limit = { check_variable = { min = max } }
		add_to_temp_variable = { max = 0.05 }
		subtract_from_temp_variable = { min = 0.05 }
	}
	if = {
		limit = { check_variable = { min = 0 } }
		set_temp_variable = { to_sub = max }
		multiply_temp_variable = { to_sub = 0.1 }
		subtract_from_temp_variable = { min = to_sub }
	}

	set_temp_variable = { range = max }
	subtract_from_temp_variable = { range = min }

	# Divide the range into 5 equally sized chunks
	set_temp_variable = { display_increment = range }
	divide_temp_variable = { display_increment = 4 }

	set_temp_variable = { inflation_band_display = min }
	for_loop_effect = {
		end = 5
		add_to_array = { inflation_y_label = inflation_band_display index = 0 }
		add_to_temp_variable = { inflation_band_display = display_increment }
	}

	divide_temp_variable = { range = 100 }

	# Get all segments Progress Bar values
	clear_array = inflation_graph_frames
	for_loop_effect = {
		start = 0
		end = 16
		value = i

		set_temp_variable = { j = i }
		add_to_temp_variable = { j = 1 }

		set_temp_variable = { hi = inflation_numbers^j }
		set_temp_variable = { lo = inflation_numbers^i }


		subtract_from_temp_variable = { hi = min }
		subtract_from_temp_variable = { lo = min }
		divide_temp_variable = { hi = range }
		divide_temp_variable = { lo = range }

		round_temp_variable = hi
		round_temp_variable = lo

		set_temp_variable = { endpoints = lo }
		multiply_temp_variable = { endpoints = 1000 }
		add_to_temp_variable = { endpoints = hi }
		add_to_array = { inflation_graph_frames = endpoints }

	}

	add_to_variable = { TNO_economy_GUI_dirty = 1 }
}

econ_rerender_debt_graph = {
	# Find the maximum and minimum debt values for the graph
	clear_array = debt_y_label
	set_temp_variable = { min = debt_to_gdp_numbers^0 }
	set_temp_variable = { max = debt_to_gdp_numbers^0 }
	for_loop_effect = {
		start = 0
		end = debt_to_gdp_numbers^num
		value = i

		if = {
			limit = { check_variable = { debt_to_gdp_numbers^i > max } }
			set_temp_variable = { max = debt_to_gdp_numbers^i }
		}
		if = {
			limit = { check_variable = { debt_to_gdp_numbers^i < min } }
			set_temp_variable = { min = debt_to_gdp_numbers^i }
		}
	}

	# Simplified version of the range-finding code from Brazil
	# Feel free to move or modify
	# Our range is (min value / 1.1) - (max value * 1.1)
	multiply_temp_variable = { max = 1.1 }
	divide_temp_variable = { min = 1.1 }

	if = {
		limit = { check_variable = { min = max } }
		add_to_temp_variable = { max = 0.05 }
		subtract_from_temp_variable = { min = 0.05 }
	}
	if = {
		limit = { check_variable = { min = 0 } }
		set_temp_variable = { to_sub = max }
		multiply_temp_variable = { to_sub = 0.1 }
		subtract_from_temp_variable = { min = to_sub }
	}

	set_temp_variable = { range = max }
	subtract_from_temp_variable = { range = min }

	# Divide the range into 5 equally sized chunks
	set_temp_variable = { display_increment = range }
	divide_temp_variable = { display_increment = 4 }

	set_temp_variable = { debt_band_display = min }

	for_loop_effect = {
		end = 5
		add_to_array = { debt_y_label = debt_band_display index = 0 }
		add_to_temp_variable = { debt_band_display = display_increment }
	}

	divide_temp_variable = { range = 100 }

	# Get all segments Progress Bar values
	clear_array = debt_to_gdp_frames
	for_loop_effect = {
		start = 0
		end = 16
		value = i

		set_temp_variable = { j = i }
		add_to_temp_variable = { j = 1 }

		set_temp_variable = { hi = debt_to_gdp_numbers^j }
		set_temp_variable = { lo = debt_to_gdp_numbers^i }


		subtract_from_temp_variable = { hi = min }
		subtract_from_temp_variable = { lo = min }
		divide_temp_variable = { hi = range }
		divide_temp_variable = { lo = range }

		round_temp_variable = hi
		round_temp_variable = lo

		set_temp_variable = { endpoints = lo }
		multiply_temp_variable = { endpoints = 1000 }
		add_to_temp_variable = { endpoints = hi }
		add_to_array = { debt_to_gdp_frames = endpoints }

	}


	add_to_variable = { TNO_economy_GUI_dirty = 1 }
}

generate_econ_rankings = {
	ZZZ = {
		clear_array = global.econ_countries
		every_country = {
			limit = { NOT = { has_country_flag = TNO_exclude_from_econ_ranking } }
			add_to_array = { global.econ_countries = THIS }
		}

		get_sorted_scored_countries = {
			scorer = GDP_rank_scorer
			array = global.econ_countries
		}

		# Set up ranking positions
		for_each_scope_loop = {
			array = global.econ_countries
			add_to_variable = { global.econ_countries_index = 1 }
			set_variable = { econ_ranking = global.econ_countries_index }
		}
		clear_variable = global.econ_countries_index
	}
}

econ_get_world_gdp = {
	ZZZ = {
		set_variable = { total_world_gdp = 0 }
		every_country = {
			limit = { NOT = { has_country_flag = TNO_exclude_from_econ_ranking } }
			add_to_variable = { ZZZ.total_world_gdp = GDP }
		}
	}
}

econ_reload_poverty_effects = {

	# curve used https://www.desmos.com/calculator/wiesidbpai (still needs to account for bonuses??)

	set_temp_variable = { poverty_effect_temp_cuber = poverty_rate }
	multiply_temp_variable = { poverty_effect_temp_cuber = 0.01 } #convert to a real number
	add_to_temp_variable = { poverty_effect_temp_cuber = 0.1 }
	set_temp_variable = { poverty_effect_temp_calc = poverty_effect_temp_cuber }

	multiply_temp_variable = { poverty_effect_temp_cuber = poverty_effect_temp_calc }

	multiply_temp_variable = { poverty_effect_temp_cuber = poverty_effect_temp_calc } # cube that shit!


	set_temp_variable = { poverty_effect_numerator = poverty_effect_temp_cuber }
	set_temp_variable = { poverty_effect_denominator = poverty_effect_temp_cuber }

	multiply_temp_variable = { poverty_effect_numerator = 0.5 }
	subtract_from_temp_variable = { poverty_effect_numerator = 1 }

	multiply_temp_variable = { poverty_effect_denominator = 20 }
	add_to_temp_variable = { poverty_effect_denominator = 1 }

	divide_temp_variable = { poverty_effect_numerator = poverty_effect_denominator }
	set_variable = { poverty_effect_multiplier = poverty_effect_numerator }
	add_to_variable = { poverty_effect_multiplier = 1 }

	set_variable = { poverty_rate_stability_effect = poverty_effect_multiplier }
	set_variable = { poverty_rate_war_support_effect = poverty_effect_multiplier }
	set_variable = { poverty_rate_conscription_effect = poverty_effect_multiplier }
	set_variable = { poverty_rate_monthly_pop_effect = poverty_effect_multiplier }
	set_variable = { poverty_rate_research_effect = poverty_effect_multiplier }
	set_variable = { poverty_consumer_goods_effect = poverty_effect_multiplier }
	set_variable = { poverty_academic_admin_socdev_effect = poverty_effect_multiplier }
	set_variable = { poverty_agriculture_industrial_socdev_effect = poverty_effect_multiplier }
	set_variable = { poverty_manpower_cost_effect = poverty_effect_multiplier }

	multiply_variable = { poverty_rate_stability_effect = -0.3 }
	multiply_variable = { poverty_rate_war_support_effect = -0.2 }
	multiply_variable = { poverty_rate_conscription_effect = 0.2 }
	multiply_variable = { poverty_rate_monthly_pop_effect = 0.8 }
	multiply_variable = { poverty_rate_research_effect = -0.2 }
	multiply_variable = { poverty_consumer_goods_effect = -0.5 }
	multiply_variable = { poverty_academic_admin_socdev_effect = -0.5 }
	multiply_variable = { poverty_agriculture_industrial_socdev_effect = -0.8 }
	multiply_variable = { poverty_manpower_cost_effect = -0.25 }

}

reload_gdpc = {
	set_variable = { gdpc = gdp }
	divide_variable = { gdpc = total_pop_m }
	set_variable = { gdpc_display = gdpc }
	multiply_variable = { gdpc_display = 1000 }

	# calculate root GDPC (used for lots of social spending things)

	set_variable = { sr_arg_number = gdpc_display } #use gdpc_display for higher accuracy
	square_root_babylonian = yes
	set_variable = { gdpc_root_display = sr_ret_number }
	set_variable = { gdpc_root = sr_ret_number }
	divide_variable = { gdpc_root = 1000 }
}

reload_every_state_gdps = {
	every_country = {
		every_owned_state = {
			generate_state_gdps = yes
		}
	}
}

start_fiscal_crisis_alert = {
	set_country_flag = Fiscal_Crisis_Active_Timer
	set_temp_variable = { alert_id = token:Alert_FiscalCrisis }
	add_TNO_alert_unless_exists = yes
	#log ="tried to spawn fiscal crisis alert with alert id [?alert_id]"
	if = {
		limit = { #trigger it with 1 month to spare if you are more than 25% above your debt limit somehow
			set_temp_variable = { temp_debt_limit = debt_ceiling }
			set_temp_variable = { temp_debt_level = debt_to_GDP_ratio }
			subtract_from_temp_variable = { temp_debt_level = temp_debt_limit }
			check_variable = { temp_debt_level > 0.25 }
		}
		set_variable = { Months_Till_Fiscal = 1 }
	}

	else = {
		set_variable = { Months_Till_Fiscal = 6 }
	}

	add_ideas = TNO_looming_fiscal_crisis
}

end_fiscal_crisis_alert = {
	clr_country_flag = Fiscal_Crisis_Active_Timer
	clear_variable = Months_Till_Fiscal
	set_temp_variable = { alert_id = token:Alert_FiscalCrisis }
	remove_TNO_alert = yes
	remove_ideas = TNO_looming_fiscal_crisis
}

start_fiscal_crisis = {
	clr_country_flag = Fiscal_Crisis_Active_Timer
	clear_variable = Months_Till_Fiscal
	country_event = { id = fiscal_crisis.0 }
	set_temp_variable = { alert_id = token:Alert_FiscalCrisis }
	remove_TNO_alert = yes
	remove_ideas = TNO_looming_fiscal_crisis
	#log ="[GetDateText]: [THIS.GetTag]: Got absoutely fucked by a Fiscal Crisis :vonsusen:"
}

calculate_poverty_dampener_effect = {
	set_variable = { poverty_dampener_effect = 200 }
	set_temp_variable = { temp_poverty_dampener_effect = -100 }
	multiply_temp_variable = { temp_poverty_dampener_effect = poverty_rate }
	subtract_from_temp_variable = { temp_poverty_dampener_effect = 100 }
	divide_variable = { poverty_dampener_effect = temp_poverty_dampener_effect }
	add_to_variable = { poverty_dampener_effect = 1.181 } #magic number
	clamp_variable = {
		var = poverty_dampener_effect
		min = 0
		max = 1
	}
}

poverty_monthly_calculation = {
	set_temp_variable = { temp_poverty_rate_monthly = poverty_monthly_change }
	add_to_temp_variable = { temp_poverty_rate_monthly = modifier@poverty_monthly_rate }

	calculate_poverty_dampener_effect = yes
	multiply_temp_variable = { temp_poverty_rate_monthly = poverty_dampener_effect }
	subtract_from_variable = { poverty_rate = temp_poverty_rate_monthly }

	if = {
		limit = { check_variable = { poverty_rate > 40 } }
		divide_variable = { poverty_monthly_change = 1.02 }
	} else = {
		divide_variable = { poverty_monthly_change = 1.06 }
	}

	clamp_variable = {
		var = poverty_rate
		min = 0
		max = 100
	}

	econ_reload_poverty_effects = yes
}

PU_trade_integration_calculation = {

	# net PUs (used for GDP)

	set_temp_variable = { net_pus_from_trade_last_month = 0 }

	for_each_loop = {
		array = TNO_net_pu_trade
		value = v

		add_to_temp_variable = { net_pus_from_trade_last_month = v }
	}

	divide_temp_variable = { net_pus_from_trade_last_month = TNO_net_pu_trade^num }
	set_variable = { net_PUs_trade = net_pus_from_trade_last_month }
	set_variable = { total_trade_value = net_PUs_trade }
	divide_variable = { total_trade_value = pu_to_gdp_ratio }

	set_variable = { total_trade_value_display = total_trade_value }
	if = {
		limit = {
			check_variable = { total_trade_value_display < 0 }
		}
		multiply_variable = { total_trade_value_display = -1 }
	}

	clear_array = TNO_net_pu_trade

	#PUs spent on imports (used for tariffs)

	set_temp_variable = { pus_to_imports_last_month = 0 }

	for_each_loop = {
		array = TNO_pu_trade_imports
		value = v

		add_to_temp_variable = { pus_to_imports_last_month = v }
	}
	divide_temp_variable = { pus_to_imports_last_month = TNO_pu_trade_imports^num }

	set_variable = { PUs_to_imports = pus_to_imports_last_month }
	set_variable = { imports_value = PUs_to_imports }
	divide_variable = { imports_value = pu_to_gdp_ratio }

	clear_array = TNO_pu_trade_imports

	set_temp_variable = { pus_to_exports_last_month = 0 }

	for_each_loop = {
		array = TNO_pu_trade_exports
		value = v

		add_to_temp_variable = { pus_to_exports_last_month = v }
	}

	clear_array = TNO_pu_trade_exports

	set_variable = { PUs_to_exports = pus_to_exports_last_month }
	set_variable = { exports_value = PUs_to_exports }
	divide_variable = { exports_value = pu_to_gdp_ratio }

	set_temp_variable = { PUs_to_CGs_last_month = 0 }
	for_each_loop = {
		array = TNO_cg_production
		value = v

		add_to_temp_variable = { PUs_to_CGs_last_month = v }
	}
	divide_temp_variable = { PUs_to_CGs_last_month = TNO_cg_production^num }
	set_variable = { PUs_to_CGs = PUs_to_CGs_last_month }
	set_variable = { CG_production_value = PUs_to_CGs }
	divide_variable = { CG_production_value = pu_to_gdp_ratio }

	clear_array = TNO_cg_production
}

economic_centralization_calculation = {

	if = {
		limit = { check_variable = { TNO_economy_type = token:Econ_Type_Capitalism } }
		calculate_market_centralization_effect = yes
	}
	else_if = {
		limit = { check_variable = { TNO_economy_type = token:Econ_Type_Corporatism } }
		calculate_corporatism_centralization_effect = yes
	}
	else = {
		calculate_planned_centralization_effect = yes
	}
}

calculate_market_centralization_effect = {

	set_variable = { command_factory_output_centralization_effect = economic_centralization }
	set_variable = { command_resource_extraction_centralization_effect = economic_centralization }
	set_variable = { market_production_efficiency_cap_centralization_effect = economic_centralization }

	set_variable = { market_consumer_goods_centralization_effect = 100 }
	set_variable = { market_gdp_growth_centralization_effect = .10 }
	set_variable = { command_production_efficiency_start_centralization_effect = economic_centralization }
	set_variable = { command_construction_speed_centralization_effect = economic_centralization }

	subtract_from_variable = { market_consumer_goods_centralization_effect = 100 }
	#subtract_from_variable = { market_gdp_growth_centralization_effect = 100 }
	subtract_from_variable = { command_production_efficiency_start_centralization_effect = 100 }
	subtract_from_variable = { command_construction_speed_centralization_effect = 100 }

	multiply_variable = { market_consumer_goods_centralization_effect = -1 }
	#multiply_variable = { market_gdp_growth_centralization_effect = -1 }
	multiply_variable = { command_production_efficiency_start_centralization_effect = -1 }
	multiply_variable = { command_construction_speed_centralization_effect = -1 }

	divide_variable = { command_factory_output_centralization_effect = 1000 } #max is 10% factory output bonus
	divide_variable = { command_resource_extraction_centralization_effect = 1000 } #max is 10% resource bonus
	divide_variable = { command_production_efficiency_start_centralization_effect = 1000 } #max is 10% starting eff

	divide_variable = { market_consumer_goods_centralization_effect = 1000 } #max is 20% more consumer goods produced (with the added bonus)
	#divide_variable = { market_gdp_growth_centralization_effect = 500 } #max is 20% more GDP growth
	divide_variable = { market_production_efficiency_cap_centralization_effect = 1000 } #max is 10% more efficiency
	divide_variable = { command_construction_speed_centralization_effect = 1000 } #max is 10%

	set_variable = { actual_market_consumer_goods_centralization_effect = market_consumer_goods_centralization_effect }
	set_variable = { actual_command_factory_output_centralization_effect = command_factory_output_centralization_effect }
	set_variable = { actual_command_construction_speed_centralization_effect = command_construction_speed_centralization_effect }

	add_to_variable = { market_consumer_goods_centralization_effect = .10 }
	add_to_variable = { command_factory_output_centralization_effect = .05 }
	add_to_variable = { command_construction_speed_centralization_effect = .05 }
}

calculate_planned_centralization_effect = {

	set_variable = { command_resource_extraction_centralization_effect = economic_centralization }
	set_variable = { market_production_efficiency_cap_centralization_effect = economic_centralization }
	set_variable = { command_construction_speed_centralization_effect = economic_centralization }

	set_variable = { command_factory_output_centralization_effect = economic_centralization }
	set_variable = { market_consumer_goods_centralization_effect = 100 }
	#set_variable = { market_gdp_growth_centralization_effect = economic_centralization }
	set_variable = { command_production_efficiency_start_centralization_effect = economic_centralization }

	subtract_from_variable = { market_consumer_goods_centralization_effect = 100 }
	#subtract_from_variable = { market_gdp_growth_centralization_effect = 100 }
	subtract_from_variable = { command_production_efficiency_start_centralization_effect = 100 }
	subtract_from_variable = { command_factory_output_centralization_effect = 100 }

	multiply_variable = { market_consumer_goods_centralization_effect = -1 }
	#multiply_variable = { market_gdp_growth_centralization_effect = -1 }
	multiply_variable = { command_production_efficiency_start_centralization_effect = -1 }
	multiply_variable = { command_factory_output_centralization_effect = -1 }

	divide_variable = { command_resource_extraction_centralization_effect = 1000 } #max is 10% resource bonus
	divide_variable = { market_production_efficiency_cap_centralization_effect = 1000 } #max is 15% starting eff
	divide_variable = { command_construction_speed_centralization_effect = 1000 } #max is 20% construction speed

	divide_variable = { market_consumer_goods_centralization_effect = 2000 } #max is 5% more consumer goods produced
	#divide_variable = { market_gdp_growth_centralization_effect = 500 } #max is 20% more GDP growth
	divide_variable = { command_production_efficiency_start_centralization_effect = 1000 } #max is 10% more efficiency
	divide_variable = { command_factory_output_centralization_effect = 1000 } #max is 20% factory output bonus

	set_variable = { actual_command_factory_output_centralization_effect = command_factory_output_centralization_effect }
	set_variable = { actual_command_construction_speed_centralization_effect = command_construction_speed_centralization_effect }

	add_to_variable = { command_construction_speed_centralization_effect = .1 }
	add_to_variable = { command_factory_output_centralization_effect = .1 }

	# do math here with centralization value to calculate centralization effects for planned
}
calculate_corporatism_centralization_effect = {

	set_variable = { command_factory_output_centralization_effect = economic_centralization }
	set_variable = { command_resource_extraction_centralization_effect = economic_centralization }
	set_variable = { market_production_efficiency_cap_centralization_effect = economic_centralization }
	set_variable = { command_construction_speed_centralization_effect = economic_centralization }

	set_variable = { market_consumer_goods_centralization_effect = 100 }
	set_variable = { market_gdp_growth_centralization_effect = economic_centralization }
	set_variable = { command_production_efficiency_start_centralization_effect = economic_centralization }

	subtract_from_variable = { market_consumer_goods_centralization_effect = 100 }
	subtract_from_variable = { market_gdp_growth_centralization_effect = 100 }
	subtract_from_variable = { command_production_efficiency_start_centralization_effect = 100 }

	multiply_variable = { market_consumer_goods_centralization_effect = -1 }
	multiply_variable = { market_gdp_growth_centralization_effect = -1 }
	multiply_variable = { command_production_efficiency_start_centralization_effect = -1 }

	divide_variable = { command_factory_output_centralization_effect = 666.666 } #max is 15% factory output bonus
	divide_variable = { command_resource_extraction_centralization_effect = 2000 } #max is 5% resource bonus
	divide_variable = { market_production_efficiency_cap_centralization_effect = 1000 } #max is 10% starting eff
	divide_variable = { command_construction_speed_centralization_effect = 1000 } #max is 10% construction speed

	divide_variable = { market_consumer_goods_centralization_effect = 1000 } #max is 20% more consumer goods produced
	divide_variable = { market_gdp_growth_centralization_effect = 1000 } #max is 15% more GDP growth
	divide_variable = { command_production_efficiency_start_centralization_effect = 666.666 } #max is 15% more efficiency

	set_variable = { actual_market_consumer_goods_centralization_effect = market_consumer_goods_centralization_effect }
	set_variable = { actual_market_gdp_growth_centralization_effect = market_gdp_growth_centralization_effect }

	add_to_variable = { market_consumer_goods_centralization_effect = .10 }
	add_to_variable = { market_gdp_growth_centralization_effect = .05 }

	# do math here with centralization value to calculate centralization effects for corporatism
}




econ_calculations_ON_MONTHLY = {

	if = {
		limit = { is_ai = yes }
		econ_calculations_ON_MONTHLY_AI = yes #update_ai_invest_reserves = yes
	}
	else = { econ_calculations_ON_MONTHLY_Human = yes }
}


econ_calculations_ON_MONTHLY_AI = {
	update_ai_invest_reserves = yes
	economic_centralization_calculation = yes
	poverty_monthly_calculation = yes
	PU_trade_integration_calculation = yes
	build_sphere_leader_array = yes

	update_econ_sliders = yes
	calculate_funding_effects = yes
	calculate_total_income = yes
	calculate_civilian_expenditures = yes
	calculate_military_expenditures = yes
	calculate_debt_expenditures = yes
	calculate_total_expenditures = yes
	validate_maximal_minimal_positions = yes
	calculate_total_budget = yes

	calculate_deficit_to_GDP_ratio = yes
	calculate_debt_to_GDP_ratio = yes
	calculate_deficit_to_debt_ratio = yes
	apply_deficit_effects_monthly = yes
	calculate_debt_ceiling = yes
	calculate_debt_effect_on_GDP_growth = yes

	update_credit_rating_calculation = yes
	apply_credit_rating_progress_change = yes
	
	#AI Central Bank
	if = {
		limit = { #If Inflation is above 3, reduce inflation
			check_variable = { clamped_inflation_rate > 4.3 } #Bare Minimum for Full Effectiveness
		}
		set_variable = { selected_central_bank_id = 1 }
	}
	else_if = {
		limit = { #If Inflation is below 2.7, the minimum it could be reduced to, boost GDP growth
			check_variable = { clamped_inflation_rate < 3.01 } #Bare minimum it could be reduced to by Inflation Reduction
		}
		set_variable = { selected_central_bank_id = 0 }
	}
	apply_central_bank_policy = yes

	force_update_dynamic_modifier = yes
	calculate_nominal_GDP_growth = yes

	set_temp_variable = { GDP_growth_no_rubberband_inflation_max = GDP_growth_real }
	add_to_temp_variable = { GDP_growth_no_rubberband_inflation_max = rubberband_inflation_rate }
	if = {
		limit = {
		check_variable = {
			var = GDP_growth_no_rubberband_inflation_max
			value = 10
			compare = less_than_or_equals
			}
		}
		set_variable = { rubberband_inflation_rate = 0 }
	}
	if = { limit = { check_variable = { GDP_growth_real > 10 } }
		GDP_rubberbanding_check = yes
	}
	calculate_total_inflation = yes
	calculate_inflation_effect = yes
	apply_inflation_effect_month = yes
	calculate_real_gdp_growth = yes

	resolve_spending = yes
	resolve_negative_cases = yes
	autopay_reserves = yes
	monthly_GDP_growth_state = yes

	fiscal_crisis_check = yes
	recalculate_GDP_and_PUs_on_demand = yes
	update_ai_slider_logic = yes

	# New and better - Fedacking > Lamounier
	calculate_building_variables = yes
	monthly_nuclear_production = yes
}

econ_calculations_ON_MONTHLY_Human = {
	economic_centralization_calculation = yes
	poverty_monthly_calculation = yes
	PU_trade_integration_calculation = yes
	build_sphere_leader_array = yes

	econ_update_graph_monthly = yes # this action is the ONLY action that is run every month for econstuff
	update_inflation_cycling = yes
	update_econ_sliders = yes
	calculate_funding_effects_display = yes #used by funding effects to avoid duplicating effort
	calculate_funding_effects = yes
	calculate_total_income = yes
	calculate_civilian_expenditures = yes
	calculate_military_expenditures = yes
	calculate_debt_expenditures = yes
	calculate_total_expenditures = yes
	validate_maximal_minimal_positions = yes
	calculate_total_budget = yes

	# TNO_update_policy_effectiveness = yes it is my sincere hope that this is no longer needed
	calculate_deficit_to_GDP_ratio = yes
	calculate_debt_to_GDP_ratio = yes
	calculate_deficit_to_debt_ratio = yes
	calculate_deficit_effects_display = yes
	apply_deficit_effects_monthly = yes
	calculate_debt_ceiling = yes
	calculate_debt_effect_on_GDP_growth = yes


	update_credit_rating_calculation = yes
	apply_credit_rating_progress_change = yes

	apply_central_bank_policy = yes

	if = {
		limit = { 845 = { OWNER = { check_variable = { base_conversion_rate = 5 } has_country_flag = tno_playable_country } } }
		random_list = { 67 = {} 33 = { USA_conversion_rate_loop = yes } }
	}

	force_update_dynamic_modifier = yes
	calculate_nominal_GDP_growth = yes
	set_temp_variable = { GDP_growth_no_rubberband_inflation_max = GDP_growth_real }
	add_to_temp_variable = { GDP_growth_no_rubberband_inflation_max = rubberband_inflation_rate }
	if = {
		limit = {
		check_variable = {
			var = GDP_growth_no_rubberband_inflation_max
			value = 10
			compare = less_than_or_equals
			}
		}
		set_variable = { rubberband_inflation_rate = 0 }
	}
	if = { limit = { check_variable = { GDP_growth_real > 10 } }
		GDP_rubberbanding_check = yes
	}
	calculate_total_inflation = yes
	calculate_inflation_effect = yes
	apply_inflation_effect_month = yes
	calculate_real_gdp_growth = yes
	store_old_values = yes

	resolve_spending = yes
	resolve_negative_cases = yes
	autopay_reserves = yes

	monthly_GDP_growth_state = yes

	fiscal_crisis_check = yes

	#TNO_update_policy_effectiveness = yes (done elsewhere thank god)

	recalculate_GDP_and_PUs_on_demand = yes

	# New and better - Fedacking > Lamounier
	calculate_building_variables = yes
	monthly_nuclear_production = yes
	monthly_social_data = yes
}

build_sphere_leader_array = {
	if = {
		limit = {
			has_country_flag = HAS_ECON_SPHERE
		}
		add_to_array = { GLOBAL.econ_sphere_leaders = THIS }
	}
}

fiscal_crisis_check = {
	if = {
		limit = { 
			is_antarctic_nation = no
		}
		if = { 
			limit = {
				NOT = {
					has_country_flag = ECON_ONGOING_FISCAL_CRISIS
				}
			}
			if = { # Check for Fiscal Crisis, skip all other blocks if this is true
			limit = {
				check_variable = { debt_to_GDP_ratio < debt_ceiling }
					NOT = {
						has_country_flag = Fiscal_Crisis_Active_Timer
					}
				}
			}
			else_if = {
				limit = {
					check_variable = { debt_to_GDP_ratio > debt_ceiling }
					NOT = {
						has_country_flag = Fiscal_Crisis_Active_Timer
					}
				}
				start_fiscal_crisis_alert = yes
			}
			else_if = {
				limit = {
					check_variable = { Months_Till_Fiscal = 0 }
				}
				start_fiscal_crisis = yes
			}
			else_if = {
				limit = {
					has_country_flag = Fiscal_Crisis_Active_Timer
					check_variable = { debt_to_GDP_ratio < debt_ceiling }
				}
				end_fiscal_crisis_alert = yes
			}
			else_if = {
				limit = {
					has_country_flag = Fiscal_Crisis_Active_Timer
				}
				add_to_variable = { Months_Till_Fiscal = -1 }
			}
		}
	}
}

ZZZ_econ_inflation_cycling_calculation = {
#alex's inflation cycling. Calculation cheap sine curve approximaton.
#x(k+1)=x(k)+(y(k)/n), y(k+1)=y(k)−(x(k+1))/n in mathematical terms, where k is the month.
#Exact curve is xk=(x0cos((2k−1)θ)+y0sin(2kθ))secθ, yk=(y0cos((2k+1)θ)−x0sin(2kθ))secθ where θ = arcsin(1/2n)
#cycles twice just under every 18 months.
#x0 = starting value of xcycling, currently 0
#y0 = starting value of ycycling, currently 0.125, affects amplitude of curve
#n = 3, affects how quickly it cycles.
	ZZZ = {
		set_temp_variable = { xplus1 = ycycling }
		divide_temp_variable = { xplus1 = 3 }
		add_to_variable = { xcycling = xplus1 }

		set_temp_variable = { yplus1 = xcycling }
		divide_temp_variable = { yplus1 = 3 }
		subtract_from_variable = { ycycling = yplus1 }

		set_variable = { global_inflation_cyling_effect = xcycling }
	}
}

update_inflation_cycling = {
	set_variable = { inflation_cycling_effect = ZZZ.global_inflation_cyling_effect }
	multiply_variable = { inflation_cycling_effect = last_month_real_GDP_growth }
	#divide_variable = { inflation_cycling_effect = 2 }


	randomize_temp_variable = {
		var = inflation_random_element
		distribution = binomial
		min = -1
		max = 1
	}

	multiply_temp_variable = { inflation_random_element = last_month_real_GDP_growth }
	divide_temp_variable = { inflation_random_element = 10 }

	set_variable = { inflation_cycling_random_element = inflation_random_element }
	add_to_variable = { inflation_cycling_effect = inflation_cycling_random_element }
}

monthly_GDP_growth_state = {

	# get monthly real gdp growth
	set_temp_variable = { temp_real_GDP_growth = GDP_growth_real }
	set_temp_variable = { total_state_GDP_added = 0 }
	set_variable = { prev_total_state_GDP = totalstateGDP }

	THIS = {
		every_controlled_state = {
			CONTROLLER = {
				set_temp_variable = { temp_real_GDP_growth = GDP_growth_real }
			}
			add_to_temp_variable = { temp_real_gdp_growth = modifier@state_GDP_growth_modifier }
			#log = "[?temp_real_GDP_growth] is temp real gdp growth"
			set_temp_variable = { temp_infra_damaged = damaged_building_level@infrastructure }
			divide_temp_variable = { temp_infra_damaged = infrastructure_level } # spits out % of infrastructure damaged - should be 0
			#log = "[?temp_infra_damaged] is temp % of infra damaged"
			set_temp_variable = { temp_infra_damaged_factor_effect = temp_infra_damaged }
			divide_temp_variable = { temp_infra_damaged_factor_effect = 2 }

			set_temp_variable = { temp_state_GDP_growth_factor = 1 }
			add_to_temp_variable = { temp_state_GDP_growth_factor = modifier@state_GDP_growth_factor_modifier }
			subtract_from_temp_variable = { temp_state_GDP_growth_factor = temp_infra_damaged_factor_effect }


			multiply_temp_variable = { temp_real_GDP_growth = temp_state_GDP_growth_factor }
			#log = "[?temp_real_GDP_growth] is temp real GDP growth after applying infra mult and modifier"

			set_temp_variable = { temp_infra_damaged_effect = temp_infra_damaged }
			multiply_temp_variable = { temp_infra_damaged_effect = -5 }

			add_to_temp_variable = { temp_real_GDP_growth = temp_infra_damaged_effect }
			#log = "[?temp_real_GDP_growth] is temp real GDP growth after applying infra flat"

			# UNIFICATION ENDS HERE

			divide_temp_variable = { temp_real_GDP_growth = 12 }

			set_temp_variable = { temp_state_value_added = state_value }
			multiply_temp_variable = { temp_state_value_added = temp_real_GDP_growth }
			divide_temp_variable = { temp_state_value_added = 100 }

			#log = "[?temp_state_value_added] was added to [THIS.GETNAME] state value"

			add_to_variable = { state_value = temp_state_value_added }

			add_to_temp_variable = { total_state_GDP_added = temp_state_value_added }

			set_variable = { state_population_minimum_GDP = state_population_k }
			divide_variable = { state_population_minimum_GDP = 40 } # this should have the effect of making minimum GDPc $25 for populations with an appropriate size hahaha

			clamp_variable = {
				var = state_value
				min = state_population_minimum_GDP
			}

			clamp_variable = {
				var = state_value
				min = 0.001
			}
		}
	}
	# Used for showing the previous months growth
	set_variable = { GDP_growth_real_monthly_from_state = total_state_GDP_added }
	divide_variable = { GDP_growth_real_monthly_from_state = prev_total_state_GDP }
	divide_variable = { GDP_growth_real_monthly_from_state = 10 }
}

store_old_values = {
	set_variable = { last_month_real_GDP_growth = GDP_growth_real }
	set_variable = { last_month_nominal_GDP_growth = GDP_growth_nominal }
	set_variable = { last_month_clamped_inflation_rate = clamped_inflation_rate }
}

calculate_contribution_as_sphere_leader = {
	set_temp_variable = { temp_GDP_from_sphere_underlings = 0 }
	for_each_scope_loop = {
		array = econ_sphere_members

		set_temp_variable = { temp_GDP_to_sphere_leader = modifier@GDP_to_sphere_leader_modifier }
		multiply_variable = { temp_GDP_to_sphere_leader = totalstateGDP }

		subtract_from_variable = { totalstateGDP = temp_GDP_to_sphere_leader }
		set_variable = { GDP_to_sphere_leader = temp_GDP_to_sphere_leader }

		add_to_temp_variable = { PREV.temp_GDP_from_sphere_underlings = GDP_to_sphere_leader }
	}

	add_to_variable = { totalstateGDP = temp_GDP_from_sphere_underlings }
	set_variable = { totalGDP_from_underlings = temp_GDP_from_sphere_underlings } # for display purposes
}

calculate_total_sphere_trade_value = {
	set_temp_variable = { temp_total_trade_gross_value = 0 }
	for_each_scope_loop = {
		array = econ_sphere_members

		set_temp_variable = { nation_trade_gross_value = 0 }
		add_to_temp_variable = { nation_trade_gross_value = PU_imports_m }
		add_to_temp_variable = { nation_trade_gross_value = PU_exports_m }
		divide_temp_variable = { nation_trade_gross_value = pu_to_gdp_ratio }

		add_to_temp_variable = { PREV.temp_total_trade_gross_value = nation_trade_gross_value }
	}
	set_temp_variable = { nation_trade_gross_value = 0 }
	add_to_temp_variable = { nation_trade_gross_value = PU_imports_m }
	add_to_temp_variable = { nation_trade_gross_value = PU_exports_m }
	divide_temp_variable = { nation_trade_gross_value = pu_to_gdp_ratio }
	add_to_temp_variable = { temp_total_trade_gross_value = nation_trade_gross_value }


	set_variable = { total_trade_gross_value = temp_total_trade_gross_value }
	clamp_variable = { var = total_trade_gross_value min = 0 }
}

generate_country_gdp = {
	set_variable = { GDP = totalstateGDP }

	#add_to_variable = { GDP = total_trade_value } # This was causing a lot of funni

	set_temp_variable = { GDP_minimum = total_pop_m }
	multiply_temp_variable = { GDP_minimum = 0.025 }
	clamp_variable = { var = GDP min = GDP_minimum }
}





recalculate_GDP_and_PUs_on_demand = {
	hidden_effect = {
		calculate_total_state_gdp = yes
		calculate_sphere_effects = yes
		update_prod_units_amnt = yes
		update_prod_units_display = yes
		generate_country_gdp = yes
		force_update_dynamic_modifier = yes

		update_economy_tab = yes
	}

}

recalculate_PUs_on_demand = {
	hidden_effect = {
		update_prod_units_amnt = yes
		update_prod_units_display = yes
		generate_country_gdp = yes
		force_update_dynamic_modifier = yes
	}
}

calculate_sphere_effects = {
	if = {
		limit = {
			has_country_flag = HAS_ECON_SPHERE
		} # this effect is run for sphere leaders only
		calculate_contribution_as_sphere_leader = yes
	}
}


apply_credit_rating_progress_change = {

	add_to_variable = { credit_rating_progress = credit_rating_change_aggregate }

	if = {
		limit = { #Optimisation to skip the further steps since the vast majority of the time, you will be within 0-100
			AND = {
				check_variable = { credit_rating_progress > -0.01 }
				check_variable = { credit_rating_progress < 100.01 }
			}
		}
	}
	else_if = {
		limit = {
			check_variable = { credit_rating_progress < 0 }
		}

		econ_lower_credit_rating = yes
	}
	else_if = {
		limit = {
			check_variable = { credit_rating_progress > 100 }
		}
		econ_raise_credit_rating = yes


	}
	#can't be arsed to finish doing the socdev indices tbh

	clamp_variable = {
		var = credit_rating?1
		min = credit_rating_min?1
		max = credit_rating_max?10
	}

}

add_credit_rating_progress = {

	add_to_variable = { credit_rating_progress = credit_rating_progress_temp }

	if = {
		limit = {
			check_variable = { credit_rating_progress_temp < 0 }
		}
		multiply_temp_variable = { credit_rating_progress_temp = -1 }
		custom_effect_tooltip = econ_credit_progress_decrease_tt
	}
	else = {
		custom_effect_tooltip = econ_credit_progress_increase_tt
	}

	if = {
		limit = {
			check_variable = { credit_rating_progress < 0 }
		}

		econ_lower_credit_rating = yes
	}
	else_if = {
		limit = {
			check_variable = { credit_rating_progress > 100 }
		}
		econ_raise_credit_rating = yes

	}
	#can't be arsed to finish doing the socdev indices tbh

	clamp_variable = {
		var = credit_rating
		min = credit_rating_min?1
		max = credit_rating_max?10
	}

}

update_credit_rating_calculation = {
	if = {
		limit = {
			OR = {
				check_variable = { deficit_to_GDP_ratio > GDP_growth_inverted }
				check_variable = { deficit_to_GDP_ratio = 0 }
			}
		}
		set_variable = { credit_rating_change_aggregate = 2 }
	}
	else = {
		set_variable = { credit_rating_change_aggregate = -2 }
	}
	if = {
		limit = {
			set_temp_variable = { temp_debt_ceiling_adjusted = debt_ceiling }
			multiply_temp_variable = { temp_debt_ceiling_adjusted = .75 }
			check_variable = { debt_to_GDP_ratio > temp_debt_ceiling_adjusted }
		}
		add_to_variable = { credit_rating_change_aggregate = -2 }
		if = {
			limit = {
				NOT = {
					has_variable = debt_ceiling
				}
			}
			log = "[THIS.GETNAME] doesn't have debt ceiling defined"
		}
	}
	else = {
		add_to_variable = { credit_rating_change_aggregate = 2 }
	}
	if = {
		limit = {
			has_war = yes
		}
		add_to_variable = { credit_rating_change_aggregate = -1 }
	}
	else = {
		add_to_variable = { credit_rating_change_aggregate = 1 }
	}

	add_to_variable = { credit_rating_change_aggregate = modifier@monthly_credit_rating_progress }

	# socdev? dunno
}

apply_credit_rating_effects = {
	if = {
		limit = { has_variable = credit_rating } # doing this to skip over some startup errors in the log
		clamp_variable = {
			var = credit_rating
			min = credit_rating_min
			max = credit_rating_max
		}
	}
	if = {
		limit = {
			NOT = {
				check_variable = { credit_rating_effect_applied = credit_rating }
			}
		}
		if = {
			limit = {
				check_variable = { credit_rating = 0 }
			}
			log = "credit rating was 0. This should not occur."
		}
		else_if = {
			limit = {
				check_variable = { credit_rating = 1 }
			}
			set_variable = { debt_ceiling_from_credit_rating = 1 }
			set_variable = { interest_rate_from_credit_rating = 20 }
			set_variable = { credit_rating_interest_rates_from_debt = 1 }
			set_variable = { stability_from_credit_rating = -0.2 }
			set_variable = { credit_rating_effect_on_debt_GDP_effect = -0.5 }

			set_variable = { credit_rating_effect_applied = 1 }
		}
		else_if = {
			limit = {
				check_variable = { credit_rating = 2 }
			}
			set_variable = { debt_ceiling_from_credit_rating = 1.1 }
			set_variable = { interest_rate_from_credit_rating = 12.4 }
			set_variable = { credit_rating_interest_rates_from_debt = 0.5 }
			set_variable = { stability_from_credit_rating = -0.1 }
			set_variable = { credit_rating_effect_on_debt_GDP_effect = -0.4 }

			set_variable = { credit_rating_effect_applied = 2 }
		}
		else_if = {
			limit = {
				check_variable = { credit_rating = 3 }
			}
			set_variable = { debt_ceiling_from_credit_rating = 1.2 }
			set_variable = { interest_rate_from_credit_rating = 9.8 }
			set_variable = { credit_rating_interest_rates_from_debt = 0.35 }
			set_variable = { stability_from_credit_rating = -0.075 }
			set_variable = { credit_rating_effect_on_debt_GDP_effect = -0.3 }


			set_variable = { credit_rating_effect_applied = 3 }
		}
		else_if = {
			limit = {
				check_variable = { credit_rating = 4 }
			}
			set_variable = { debt_ceiling_from_credit_rating = 1.3 }
			set_variable = { interest_rate_from_credit_rating = 7.6 }
			set_variable = { credit_rating_interest_rates_from_debt = 0.2 }
			set_variable = { stability_from_credit_rating = -0.05 }
			set_variable = { credit_rating_effect_on_debt_GDP_effect = -0.2 }


			set_variable = { credit_rating_effect_applied = 4 }
		}
		else_if = {
			limit = {
				check_variable = { credit_rating = 5 }
			}
			set_variable = { debt_ceiling_from_credit_rating = 1.4 }
			set_variable = { interest_rate_from_credit_rating = 5.8 }
			set_variable = { credit_rating_interest_rates_from_debt = 0 }
			set_variable = { stability_from_credit_rating = 0 }
			set_variable = { credit_rating_effect_on_debt_GDP_effect = -0.1 }


			set_variable = { credit_rating_effect_applied = 5 }
		}
		else_if = {
			limit = {
				check_variable = { credit_rating = 6 }
			}
			set_variable = { debt_ceiling_from_credit_rating = 1.5 }
			set_variable = { interest_rate_from_credit_rating = 4.2 }
			set_variable = { credit_rating_interest_rates_from_debt = -0.2 }
			set_variable = { stability_from_credit_rating = 0.05 }
			set_variable = { credit_rating_effect_on_debt_GDP_effect = 0 }


			set_variable = { credit_rating_effect_applied = 6 }
		}
		else_if = {
			limit = {
				check_variable = { credit_rating = 7 }
			}
			set_variable = { debt_ceiling_from_credit_rating = 1.75 }
			set_variable = { interest_rate_from_credit_rating = 3.0 }
			set_variable = { credit_rating_interest_rates_from_debt = -0.4 }
			set_variable = { stability_from_credit_rating = 0.05 }
			set_variable = { credit_rating_effect_on_debt_GDP_effect = 0.05 }


			set_variable = { credit_rating_effect_applied = 7 }
		}
		else_if = {
			limit = {
				check_variable = { credit_rating = 8 }
			}
			set_variable = { debt_ceiling_from_credit_rating = 2 }
			set_variable = { interest_rate_from_credit_rating = 2.2 }
			set_variable = { credit_rating_interest_rates_from_debt = -0.6 }
			set_variable = { stability_from_credit_rating = 0.05 }
			set_variable = { credit_rating_effect_on_debt_GDP_effect = 0.1 }


			set_variable = { credit_rating_effect_applied = 8 }
		}
		else_if = {
			limit = {
				check_variable = { credit_rating = 9 }
			}
			set_variable = { debt_ceiling_from_credit_rating = 2.5 }
			set_variable = { interest_rate_from_credit_rating = 1.7 }
			set_variable = { credit_rating_interest_rates_from_debt = -0.8 }
			set_variable = { stability_from_credit_rating = 0.05 }
			set_variable = { credit_rating_effect_on_debt_GDP_effect = 0.15 }


			set_variable = { credit_rating_effect_applied = 9 }
		}
		else_if = {
			limit = {
				check_variable = { credit_rating = 10 }
			}
			set_variable = { debt_ceiling_from_credit_rating = 500 }
			set_variable = { interest_rate_from_credit_rating = 1.5 }
			set_variable = { credit_rating_interest_rates_from_debt = -0.9 }
			set_variable = { stability_from_credit_rating = 0.05 }
			set_variable = { credit_rating_effect_on_debt_GDP_effect = 0.25 }


			set_variable = { credit_rating_effect_applied = 10 }
		}
		else_if = {
			limit = {
				check_variable = { credit_rating = 11 }
			}
			set_variable = { debt_ceiling_from_credit_rating = 0 }
			set_variable = { interest_rate_from_credit_rating = 0 }
			set_variable = { credit_rating_interest_rates_from_debt = 0 }
			set_variable = { stability_from_credit_rating = 0 }
			set_variable = { credit_rating_effect_on_debt_GDP_effect = 0 }


			set_variable = { credit_rating_effect_applied = 11 }
		}
	}
}

apply_central_bank_policy = {
	add_dynamic_modifier = { modifier = Central_Bank_Dynamic_Modifier }

	# resets the growth
	set_variable = { central_bank_gdp_growth_modifier = 0 }

	#Policy 0
	if = { # add to growth counter
		limit = { check_variable = { selected_central_bank_id = 0 } }
		add_to_variable = { central_bank_effectiveness_0 = 0.2 }
	}
	else = { # subtracts to inflation counter
		subtract_from_variable = { central_bank_effectiveness_0 = 0.2 }
	}
	clamp_variable = { var = central_bank_effectiveness_0 min = 0 max = 1 }

	#Policy 1
	if = { # add to inflation counter
		limit = { check_variable = { selected_central_bank_id = 1 } }
		add_to_variable = { central_bank_effectiveness_1 = 0.1 }
	}
	else = { # subtracts to inflation counter
		subtract_from_variable = { central_bank_effectiveness_1 = 0.1 }
	}
	clamp_variable = { var = central_bank_effectiveness_1 min = 0 max = 1 }

	#Policy 2
	if = { # add to poverty reduction and gdp reduction counter
		limit = { check_variable = { selected_central_bank_id = 2 } }
		add_to_variable = { central_bank_effectiveness_2 = 0.1 }
	}
	else = { # subtracts to poverty reduction and gdp reduction counter
		subtract_from_variable = { central_bank_effectiveness_2 = 0.1 }
	}
	clamp_variable = { var = central_bank_effectiveness_2 min = 0 max = 1 }

	#Policy 3
	if = { # add to poverty reduction and gdp reduction counter
		limit = { check_variable = { selected_central_bank_id = 3 } }
		add_to_variable = { central_bank_effectiveness_3 = 0.1 }
	}
	else = { # subtracts to poverty reduction and gdp reduction counter
		subtract_from_variable = { central_bank_effectiveness_3 = 0.1 }
	}
	clamp_variable = { var = central_bank_effectiveness_3 min = 0 max = 1 }

	set_variable = { central_bank_growth = central_bank_effectiveness_0 }
	set_variable = { central_bank_growth_display = central_bank_growth }
	divide_variable = { central_bank_growth_display = 100 }
	add_to_variable = { central_bank_gdp_growth_modifier = central_bank_growth }

	# resets the inflation
	add_to_variable = { base_inflation_rate = suppressed_inflation }

	# calculates and applies effect again
	set_variable = { suppressed_inflation = base_inflation_rate }
	multiply_variable = { suppressed_inflation = central_bank_effectiveness_1 }
	multiply_variable = { suppressed_inflation = 0.2 }
	clamp_variable = { var = suppressed_inflation min = 0 max = 3 }
	subtract_from_variable = { base_inflation_rate = suppressed_inflation }

	#policy 2 calculations
	set_variable = { central_bank_poverty_monthly_rate = central_bank_effectiveness_2 }
	divide_variable = { central_bank_poverty_monthly_rate = 10 }

	set_variable = { central_bank_effectiveness_2_gdp_cost = central_bank_effectiveness_2 }
	divide_variable = { central_bank_effectiveness_2_gdp_cost = 2 }
	set_variable = { central_bank_effectiveness_2_gdp_cost_display = central_bank_effectiveness_2_gdp_cost }
	divide_variable = { central_bank_effectiveness_2_gdp_cost_display = 10 }
	subtract_from_variable = { central_bank_gdp_growth_modifier = central_bank_effectiveness_2_gdp_cost }

	#policy 3
	set_variable = { central_bank_power = central_bank_effectiveness_3 }
	multiply_variable = { central_bank_power = 0.15 }
	set_variable = { central_bank_power_display = central_bank_power }
	multiply_variable = { central_bank_power = resource@power }
	round_variable = central_bank_power

	set_variable = { central_bank_effectiveness_3_gdp_cost = central_bank_effectiveness_3 }
	divide_variable = { central_bank_effectiveness_3_gdp_cost = 2 }
	set_variable = { central_bank_effectiveness_3_gdp_cost_display = central_bank_effectiveness_3_gdp_cost }
	#divide_variable = { central_bank_effectiveness_3_gdp_cost_display = 10 }
	subtract_from_variable = { central_bank_gdp_growth_modifier = central_bank_effectiveness_3_gdp_cost }
}


calculate_debt_ceiling = {
	set_variable = { debt_ceiling = base_debt_ceiling }
	add_to_variable = { debt_ceiling = debt_ceiling_from_credit_rating }
	add_to_variable = { debt_ceiling = modifier@debt_to_GDP_ceiling_modifier }
	clamp_variable = {
		var = debt_ceiling
		min = 0
	}
}

round_this_power = {
	#temp variable 'counting_var' must be set to 1 before this is called

	set_temp_variable = { new_power = this_power }

	set_temp_variable = { check = this_power }
	subtract_from_temp_variable = { check = counting_var }
	if = {
		limit = {
			check_variable = { check > 0.5 }
			check_variable = { check < 1 }
		}
		add_to_temp_variable = { new_power = 1 }
	}
	else_if = {
		limit = {
			check_variable = { counting_var < 100 } #failsafe to avoud a really long loop
			check_variable = { check > 1 }
		}
		add_to_temp_variable = { counting_var = 1 }
		round_this_power = yes
	}
}

grid_power_production_tt_effect = {
	#temp variable 'current_state' must be set to 0 before this is called
	#this never actually gets called, it makes the tooltip for the grid power meter in the top bar
	if = {
		limit = {
			check_variable = { current_state = 0 }
		}
		set_temp_variable = { total_power = 0 }
	}
	if = {
		limit = {
			check_variable = { current_state < num_owned_states }
		}

		var:owned_states^current_state = {
			if = {
				limit = {
					check_variable = { resource@power > 0 }
				}
				set_temp_variable = { this_power = 0 }
				add_to_temp_variable = { this_power = resource@power }

				set_temp_variable = { mod = PREV.modifier@local_resources_factor }
				add_to_temp_variable = { mod = 1 }

				multiply_temp_variable = { this_power = mod }
				#round_temp_variable = this_power #this doesn't work for some reason
				#modulo_temp_variable = { this_power = 1 } #neither does this

				set_temp_variable = { counting_var = 1 }
				round_this_power = yes

				custom_effect_tooltip = economy_topbar_power_from_a_state
			}
		}


		add_to_temp_variable = { current_state = 1 }
		grid_power_production_tt_effect = yes
	}
	else = {
		custom_effect_tooltip = economy_topbar_power_changed_by_modifier
	}
}

#####################################################################################
#################            AI ECON STRATEGY             ###########################
#####################################################################################

update_ai_invest_reserves = {
	if = {
		limit = {
			check_variable = {
				var = money_reserves
				value = national_debt
				compare = less_than_or_equals
			}
		}
		subtract_from_variable = { national_debt = money_reserves }
		set_variable = { money_reserves = 0 }
		set_variable = { reserves_management_amount = 0 }
		else = {
			subtract_from_variable = { money_reserves = national_debt }
			set_variable = { national_debt = 0 }
			set_variable = { reserves_management_amount = 0 }
		}
	}


	divide_variable = { money_reserves = 20 }
	add_to_variable = { money_reserves = GDP }
	multiply_variable = { money_reserves = 10 }
	divide_variable = { money_reserves = GDP }

	every_owned_state = {
		multiply_variable = { state_value = PREV.money_reserves }
		divide_variable = { state_value = 10 }
	}

	set_variable = { money_reserves = 0 }
}

update_ai_slider_logic = {
	#Pre-Base Scripting
	set_temp_variable = { debt_calculator_preferred = debt_ceiling }
	divide_temp_variable = { debt_calculator_preferred = 2 }
	
	##Base
	set_variable = { econ_admin_expenditures_slider_pct = econ_admin_expenditures_maximal_pct } #KD's Notes - This actually gives you more money, keep it high
	set_variable = { econ_research_expenditures_slider_pct = econ_research_expenditures_maximal_pct } #KD's Notes - For the regular AI to stay competitive

	##Social
	if = { #KD's Notes - Never actually happens
		limit = {
			AND = {
				AND = {
					check_variable = { debt_to_GDP_ratio < debt_calculator_preferred }
					OR = {
						check_variable = { deficit_to_GDP_ratio < 10 }
						check_variable = { deficit_to_GDP_ratio < GDP_growth_real }
					}
				}
				NOT = { has_country_leader = { character = GER_martin_bormann ruling_only = yes  } }
			}
			NOT = { has_country_flag = TNO_AI_Defined_Slider } #KD's Notes - For anyone who would like to be do their own thing
		}
		set_variable = { econ_social_expenditures_slider_pct = econ_social_expenditures_maximal_pct }
	}
	else_if = {
		limit = {
			NOT = { has_country_flag = TNO_AI_Defined_Slider } #KD's Notes
		}
		set_variable = { econ_social_expenditures_slider_pct = econ_social_expenditures_minimal_pct } #KD's Notes - I wish people could cut pensions to 10% without reprecussions IRL too
	}
	#Education Niche
	if = {
		limit = { #Because these types of governments regularly don't invest in modern education techniques
			NOT = { has_government = ultranationalism }
			NOT = { has_country_leader_ideology = despotism_islamic_nationalism_subtype }
			NOT = { has_country_leader_ideology = despotism_theocracy_subtype }
			NOT = { has_country_flag = TNO_AI_Defined_Slider }
		}
		set_variable = { econ_social_education_slider_pct = econ_social_expenditures_maximal_pct } #KD's Notes - To Bypass the Auto-Change
	}

	##Larp Research
	if = {
		limit = { #Because these types of regimes won't invent modern tanks
			OR = {
				check_variable = { TNO_economy_subtype = token:Econ_Subtype_Banditry }
				check_variable = { TNO_economy_subtype = token:Econ_Subtype_Subsistence_Economy }
				has_country_leader_ideology = despotism_aristocratic_conservatism_subtype
				has_country_leader_ideology = despotism_absolute_monarchy_subtype
				AND = {
					has_government = ultranationalism
					NOT = { tag = OMS }
				}
			}
			NOT = { has_country_flag = TNO_AI_Defined_Slider }
		}
		set_variable = { econ_research_expenditures_slider_pct = econ_research_expenditures_minimal_pct }
	}

	##Mighty Army Code
	if = {
		limit = {
			OR = {
				has_war = yes
				has_country_leader_ideology = despotism_military_junta_subtype
				has_country_leader_ideology = despotism_warlordism_subtype
				has_country_leader_ideology = communist_stratocratic_communism_subtype
				has_government = ultranationalism
				check_variable = { TNO_economy_subtype = token:Econ_Subtype_War_Communism }
				check_variable = { TNO_economy_subtype = token:Econ_Subtype_Military_Directed }
			}
			NOT = { has_country_flag = TNO_AI_Defined_Slider }
			AND = {
				OR = {
					check_variable = { deficit_to_GDP_ratio < 15 }
					check_variable = { deficit_to_GDP_ratio < GDP_growth_real }
				}
				check_variable = { debt_to_GDP_ratio < 0.75 }
			}
		}
		set_variable = { econ_army_expenditures_slider_pct = econ_army_expenditures_maximal_pct }
	}
	else_if = { #Half-ass things if you're desperate
		limit = {
			OR = {
				has_war = yes
				has_country_leader_ideology = despotism_military_junta_subtype
				has_country_leader_ideology = despotism_warlordism_subtype
				has_country_leader_ideology = communist_stratocratic_communism_subtype
				has_government = ultranationalism
				check_variable = { TNO_economy_subtype = token:Econ_Subtype_War_Communism }
				check_variable = { TNO_economy_subtype = token:Econ_Subtype_Military_Directed }
			}
			NOT = { has_country_flag = TNO_AI_Defined_Slider }
		}
		set_variable = { econ_army_expenditures_slider_pct = 50 }
	}
	else_if ={
		limit = { #Because these tags need their armies
			OR = {
				tag = GER
				tag = ITA
				tag = USA
				tag = JAP
				tag = IBR
				tag = ENG
				tag = YUN
				tag = ENG
				tag = FRS
				tag = TUR
				has_country_flag = is_russian_nation
				tag = AZH
				tag = IND
				tag = CHI
				tag = COL
				tag = VIN
				tag = CLC
			}
			NOT = { has_country_flag = TNO_AI_Defined_Slider }
			AND = {
				OR = {
					check_variable = { deficit_to_GDP_ratio < 15 }
					check_variable = { deficit_to_GDP_ratio < GDP_growth_real }
				}
				check_variable = { debt_to_GDP_ratio < 0.75 }
			}
		}
		set_variable = { econ_army_expenditures_slider_pct = econ_army_expenditures_minimal_pct }
		set_variable = { econ_army_procurement_slider_pct = econ_army_expenditures_maximal_pct }
		set_variable = { econ_army_r_d_slider_pct = econ_army_expenditures_maximal_pct }
	}
	else_if ={
		limit = { #Because these tags need their armies
			OR = {
				tag = GER
				tag = ITA
				tag = USA
				tag = JAP
				tag = IBR
				tag = ENG
				tag = YUN
				tag = ENG
				tag = FRS
				tag = TUR
				has_country_flag = is_russian_nation
				tag = AZH
				tag = IND
				tag = CHI
				tag = COL
				tag = VIN
				tag = CLC
			}
			NOT = { has_country_flag = TNO_AI_Defined_Slider }
		}
		set_variable = { econ_army_expenditures_slider_pct = econ_army_expenditures_minimal_pct }
		set_variable = { econ_army_procurement_slider_pct = 50 } #Fix in case of too much spending
		set_variable = { econ_army_r_d_slider_pct = econ_army_expenditures_maximal_pct }
	}
	else_if = {
		limit = { NOT = { has_country_flag = TNO_AI_Defined_Slider } }
		set_variable = { econ_army_expenditures_slider_pct = econ_army_expenditures_minimal_pct }
	}
	#Nukes
	if = {
		limit = {
			OR = {
				tag = BUR
			}
			NOT = { has_country_flag = TNO_AI_Defined_Slider }
		}
		set_variable = { econ_nuclear_expenditures_slider_pct = econ_nuclear_expenditures_minimal_pct }
	}
	#Navy
	if = { #KD's Notes - Smart Move? No. But it is what they would realistically do
		limit = {
			OR = {
				tag = ENG
				tag = USA
				tag = FRS
				tag = AST
				tag = JAP
			}
			NOT = { has_country_flag = TNO_AI_Defined_Slider }
		}
		set_variable = { econ_naval_expenditures_slider_pct = econ_naval_expenditures_maximal_pct }
	}
	else_if = {
		limit = { NOT = { has_country_flag = TNO_AI_Defined_Slider } }
		set_variable = { econ_naval_expenditures_slider_pct = econ_naval_expenditures_minimal_pct }
	}

	if = { #Troubleshooting the Potential Ramification of Larp Economics...With more Larp Economics
		limit = {
			OR = {
				has_government = ultranationalism
				has_country_leader_ideology = despotism_islamic_nationalism_subtype
				has_country_leader_ideology = despotism_theocracy_subtype
				has_country_leader_ideology = despotism_warlordism_subtype
			}
			NOT = { has_country_flag = TNO_AI_Defined_Slider }
		}
		set_variable = { econ_social_expenditures_slider_pct = econ_social_expenditures_minimal_pct }
		set_variable = { econ_social_pensions_slider_pct = econ_social_expenditures_maximal_pct } #KD's Notes - What else do you expect?
	}

	if = { #KD's Notes - If you get to this you are fucked regardless
		limit = {
			AND = {
				OR = {
					check_variable = {
						var = debt_to_GDP_ratio
						value = debt_ceiling
						compare = greater_than_or_equals
					}
					AND = {
						check_variable = { deficit_to_GDP_ratio > 15 }
						check_variable = { debt_to_GDP_ratio > debt_calculator_preferred }
						check_variable = { deficit_to_GDP_ratio > GDP_growth_real }
					}
				}
				NOT = { has_country_flag = TNO_AI_Defined_Slider }
			}
		}
		set_variable = { econ_social_expenditures_slider_pct = econ_social_expenditures_minimal_pct } #Should prevent actually needing to take Austerity Measures
		set_variable = { econ_army_expenditures_slider_pct = econ_army_expenditures_minimal_pct }
	}

	#Finalization
	update_army_subsliders = yes
	update_admin_subsliders = yes
	update_research_subsliders = yes

	update_economy_tab = yes
}