from argparse import ArgumentParser
from datetime import datetime, timedelta
from typing import List, Tuple


def main():
    # The format of the data is the clock of the pc and an int representing how many days have passed ingame
    dates: List[Tuple[datetime, datetime]] = []
    starting_date = datetime(year=1962, month=1, day=1)
    # Grabs the last game.log
    with open("../../../logs/game.log", encoding="utf8") as file:
        for line in file:
            # We skip all the lines that were not generated by a log
            if "effectbase.cpp" not in line:
                continue

            # We try to avoid crashes in the middle of the program execution due to bad parsing
            try:
                blocks = line.split("]")

                # We parse the date, because we don't have a day we asume 1900-01-01
                new_time = datetime.strptime(blocks[0].strip("["), "%H:%M:%S")

                date_str = ":".join(blocks[2].split(":")[1:3]).strip()
                new_date = datetime.strptime(date_str, "%H:%M, %d %B, %Y")
                dates.append((new_time, new_date))
            except Exception as e:
                pass
                # print(e)

    # We save a copy of the data
    with open("output/speed_analyzer.out", "w+") as file:
        for point in dates:
            clock = point[0].strftime("%H:%M:%S")
            date = point[1].strftime("%H:%M, %d %B, %Y")
            file.write(f"[{clock}][effectbase.cpp]:{date}\n")

    # This data is the datetime of the in game clock and how many seconds have passed
    data: List[Tuple[datetime, int]] = []
    date_index = 0  # This is an index of how much
    month_index = 0  # This is an index of how much
    starting_time = dates[0][0]

    # Array of datetime that we can use to compare to
    year_months: List[datetime] = []
    for year in range(1962, 1973):
        for month in range(1, 13):
            year_months.append(datetime(year=year, month=month, day=1))
    while date_index < len(dates) and month_index < len(year_months):
        if dates[date_index][1] > year_months[month_index]:
            data.append((year_months[month_index], (dates[date_index][0] - starting_time).seconds))
            month_index += 1
        else:
            date_index += 1

    for datum in data:
        print(f"{datum[0].strftime('%Y-%m-%d')},{datum[1]}")


if __name__ == "__main__":
    parser = ArgumentParser(prog="Speed Analyzer",
                            description="This program grabs the game.log file from the last session, "
                                        "and reads it to and reads it to analyze how fast the game ran.\n "
                                        "It then saves a copy of the data in output and makes a pretty graph "
                                        "showing that info\n"
                                        "Known issues: HoI4 doesn't print the day in the log so this test "
                                        "must be run on a single day.")
    args = parser.parse_args()
    main()
